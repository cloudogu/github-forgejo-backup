/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
	"time"
)

// checks if the ActionRun type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionRun{}

// ActionRun ActionRun represents an action run
type ActionRun struct {
	// the cron id for the schedule trigger
	ScheduleID *int64 `json:"ScheduleID,omitempty"`
	// who approved this action run
	ApprovedBy *int64 `json:"approved_by,omitempty"`
	// the commit sha the action run ran on
	CommitSha *string `json:"commit_sha,omitempty"`
	// when the action run was created
	Created *time.Time `json:"created,omitempty"`
	// A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
	Duration *int64 `json:"duration,omitempty"`
	// the webhook event that causes the workflow to run
	Event *string `json:"event,omitempty"`
	// the payload of the webhook event that causes the workflow to run
	EventPayload *string `json:"event_payload,omitempty"`
	// the url of this action run
	HtmlUrl *string `json:"html_url,omitempty"`
	// the action run id
	Id *int64 `json:"id,omitempty"`
	// a unique number for each run of a repository
	IndexInRepo *int64 `json:"index_in_repo,omitempty"`
	// If this is triggered by a PR from a forked repository or an untrusted user, we need to check if it is approved and limit permissions when running the workflow.
	IsForkPullRequest *bool `json:"is_fork_pull_request,omitempty"`
	// has the commit/tag/… the action run ran on been deleted
	IsRefDeleted *bool `json:"is_ref_deleted,omitempty"`
	// may need approval if it's a fork pull request
	NeedApproval *bool `json:"need_approval,omitempty"`
	// the commit/tag/… the action run ran on
	Prettyref *string `json:"prettyref,omitempty"`
	Repository *Repository `json:"repository,omitempty"`
	// when the action run was started
	Started *time.Time `json:"started,omitempty"`
	// the current status of this run
	Status *string `json:"status,omitempty"`
	// when the action run was stopped
	Stopped *time.Time `json:"stopped,omitempty"`
	// the action run's title
	Title *string `json:"title,omitempty"`
	// the trigger event defined in the `on` configuration of the triggered workflow
	TriggerEvent *string `json:"trigger_event,omitempty"`
	TriggerUser *User `json:"trigger_user,omitempty"`
	// when the action run was last updated
	Updated *time.Time `json:"updated,omitempty"`
	// the name of workflow file
	WorkflowId *string `json:"workflow_id,omitempty"`
}

// NewActionRun instantiates a new ActionRun object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionRun() *ActionRun {
	this := ActionRun{}
	return &this
}

// NewActionRunWithDefaults instantiates a new ActionRun object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionRunWithDefaults() *ActionRun {
	this := ActionRun{}
	return &this
}

// GetScheduleID returns the ScheduleID field value if set, zero value otherwise.
func (o *ActionRun) GetScheduleID() int64 {
	if o == nil || IsNil(o.ScheduleID) {
		var ret int64
		return ret
	}
	return *o.ScheduleID
}

// GetScheduleIDOk returns a tuple with the ScheduleID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetScheduleIDOk() (*int64, bool) {
	if o == nil || IsNil(o.ScheduleID) {
		return nil, false
	}
	return o.ScheduleID, true
}

// HasScheduleID returns a boolean if a field has been set.
func (o *ActionRun) HasScheduleID() bool {
	if o != nil && !IsNil(o.ScheduleID) {
		return true
	}

	return false
}

// SetScheduleID gets a reference to the given int64 and assigns it to the ScheduleID field.
func (o *ActionRun) SetScheduleID(v int64) {
	o.ScheduleID = &v
}

// GetApprovedBy returns the ApprovedBy field value if set, zero value otherwise.
func (o *ActionRun) GetApprovedBy() int64 {
	if o == nil || IsNil(o.ApprovedBy) {
		var ret int64
		return ret
	}
	return *o.ApprovedBy
}

// GetApprovedByOk returns a tuple with the ApprovedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetApprovedByOk() (*int64, bool) {
	if o == nil || IsNil(o.ApprovedBy) {
		return nil, false
	}
	return o.ApprovedBy, true
}

// HasApprovedBy returns a boolean if a field has been set.
func (o *ActionRun) HasApprovedBy() bool {
	if o != nil && !IsNil(o.ApprovedBy) {
		return true
	}

	return false
}

// SetApprovedBy gets a reference to the given int64 and assigns it to the ApprovedBy field.
func (o *ActionRun) SetApprovedBy(v int64) {
	o.ApprovedBy = &v
}

// GetCommitSha returns the CommitSha field value if set, zero value otherwise.
func (o *ActionRun) GetCommitSha() string {
	if o == nil || IsNil(o.CommitSha) {
		var ret string
		return ret
	}
	return *o.CommitSha
}

// GetCommitShaOk returns a tuple with the CommitSha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetCommitShaOk() (*string, bool) {
	if o == nil || IsNil(o.CommitSha) {
		return nil, false
	}
	return o.CommitSha, true
}

// HasCommitSha returns a boolean if a field has been set.
func (o *ActionRun) HasCommitSha() bool {
	if o != nil && !IsNil(o.CommitSha) {
		return true
	}

	return false
}

// SetCommitSha gets a reference to the given string and assigns it to the CommitSha field.
func (o *ActionRun) SetCommitSha(v string) {
	o.CommitSha = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ActionRun) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ActionRun) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *ActionRun) SetCreated(v time.Time) {
	o.Created = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *ActionRun) GetDuration() int64 {
	if o == nil || IsNil(o.Duration) {
		var ret int64
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetDurationOk() (*int64, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *ActionRun) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int64 and assigns it to the Duration field.
func (o *ActionRun) SetDuration(v int64) {
	o.Duration = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *ActionRun) GetEvent() string {
	if o == nil || IsNil(o.Event) {
		var ret string
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetEventOk() (*string, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *ActionRun) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given string and assigns it to the Event field.
func (o *ActionRun) SetEvent(v string) {
	o.Event = &v
}

// GetEventPayload returns the EventPayload field value if set, zero value otherwise.
func (o *ActionRun) GetEventPayload() string {
	if o == nil || IsNil(o.EventPayload) {
		var ret string
		return ret
	}
	return *o.EventPayload
}

// GetEventPayloadOk returns a tuple with the EventPayload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetEventPayloadOk() (*string, bool) {
	if o == nil || IsNil(o.EventPayload) {
		return nil, false
	}
	return o.EventPayload, true
}

// HasEventPayload returns a boolean if a field has been set.
func (o *ActionRun) HasEventPayload() bool {
	if o != nil && !IsNil(o.EventPayload) {
		return true
	}

	return false
}

// SetEventPayload gets a reference to the given string and assigns it to the EventPayload field.
func (o *ActionRun) SetEventPayload(v string) {
	o.EventPayload = &v
}

// GetHtmlUrl returns the HtmlUrl field value if set, zero value otherwise.
func (o *ActionRun) GetHtmlUrl() string {
	if o == nil || IsNil(o.HtmlUrl) {
		var ret string
		return ret
	}
	return *o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetHtmlUrlOk() (*string, bool) {
	if o == nil || IsNil(o.HtmlUrl) {
		return nil, false
	}
	return o.HtmlUrl, true
}

// HasHtmlUrl returns a boolean if a field has been set.
func (o *ActionRun) HasHtmlUrl() bool {
	if o != nil && !IsNil(o.HtmlUrl) {
		return true
	}

	return false
}

// SetHtmlUrl gets a reference to the given string and assigns it to the HtmlUrl field.
func (o *ActionRun) SetHtmlUrl(v string) {
	o.HtmlUrl = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ActionRun) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ActionRun) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ActionRun) SetId(v int64) {
	o.Id = &v
}

// GetIndexInRepo returns the IndexInRepo field value if set, zero value otherwise.
func (o *ActionRun) GetIndexInRepo() int64 {
	if o == nil || IsNil(o.IndexInRepo) {
		var ret int64
		return ret
	}
	return *o.IndexInRepo
}

// GetIndexInRepoOk returns a tuple with the IndexInRepo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetIndexInRepoOk() (*int64, bool) {
	if o == nil || IsNil(o.IndexInRepo) {
		return nil, false
	}
	return o.IndexInRepo, true
}

// HasIndexInRepo returns a boolean if a field has been set.
func (o *ActionRun) HasIndexInRepo() bool {
	if o != nil && !IsNil(o.IndexInRepo) {
		return true
	}

	return false
}

// SetIndexInRepo gets a reference to the given int64 and assigns it to the IndexInRepo field.
func (o *ActionRun) SetIndexInRepo(v int64) {
	o.IndexInRepo = &v
}

// GetIsForkPullRequest returns the IsForkPullRequest field value if set, zero value otherwise.
func (o *ActionRun) GetIsForkPullRequest() bool {
	if o == nil || IsNil(o.IsForkPullRequest) {
		var ret bool
		return ret
	}
	return *o.IsForkPullRequest
}

// GetIsForkPullRequestOk returns a tuple with the IsForkPullRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetIsForkPullRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.IsForkPullRequest) {
		return nil, false
	}
	return o.IsForkPullRequest, true
}

// HasIsForkPullRequest returns a boolean if a field has been set.
func (o *ActionRun) HasIsForkPullRequest() bool {
	if o != nil && !IsNil(o.IsForkPullRequest) {
		return true
	}

	return false
}

// SetIsForkPullRequest gets a reference to the given bool and assigns it to the IsForkPullRequest field.
func (o *ActionRun) SetIsForkPullRequest(v bool) {
	o.IsForkPullRequest = &v
}

// GetIsRefDeleted returns the IsRefDeleted field value if set, zero value otherwise.
func (o *ActionRun) GetIsRefDeleted() bool {
	if o == nil || IsNil(o.IsRefDeleted) {
		var ret bool
		return ret
	}
	return *o.IsRefDeleted
}

// GetIsRefDeletedOk returns a tuple with the IsRefDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetIsRefDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRefDeleted) {
		return nil, false
	}
	return o.IsRefDeleted, true
}

// HasIsRefDeleted returns a boolean if a field has been set.
func (o *ActionRun) HasIsRefDeleted() bool {
	if o != nil && !IsNil(o.IsRefDeleted) {
		return true
	}

	return false
}

// SetIsRefDeleted gets a reference to the given bool and assigns it to the IsRefDeleted field.
func (o *ActionRun) SetIsRefDeleted(v bool) {
	o.IsRefDeleted = &v
}

// GetNeedApproval returns the NeedApproval field value if set, zero value otherwise.
func (o *ActionRun) GetNeedApproval() bool {
	if o == nil || IsNil(o.NeedApproval) {
		var ret bool
		return ret
	}
	return *o.NeedApproval
}

// GetNeedApprovalOk returns a tuple with the NeedApproval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetNeedApprovalOk() (*bool, bool) {
	if o == nil || IsNil(o.NeedApproval) {
		return nil, false
	}
	return o.NeedApproval, true
}

// HasNeedApproval returns a boolean if a field has been set.
func (o *ActionRun) HasNeedApproval() bool {
	if o != nil && !IsNil(o.NeedApproval) {
		return true
	}

	return false
}

// SetNeedApproval gets a reference to the given bool and assigns it to the NeedApproval field.
func (o *ActionRun) SetNeedApproval(v bool) {
	o.NeedApproval = &v
}

// GetPrettyref returns the Prettyref field value if set, zero value otherwise.
func (o *ActionRun) GetPrettyref() string {
	if o == nil || IsNil(o.Prettyref) {
		var ret string
		return ret
	}
	return *o.Prettyref
}

// GetPrettyrefOk returns a tuple with the Prettyref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetPrettyrefOk() (*string, bool) {
	if o == nil || IsNil(o.Prettyref) {
		return nil, false
	}
	return o.Prettyref, true
}

// HasPrettyref returns a boolean if a field has been set.
func (o *ActionRun) HasPrettyref() bool {
	if o != nil && !IsNil(o.Prettyref) {
		return true
	}

	return false
}

// SetPrettyref gets a reference to the given string and assigns it to the Prettyref field.
func (o *ActionRun) SetPrettyref(v string) {
	o.Prettyref = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *ActionRun) GetRepository() Repository {
	if o == nil || IsNil(o.Repository) {
		var ret Repository
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetRepositoryOk() (*Repository, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *ActionRun) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given Repository and assigns it to the Repository field.
func (o *ActionRun) SetRepository(v Repository) {
	o.Repository = &v
}

// GetStarted returns the Started field value if set, zero value otherwise.
func (o *ActionRun) GetStarted() time.Time {
	if o == nil || IsNil(o.Started) {
		var ret time.Time
		return ret
	}
	return *o.Started
}

// GetStartedOk returns a tuple with the Started field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetStartedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Started) {
		return nil, false
	}
	return o.Started, true
}

// HasStarted returns a boolean if a field has been set.
func (o *ActionRun) HasStarted() bool {
	if o != nil && !IsNil(o.Started) {
		return true
	}

	return false
}

// SetStarted gets a reference to the given time.Time and assigns it to the Started field.
func (o *ActionRun) SetStarted(v time.Time) {
	o.Started = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ActionRun) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ActionRun) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ActionRun) SetStatus(v string) {
	o.Status = &v
}

// GetStopped returns the Stopped field value if set, zero value otherwise.
func (o *ActionRun) GetStopped() time.Time {
	if o == nil || IsNil(o.Stopped) {
		var ret time.Time
		return ret
	}
	return *o.Stopped
}

// GetStoppedOk returns a tuple with the Stopped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetStoppedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Stopped) {
		return nil, false
	}
	return o.Stopped, true
}

// HasStopped returns a boolean if a field has been set.
func (o *ActionRun) HasStopped() bool {
	if o != nil && !IsNil(o.Stopped) {
		return true
	}

	return false
}

// SetStopped gets a reference to the given time.Time and assigns it to the Stopped field.
func (o *ActionRun) SetStopped(v time.Time) {
	o.Stopped = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ActionRun) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ActionRun) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ActionRun) SetTitle(v string) {
	o.Title = &v
}

// GetTriggerEvent returns the TriggerEvent field value if set, zero value otherwise.
func (o *ActionRun) GetTriggerEvent() string {
	if o == nil || IsNil(o.TriggerEvent) {
		var ret string
		return ret
	}
	return *o.TriggerEvent
}

// GetTriggerEventOk returns a tuple with the TriggerEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetTriggerEventOk() (*string, bool) {
	if o == nil || IsNil(o.TriggerEvent) {
		return nil, false
	}
	return o.TriggerEvent, true
}

// HasTriggerEvent returns a boolean if a field has been set.
func (o *ActionRun) HasTriggerEvent() bool {
	if o != nil && !IsNil(o.TriggerEvent) {
		return true
	}

	return false
}

// SetTriggerEvent gets a reference to the given string and assigns it to the TriggerEvent field.
func (o *ActionRun) SetTriggerEvent(v string) {
	o.TriggerEvent = &v
}

// GetTriggerUser returns the TriggerUser field value if set, zero value otherwise.
func (o *ActionRun) GetTriggerUser() User {
	if o == nil || IsNil(o.TriggerUser) {
		var ret User
		return ret
	}
	return *o.TriggerUser
}

// GetTriggerUserOk returns a tuple with the TriggerUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetTriggerUserOk() (*User, bool) {
	if o == nil || IsNil(o.TriggerUser) {
		return nil, false
	}
	return o.TriggerUser, true
}

// HasTriggerUser returns a boolean if a field has been set.
func (o *ActionRun) HasTriggerUser() bool {
	if o != nil && !IsNil(o.TriggerUser) {
		return true
	}

	return false
}

// SetTriggerUser gets a reference to the given User and assigns it to the TriggerUser field.
func (o *ActionRun) SetTriggerUser(v User) {
	o.TriggerUser = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *ActionRun) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *ActionRun) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *ActionRun) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetWorkflowId returns the WorkflowId field value if set, zero value otherwise.
func (o *ActionRun) GetWorkflowId() string {
	if o == nil || IsNil(o.WorkflowId) {
		var ret string
		return ret
	}
	return *o.WorkflowId
}

// GetWorkflowIdOk returns a tuple with the WorkflowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRun) GetWorkflowIdOk() (*string, bool) {
	if o == nil || IsNil(o.WorkflowId) {
		return nil, false
	}
	return o.WorkflowId, true
}

// HasWorkflowId returns a boolean if a field has been set.
func (o *ActionRun) HasWorkflowId() bool {
	if o != nil && !IsNil(o.WorkflowId) {
		return true
	}

	return false
}

// SetWorkflowId gets a reference to the given string and assigns it to the WorkflowId field.
func (o *ActionRun) SetWorkflowId(v string) {
	o.WorkflowId = &v
}

func (o ActionRun) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionRun) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ScheduleID) {
		toSerialize["ScheduleID"] = o.ScheduleID
	}
	if !IsNil(o.ApprovedBy) {
		toSerialize["approved_by"] = o.ApprovedBy
	}
	if !IsNil(o.CommitSha) {
		toSerialize["commit_sha"] = o.CommitSha
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	if !IsNil(o.EventPayload) {
		toSerialize["event_payload"] = o.EventPayload
	}
	if !IsNil(o.HtmlUrl) {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IndexInRepo) {
		toSerialize["index_in_repo"] = o.IndexInRepo
	}
	if !IsNil(o.IsForkPullRequest) {
		toSerialize["is_fork_pull_request"] = o.IsForkPullRequest
	}
	if !IsNil(o.IsRefDeleted) {
		toSerialize["is_ref_deleted"] = o.IsRefDeleted
	}
	if !IsNil(o.NeedApproval) {
		toSerialize["need_approval"] = o.NeedApproval
	}
	if !IsNil(o.Prettyref) {
		toSerialize["prettyref"] = o.Prettyref
	}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	if !IsNil(o.Started) {
		toSerialize["started"] = o.Started
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Stopped) {
		toSerialize["stopped"] = o.Stopped
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.TriggerEvent) {
		toSerialize["trigger_event"] = o.TriggerEvent
	}
	if !IsNil(o.TriggerUser) {
		toSerialize["trigger_user"] = o.TriggerUser
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.WorkflowId) {
		toSerialize["workflow_id"] = o.WorkflowId
	}
	return toSerialize, nil
}

type NullableActionRun struct {
	value *ActionRun
	isSet bool
}

func (v NullableActionRun) Get() *ActionRun {
	return v.value
}

func (v *NullableActionRun) Set(val *ActionRun) {
	v.value = val
	v.isSet = true
}

func (v NullableActionRun) IsSet() bool {
	return v.isSet
}

func (v *NullableActionRun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionRun(val *ActionRun) *NullableActionRun {
	return &NullableActionRun{value: val, isSet: true}
}

func (v NullableActionRun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionRun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


