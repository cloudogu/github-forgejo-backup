/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the ActionRunJob type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionRunJob{}

// ActionRunJob ActionRunJob represents a job of a run
type ActionRunJob struct {
	// the action run job id
	Id *int64 `json:"id,omitempty"`
	// the action run job name
	Name *string `json:"name,omitempty"`
	// the action run job needed ids
	Needs []string `json:"needs,omitempty"`
	// the owner id
	OwnerId *int64 `json:"owner_id,omitempty"`
	// the repository id
	RepoId *int64 `json:"repo_id,omitempty"`
	// the action run job labels to run on
	RunsOn []string `json:"runs_on,omitempty"`
	// the action run job status
	Status *string `json:"status,omitempty"`
	// the action run job latest task id
	TaskId *int64 `json:"task_id,omitempty"`
}

// NewActionRunJob instantiates a new ActionRunJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionRunJob() *ActionRunJob {
	this := ActionRunJob{}
	return &this
}

// NewActionRunJobWithDefaults instantiates a new ActionRunJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionRunJobWithDefaults() *ActionRunJob {
	this := ActionRunJob{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ActionRunJob) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRunJob) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ActionRunJob) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ActionRunJob) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ActionRunJob) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRunJob) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ActionRunJob) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ActionRunJob) SetName(v string) {
	o.Name = &v
}

// GetNeeds returns the Needs field value if set, zero value otherwise.
func (o *ActionRunJob) GetNeeds() []string {
	if o == nil || IsNil(o.Needs) {
		var ret []string
		return ret
	}
	return o.Needs
}

// GetNeedsOk returns a tuple with the Needs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRunJob) GetNeedsOk() ([]string, bool) {
	if o == nil || IsNil(o.Needs) {
		return nil, false
	}
	return o.Needs, true
}

// HasNeeds returns a boolean if a field has been set.
func (o *ActionRunJob) HasNeeds() bool {
	if o != nil && !IsNil(o.Needs) {
		return true
	}

	return false
}

// SetNeeds gets a reference to the given []string and assigns it to the Needs field.
func (o *ActionRunJob) SetNeeds(v []string) {
	o.Needs = v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *ActionRunJob) GetOwnerId() int64 {
	if o == nil || IsNil(o.OwnerId) {
		var ret int64
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRunJob) GetOwnerIdOk() (*int64, bool) {
	if o == nil || IsNil(o.OwnerId) {
		return nil, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *ActionRunJob) HasOwnerId() bool {
	if o != nil && !IsNil(o.OwnerId) {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given int64 and assigns it to the OwnerId field.
func (o *ActionRunJob) SetOwnerId(v int64) {
	o.OwnerId = &v
}

// GetRepoId returns the RepoId field value if set, zero value otherwise.
func (o *ActionRunJob) GetRepoId() int64 {
	if o == nil || IsNil(o.RepoId) {
		var ret int64
		return ret
	}
	return *o.RepoId
}

// GetRepoIdOk returns a tuple with the RepoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRunJob) GetRepoIdOk() (*int64, bool) {
	if o == nil || IsNil(o.RepoId) {
		return nil, false
	}
	return o.RepoId, true
}

// HasRepoId returns a boolean if a field has been set.
func (o *ActionRunJob) HasRepoId() bool {
	if o != nil && !IsNil(o.RepoId) {
		return true
	}

	return false
}

// SetRepoId gets a reference to the given int64 and assigns it to the RepoId field.
func (o *ActionRunJob) SetRepoId(v int64) {
	o.RepoId = &v
}

// GetRunsOn returns the RunsOn field value if set, zero value otherwise.
func (o *ActionRunJob) GetRunsOn() []string {
	if o == nil || IsNil(o.RunsOn) {
		var ret []string
		return ret
	}
	return o.RunsOn
}

// GetRunsOnOk returns a tuple with the RunsOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRunJob) GetRunsOnOk() ([]string, bool) {
	if o == nil || IsNil(o.RunsOn) {
		return nil, false
	}
	return o.RunsOn, true
}

// HasRunsOn returns a boolean if a field has been set.
func (o *ActionRunJob) HasRunsOn() bool {
	if o != nil && !IsNil(o.RunsOn) {
		return true
	}

	return false
}

// SetRunsOn gets a reference to the given []string and assigns it to the RunsOn field.
func (o *ActionRunJob) SetRunsOn(v []string) {
	o.RunsOn = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ActionRunJob) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRunJob) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ActionRunJob) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ActionRunJob) SetStatus(v string) {
	o.Status = &v
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *ActionRunJob) GetTaskId() int64 {
	if o == nil || IsNil(o.TaskId) {
		var ret int64
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRunJob) GetTaskIdOk() (*int64, bool) {
	if o == nil || IsNil(o.TaskId) {
		return nil, false
	}
	return o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *ActionRunJob) HasTaskId() bool {
	if o != nil && !IsNil(o.TaskId) {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given int64 and assigns it to the TaskId field.
func (o *ActionRunJob) SetTaskId(v int64) {
	o.TaskId = &v
}

func (o ActionRunJob) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionRunJob) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Needs) {
		toSerialize["needs"] = o.Needs
	}
	if !IsNil(o.OwnerId) {
		toSerialize["owner_id"] = o.OwnerId
	}
	if !IsNil(o.RepoId) {
		toSerialize["repo_id"] = o.RepoId
	}
	if !IsNil(o.RunsOn) {
		toSerialize["runs_on"] = o.RunsOn
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TaskId) {
		toSerialize["task_id"] = o.TaskId
	}
	return toSerialize, nil
}

type NullableActionRunJob struct {
	value *ActionRunJob
	isSet bool
}

func (v NullableActionRunJob) Get() *ActionRunJob {
	return v.value
}

func (v *NullableActionRunJob) Set(val *ActionRunJob) {
	v.value = val
	v.isSet = true
}

func (v NullableActionRunJob) IsSet() bool {
	return v.isSet
}

func (v *NullableActionRunJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionRunJob(val *ActionRunJob) *NullableActionRunJob {
	return &NullableActionRunJob{value: val, isSet: true}
}

func (v NullableActionRunJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionRunJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


