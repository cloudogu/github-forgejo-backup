/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
	"time"
)

// checks if the ActionTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionTask{}

// ActionTask ActionTask represents a ActionTask
type ActionTask struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	DisplayTitle *string `json:"display_title,omitempty"`
	Event *string `json:"event,omitempty"`
	HeadBranch *string `json:"head_branch,omitempty"`
	HeadSha *string `json:"head_sha,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	RunNumber *int64 `json:"run_number,omitempty"`
	RunStartedAt *time.Time `json:"run_started_at,omitempty"`
	Status *string `json:"status,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Url *string `json:"url,omitempty"`
	WorkflowId *string `json:"workflow_id,omitempty"`
}

// NewActionTask instantiates a new ActionTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionTask() *ActionTask {
	this := ActionTask{}
	return &this
}

// NewActionTaskWithDefaults instantiates a new ActionTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionTaskWithDefaults() *ActionTask {
	this := ActionTask{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ActionTask) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTask) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ActionTask) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ActionTask) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDisplayTitle returns the DisplayTitle field value if set, zero value otherwise.
func (o *ActionTask) GetDisplayTitle() string {
	if o == nil || IsNil(o.DisplayTitle) {
		var ret string
		return ret
	}
	return *o.DisplayTitle
}

// GetDisplayTitleOk returns a tuple with the DisplayTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTask) GetDisplayTitleOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayTitle) {
		return nil, false
	}
	return o.DisplayTitle, true
}

// HasDisplayTitle returns a boolean if a field has been set.
func (o *ActionTask) HasDisplayTitle() bool {
	if o != nil && !IsNil(o.DisplayTitle) {
		return true
	}

	return false
}

// SetDisplayTitle gets a reference to the given string and assigns it to the DisplayTitle field.
func (o *ActionTask) SetDisplayTitle(v string) {
	o.DisplayTitle = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *ActionTask) GetEvent() string {
	if o == nil || IsNil(o.Event) {
		var ret string
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTask) GetEventOk() (*string, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *ActionTask) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given string and assigns it to the Event field.
func (o *ActionTask) SetEvent(v string) {
	o.Event = &v
}

// GetHeadBranch returns the HeadBranch field value if set, zero value otherwise.
func (o *ActionTask) GetHeadBranch() string {
	if o == nil || IsNil(o.HeadBranch) {
		var ret string
		return ret
	}
	return *o.HeadBranch
}

// GetHeadBranchOk returns a tuple with the HeadBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTask) GetHeadBranchOk() (*string, bool) {
	if o == nil || IsNil(o.HeadBranch) {
		return nil, false
	}
	return o.HeadBranch, true
}

// HasHeadBranch returns a boolean if a field has been set.
func (o *ActionTask) HasHeadBranch() bool {
	if o != nil && !IsNil(o.HeadBranch) {
		return true
	}

	return false
}

// SetHeadBranch gets a reference to the given string and assigns it to the HeadBranch field.
func (o *ActionTask) SetHeadBranch(v string) {
	o.HeadBranch = &v
}

// GetHeadSha returns the HeadSha field value if set, zero value otherwise.
func (o *ActionTask) GetHeadSha() string {
	if o == nil || IsNil(o.HeadSha) {
		var ret string
		return ret
	}
	return *o.HeadSha
}

// GetHeadShaOk returns a tuple with the HeadSha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTask) GetHeadShaOk() (*string, bool) {
	if o == nil || IsNil(o.HeadSha) {
		return nil, false
	}
	return o.HeadSha, true
}

// HasHeadSha returns a boolean if a field has been set.
func (o *ActionTask) HasHeadSha() bool {
	if o != nil && !IsNil(o.HeadSha) {
		return true
	}

	return false
}

// SetHeadSha gets a reference to the given string and assigns it to the HeadSha field.
func (o *ActionTask) SetHeadSha(v string) {
	o.HeadSha = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ActionTask) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTask) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ActionTask) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ActionTask) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ActionTask) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTask) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ActionTask) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ActionTask) SetName(v string) {
	o.Name = &v
}

// GetRunNumber returns the RunNumber field value if set, zero value otherwise.
func (o *ActionTask) GetRunNumber() int64 {
	if o == nil || IsNil(o.RunNumber) {
		var ret int64
		return ret
	}
	return *o.RunNumber
}

// GetRunNumberOk returns a tuple with the RunNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTask) GetRunNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.RunNumber) {
		return nil, false
	}
	return o.RunNumber, true
}

// HasRunNumber returns a boolean if a field has been set.
func (o *ActionTask) HasRunNumber() bool {
	if o != nil && !IsNil(o.RunNumber) {
		return true
	}

	return false
}

// SetRunNumber gets a reference to the given int64 and assigns it to the RunNumber field.
func (o *ActionTask) SetRunNumber(v int64) {
	o.RunNumber = &v
}

// GetRunStartedAt returns the RunStartedAt field value if set, zero value otherwise.
func (o *ActionTask) GetRunStartedAt() time.Time {
	if o == nil || IsNil(o.RunStartedAt) {
		var ret time.Time
		return ret
	}
	return *o.RunStartedAt
}

// GetRunStartedAtOk returns a tuple with the RunStartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTask) GetRunStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RunStartedAt) {
		return nil, false
	}
	return o.RunStartedAt, true
}

// HasRunStartedAt returns a boolean if a field has been set.
func (o *ActionTask) HasRunStartedAt() bool {
	if o != nil && !IsNil(o.RunStartedAt) {
		return true
	}

	return false
}

// SetRunStartedAt gets a reference to the given time.Time and assigns it to the RunStartedAt field.
func (o *ActionTask) SetRunStartedAt(v time.Time) {
	o.RunStartedAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ActionTask) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTask) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ActionTask) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ActionTask) SetStatus(v string) {
	o.Status = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ActionTask) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTask) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ActionTask) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ActionTask) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ActionTask) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTask) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ActionTask) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ActionTask) SetUrl(v string) {
	o.Url = &v
}

// GetWorkflowId returns the WorkflowId field value if set, zero value otherwise.
func (o *ActionTask) GetWorkflowId() string {
	if o == nil || IsNil(o.WorkflowId) {
		var ret string
		return ret
	}
	return *o.WorkflowId
}

// GetWorkflowIdOk returns a tuple with the WorkflowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTask) GetWorkflowIdOk() (*string, bool) {
	if o == nil || IsNil(o.WorkflowId) {
		return nil, false
	}
	return o.WorkflowId, true
}

// HasWorkflowId returns a boolean if a field has been set.
func (o *ActionTask) HasWorkflowId() bool {
	if o != nil && !IsNil(o.WorkflowId) {
		return true
	}

	return false
}

// SetWorkflowId gets a reference to the given string and assigns it to the WorkflowId field.
func (o *ActionTask) SetWorkflowId(v string) {
	o.WorkflowId = &v
}

func (o ActionTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.DisplayTitle) {
		toSerialize["display_title"] = o.DisplayTitle
	}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	if !IsNil(o.HeadBranch) {
		toSerialize["head_branch"] = o.HeadBranch
	}
	if !IsNil(o.HeadSha) {
		toSerialize["head_sha"] = o.HeadSha
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RunNumber) {
		toSerialize["run_number"] = o.RunNumber
	}
	if !IsNil(o.RunStartedAt) {
		toSerialize["run_started_at"] = o.RunStartedAt
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.WorkflowId) {
		toSerialize["workflow_id"] = o.WorkflowId
	}
	return toSerialize, nil
}

type NullableActionTask struct {
	value *ActionTask
	isSet bool
}

func (v NullableActionTask) Get() *ActionTask {
	return v.value
}

func (v *NullableActionTask) Set(val *ActionTask) {
	v.value = val
	v.isSet = true
}

func (v NullableActionTask) IsSet() bool {
	return v.isSet
}

func (v *NullableActionTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionTask(val *ActionTask) *NullableActionTask {
	return &NullableActionTask{value: val, isSet: true}
}

func (v NullableActionTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


