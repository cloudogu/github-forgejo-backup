/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the ActionTaskResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionTaskResponse{}

// ActionTaskResponse ActionTaskResponse returns a ActionTask
type ActionTaskResponse struct {
	TotalCount   *int64       `json:"total_count,omitempty"`
	WorkflowRuns []ActionTask `json:"workflow_runs,omitempty"`
}

// NewActionTaskResponse instantiates a new ActionTaskResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionTaskResponse() *ActionTaskResponse {
	this := ActionTaskResponse{}
	return &this
}

// NewActionTaskResponseWithDefaults instantiates a new ActionTaskResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionTaskResponseWithDefaults() *ActionTaskResponse {
	this := ActionTaskResponse{}
	return &this
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *ActionTaskResponse) GetTotalCount() int64 {
	if o == nil || IsNil(o.TotalCount) {
		var ret int64
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTaskResponse) GetTotalCountOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *ActionTaskResponse) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int64 and assigns it to the TotalCount field.
func (o *ActionTaskResponse) SetTotalCount(v int64) {
	o.TotalCount = &v
}

// GetWorkflowRuns returns the WorkflowRuns field value if set, zero value otherwise.
func (o *ActionTaskResponse) GetWorkflowRuns() []ActionTask {
	if o == nil || IsNil(o.WorkflowRuns) {
		var ret []ActionTask
		return ret
	}
	return o.WorkflowRuns
}

// GetWorkflowRunsOk returns a tuple with the WorkflowRuns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTaskResponse) GetWorkflowRunsOk() ([]ActionTask, bool) {
	if o == nil || IsNil(o.WorkflowRuns) {
		return nil, false
	}
	return o.WorkflowRuns, true
}

// HasWorkflowRuns returns a boolean if a field has been set.
func (o *ActionTaskResponse) HasWorkflowRuns() bool {
	if o != nil && !IsNil(o.WorkflowRuns) {
		return true
	}

	return false
}

// SetWorkflowRuns gets a reference to the given []ActionTask and assigns it to the WorkflowRuns field.
func (o *ActionTaskResponse) SetWorkflowRuns(v []ActionTask) {
	o.WorkflowRuns = v
}

func (o ActionTaskResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionTaskResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TotalCount) {
		toSerialize["total_count"] = o.TotalCount
	}
	if !IsNil(o.WorkflowRuns) {
		toSerialize["workflow_runs"] = o.WorkflowRuns
	}
	return toSerialize, nil
}

type NullableActionTaskResponse struct {
	value *ActionTaskResponse
	isSet bool
}

func (v NullableActionTaskResponse) Get() *ActionTaskResponse {
	return v.value
}

func (v *NullableActionTaskResponse) Set(val *ActionTaskResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableActionTaskResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableActionTaskResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionTaskResponse(val *ActionTaskResponse) *NullableActionTaskResponse {
	return &NullableActionTaskResponse{value: val, isSet: true}
}

func (v NullableActionTaskResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionTaskResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
