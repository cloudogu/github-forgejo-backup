/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the ActionVariable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionVariable{}

// ActionVariable ActionVariable return value of the query API
type ActionVariable struct {
	// the value of the variable
	Data *string `json:"data,omitempty"`
	// the name of the variable
	Name *string `json:"name,omitempty"`
	// the owner to which the variable belongs
	OwnerId *int64 `json:"owner_id,omitempty"`
	// the repository to which the variable belongs
	RepoId *int64 `json:"repo_id,omitempty"`
}

// NewActionVariable instantiates a new ActionVariable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionVariable() *ActionVariable {
	this := ActionVariable{}
	return &this
}

// NewActionVariableWithDefaults instantiates a new ActionVariable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionVariableWithDefaults() *ActionVariable {
	this := ActionVariable{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ActionVariable) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionVariable) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ActionVariable) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *ActionVariable) SetData(v string) {
	o.Data = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ActionVariable) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionVariable) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ActionVariable) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ActionVariable) SetName(v string) {
	o.Name = &v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *ActionVariable) GetOwnerId() int64 {
	if o == nil || IsNil(o.OwnerId) {
		var ret int64
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionVariable) GetOwnerIdOk() (*int64, bool) {
	if o == nil || IsNil(o.OwnerId) {
		return nil, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *ActionVariable) HasOwnerId() bool {
	if o != nil && !IsNil(o.OwnerId) {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given int64 and assigns it to the OwnerId field.
func (o *ActionVariable) SetOwnerId(v int64) {
	o.OwnerId = &v
}

// GetRepoId returns the RepoId field value if set, zero value otherwise.
func (o *ActionVariable) GetRepoId() int64 {
	if o == nil || IsNil(o.RepoId) {
		var ret int64
		return ret
	}
	return *o.RepoId
}

// GetRepoIdOk returns a tuple with the RepoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionVariable) GetRepoIdOk() (*int64, bool) {
	if o == nil || IsNil(o.RepoId) {
		return nil, false
	}
	return o.RepoId, true
}

// HasRepoId returns a boolean if a field has been set.
func (o *ActionVariable) HasRepoId() bool {
	if o != nil && !IsNil(o.RepoId) {
		return true
	}

	return false
}

// SetRepoId gets a reference to the given int64 and assigns it to the RepoId field.
func (o *ActionVariable) SetRepoId(v int64) {
	o.RepoId = &v
}

func (o ActionVariable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionVariable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OwnerId) {
		toSerialize["owner_id"] = o.OwnerId
	}
	if !IsNil(o.RepoId) {
		toSerialize["repo_id"] = o.RepoId
	}
	return toSerialize, nil
}

type NullableActionVariable struct {
	value *ActionVariable
	isSet bool
}

func (v NullableActionVariable) Get() *ActionVariable {
	return v.value
}

func (v *NullableActionVariable) Set(val *ActionVariable) {
	v.value = val
	v.isSet = true
}

func (v NullableActionVariable) IsSet() bool {
	return v.isSet
}

func (v *NullableActionVariable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionVariable(val *ActionVariable) *NullableActionVariable {
	return &NullableActionVariable{value: val, isSet: true}
}

func (v NullableActionVariable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionVariable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


