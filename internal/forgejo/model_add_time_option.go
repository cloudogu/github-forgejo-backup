/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the AddTimeOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddTimeOption{}

// AddTimeOption AddTimeOption options for adding time to an issue
type AddTimeOption struct {
	Created *time.Time `json:"created,omitempty"`
	// time in seconds
	Time int64 `json:"time"`
	// User who spent the time (optional)
	UserName *string `json:"user_name,omitempty"`
}

type _AddTimeOption AddTimeOption

// NewAddTimeOption instantiates a new AddTimeOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddTimeOption(time int64) *AddTimeOption {
	this := AddTimeOption{}
	this.Time = time
	return &this
}

// NewAddTimeOptionWithDefaults instantiates a new AddTimeOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddTimeOptionWithDefaults() *AddTimeOption {
	this := AddTimeOption{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *AddTimeOption) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddTimeOption) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *AddTimeOption) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *AddTimeOption) SetCreated(v time.Time) {
	o.Created = &v
}

// GetTime returns the Time field value
func (o *AddTimeOption) GetTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *AddTimeOption) GetTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *AddTimeOption) SetTime(v int64) {
	o.Time = v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *AddTimeOption) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddTimeOption) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *AddTimeOption) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *AddTimeOption) SetUserName(v string) {
	o.UserName = &v
}

func (o AddTimeOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddTimeOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	toSerialize["time"] = o.Time
	if !IsNil(o.UserName) {
		toSerialize["user_name"] = o.UserName
	}
	return toSerialize, nil
}

func (o *AddTimeOption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddTimeOption := _AddTimeOption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddTimeOption)

	if err != nil {
		return err
	}

	*o = AddTimeOption(varAddTimeOption)

	return err
}

type NullableAddTimeOption struct {
	value *AddTimeOption
	isSet bool
}

func (v NullableAddTimeOption) Get() *AddTimeOption {
	return v.value
}

func (v *NullableAddTimeOption) Set(val *AddTimeOption) {
	v.value = val
	v.isSet = true
}

func (v NullableAddTimeOption) IsSet() bool {
	return v.isSet
}

func (v *NullableAddTimeOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddTimeOption(val *AddTimeOption) *NullableAddTimeOption {
	return &NullableAddTimeOption{value: val, isSet: true}
}

func (v NullableAddTimeOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddTimeOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
