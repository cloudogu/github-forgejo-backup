/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the APINotFound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &APINotFound{}

// APINotFound struct for APINotFound
type APINotFound struct {
	Errors  []string `json:"errors,omitempty"`
	Message *string  `json:"message,omitempty"`
	Url     *string  `json:"url,omitempty"`
}

// NewAPINotFound instantiates a new APINotFound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAPINotFound() *APINotFound {
	this := APINotFound{}
	return &this
}

// NewAPINotFoundWithDefaults instantiates a new APINotFound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAPINotFoundWithDefaults() *APINotFound {
	this := APINotFound{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *APINotFound) GetErrors() []string {
	if o == nil || IsNil(o.Errors) {
		var ret []string
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APINotFound) GetErrorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *APINotFound) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *APINotFound) SetErrors(v []string) {
	o.Errors = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *APINotFound) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APINotFound) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *APINotFound) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *APINotFound) SetMessage(v string) {
	o.Message = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *APINotFound) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APINotFound) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *APINotFound) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *APINotFound) SetUrl(v string) {
	o.Url = &v
}

func (o APINotFound) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o APINotFound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableAPINotFound struct {
	value *APINotFound
	isSet bool
}

func (v NullableAPINotFound) Get() *APINotFound {
	return v.value
}

func (v *NullableAPINotFound) Set(val *APINotFound) {
	v.value = val
	v.isSet = true
}

func (v NullableAPINotFound) IsSet() bool {
	return v.isSet
}

func (v *NullableAPINotFound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAPINotFound(val *APINotFound) *NullableAPINotFound {
	return &NullableAPINotFound{value: val, isSet: true}
}

func (v NullableAPINotFound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAPINotFound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
