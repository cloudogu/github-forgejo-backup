/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the APIUnauthorizedError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &APIUnauthorizedError{}

// APIUnauthorizedError struct for APIUnauthorizedError
type APIUnauthorizedError struct {
	Message *string `json:"message,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewAPIUnauthorizedError instantiates a new APIUnauthorizedError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAPIUnauthorizedError() *APIUnauthorizedError {
	this := APIUnauthorizedError{}
	return &this
}

// NewAPIUnauthorizedErrorWithDefaults instantiates a new APIUnauthorizedError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAPIUnauthorizedErrorWithDefaults() *APIUnauthorizedError {
	this := APIUnauthorizedError{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *APIUnauthorizedError) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIUnauthorizedError) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *APIUnauthorizedError) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *APIUnauthorizedError) SetMessage(v string) {
	o.Message = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *APIUnauthorizedError) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIUnauthorizedError) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *APIUnauthorizedError) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *APIUnauthorizedError) SetUrl(v string) {
	o.Url = &v
}

func (o APIUnauthorizedError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o APIUnauthorizedError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableAPIUnauthorizedError struct {
	value *APIUnauthorizedError
	isSet bool
}

func (v NullableAPIUnauthorizedError) Get() *APIUnauthorizedError {
	return v.value
}

func (v *NullableAPIUnauthorizedError) Set(val *APIUnauthorizedError) {
	v.value = val
	v.isSet = true
}

func (v NullableAPIUnauthorizedError) IsSet() bool {
	return v.isSet
}

func (v *NullableAPIUnauthorizedError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAPIUnauthorizedError(val *APIUnauthorizedError) *NullableAPIUnauthorizedError {
	return &NullableAPIUnauthorizedError{value: val, isSet: true}
}

func (v NullableAPIUnauthorizedError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAPIUnauthorizedError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


