/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
	"time"
)

// checks if the BlockedUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockedUser{}

// BlockedUser struct for BlockedUser
type BlockedUser struct {
	BlockId   *int64     `json:"block_id,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
}

// NewBlockedUser instantiates a new BlockedUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockedUser() *BlockedUser {
	this := BlockedUser{}
	return &this
}

// NewBlockedUserWithDefaults instantiates a new BlockedUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockedUserWithDefaults() *BlockedUser {
	this := BlockedUser{}
	return &this
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *BlockedUser) GetBlockId() int64 {
	if o == nil || IsNil(o.BlockId) {
		var ret int64
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockedUser) GetBlockIdOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *BlockedUser) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given int64 and assigns it to the BlockId field.
func (o *BlockedUser) SetBlockId(v int64) {
	o.BlockId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *BlockedUser) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockedUser) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *BlockedUser) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *BlockedUser) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

func (o BlockedUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockedUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockId) {
		toSerialize["block_id"] = o.BlockId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	return toSerialize, nil
}

type NullableBlockedUser struct {
	value *BlockedUser
	isSet bool
}

func (v NullableBlockedUser) Get() *BlockedUser {
	return v.value
}

func (v *NullableBlockedUser) Set(val *BlockedUser) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockedUser) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockedUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockedUser(val *BlockedUser) *NullableBlockedUser {
	return &NullableBlockedUser{value: val, isSet: true}
}

func (v NullableBlockedUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockedUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
