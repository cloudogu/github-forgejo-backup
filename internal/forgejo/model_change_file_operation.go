/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChangeFileOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeFileOperation{}

// ChangeFileOperation ChangeFileOperation for creating, updating or deleting a file
type ChangeFileOperation struct {
	// new or updated file content, must be base64 encoded
	Content *string `json:"content,omitempty"`
	// old path of the file to move
	FromPath *string `json:"from_path,omitempty"`
	// indicates what to do with the file
	Operation string `json:"operation"`
	// path to the existing or new file
	Path string `json:"path"`
	// sha is the SHA for the file that already exists, required for update or delete
	Sha *string `json:"sha,omitempty"`
}

type _ChangeFileOperation ChangeFileOperation

// NewChangeFileOperation instantiates a new ChangeFileOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeFileOperation(operation string, path string) *ChangeFileOperation {
	this := ChangeFileOperation{}
	this.Operation = operation
	this.Path = path
	return &this
}

// NewChangeFileOperationWithDefaults instantiates a new ChangeFileOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeFileOperationWithDefaults() *ChangeFileOperation {
	this := ChangeFileOperation{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ChangeFileOperation) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeFileOperation) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ChangeFileOperation) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *ChangeFileOperation) SetContent(v string) {
	o.Content = &v
}

// GetFromPath returns the FromPath field value if set, zero value otherwise.
func (o *ChangeFileOperation) GetFromPath() string {
	if o == nil || IsNil(o.FromPath) {
		var ret string
		return ret
	}
	return *o.FromPath
}

// GetFromPathOk returns a tuple with the FromPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeFileOperation) GetFromPathOk() (*string, bool) {
	if o == nil || IsNil(o.FromPath) {
		return nil, false
	}
	return o.FromPath, true
}

// HasFromPath returns a boolean if a field has been set.
func (o *ChangeFileOperation) HasFromPath() bool {
	if o != nil && !IsNil(o.FromPath) {
		return true
	}

	return false
}

// SetFromPath gets a reference to the given string and assigns it to the FromPath field.
func (o *ChangeFileOperation) SetFromPath(v string) {
	o.FromPath = &v
}

// GetOperation returns the Operation field value
func (o *ChangeFileOperation) GetOperation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *ChangeFileOperation) GetOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *ChangeFileOperation) SetOperation(v string) {
	o.Operation = v
}

// GetPath returns the Path field value
func (o *ChangeFileOperation) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *ChangeFileOperation) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *ChangeFileOperation) SetPath(v string) {
	o.Path = v
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *ChangeFileOperation) GetSha() string {
	if o == nil || IsNil(o.Sha) {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeFileOperation) GetShaOk() (*string, bool) {
	if o == nil || IsNil(o.Sha) {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *ChangeFileOperation) HasSha() bool {
	if o != nil && !IsNil(o.Sha) {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *ChangeFileOperation) SetSha(v string) {
	o.Sha = &v
}

func (o ChangeFileOperation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeFileOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.FromPath) {
		toSerialize["from_path"] = o.FromPath
	}
	toSerialize["operation"] = o.Operation
	toSerialize["path"] = o.Path
	if !IsNil(o.Sha) {
		toSerialize["sha"] = o.Sha
	}
	return toSerialize, nil
}

func (o *ChangeFileOperation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operation",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangeFileOperation := _ChangeFileOperation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChangeFileOperation)

	if err != nil {
		return err
	}

	*o = ChangeFileOperation(varChangeFileOperation)

	return err
}

type NullableChangeFileOperation struct {
	value *ChangeFileOperation
	isSet bool
}

func (v NullableChangeFileOperation) Get() *ChangeFileOperation {
	return v.value
}

func (v *NullableChangeFileOperation) Set(val *ChangeFileOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeFileOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeFileOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeFileOperation(val *ChangeFileOperation) *NullableChangeFileOperation {
	return &NullableChangeFileOperation{value: val, isSet: true}
}

func (v NullableChangeFileOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeFileOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


