/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
	"time"
)

// checks if the Comment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Comment{}

// Comment Comment represents a comment on a commit or issue
type Comment struct {
	Assets           []Attachment `json:"assets,omitempty"`
	Body             *string      `json:"body,omitempty"`
	CreatedAt        *time.Time   `json:"created_at,omitempty"`
	HtmlUrl          *string      `json:"html_url,omitempty"`
	Id               *int64       `json:"id,omitempty"`
	IssueUrl         *string      `json:"issue_url,omitempty"`
	OriginalAuthor   *string      `json:"original_author,omitempty"`
	OriginalAuthorId *int64       `json:"original_author_id,omitempty"`
	PullRequestUrl   *string      `json:"pull_request_url,omitempty"`
	UpdatedAt        *time.Time   `json:"updated_at,omitempty"`
	User             *User        `json:"user,omitempty"`
}

// NewComment instantiates a new Comment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComment() *Comment {
	this := Comment{}
	return &this
}

// NewCommentWithDefaults instantiates a new Comment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentWithDefaults() *Comment {
	this := Comment{}
	return &this
}

// GetAssets returns the Assets field value if set, zero value otherwise.
func (o *Comment) GetAssets() []Attachment {
	if o == nil || IsNil(o.Assets) {
		var ret []Attachment
		return ret
	}
	return o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetAssetsOk() ([]Attachment, bool) {
	if o == nil || IsNil(o.Assets) {
		return nil, false
	}
	return o.Assets, true
}

// HasAssets returns a boolean if a field has been set.
func (o *Comment) HasAssets() bool {
	if o != nil && !IsNil(o.Assets) {
		return true
	}

	return false
}

// SetAssets gets a reference to the given []Attachment and assigns it to the Assets field.
func (o *Comment) SetAssets(v []Attachment) {
	o.Assets = v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *Comment) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *Comment) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *Comment) SetBody(v string) {
	o.Body = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Comment) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Comment) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Comment) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetHtmlUrl returns the HtmlUrl field value if set, zero value otherwise.
func (o *Comment) GetHtmlUrl() string {
	if o == nil || IsNil(o.HtmlUrl) {
		var ret string
		return ret
	}
	return *o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetHtmlUrlOk() (*string, bool) {
	if o == nil || IsNil(o.HtmlUrl) {
		return nil, false
	}
	return o.HtmlUrl, true
}

// HasHtmlUrl returns a boolean if a field has been set.
func (o *Comment) HasHtmlUrl() bool {
	if o != nil && !IsNil(o.HtmlUrl) {
		return true
	}

	return false
}

// SetHtmlUrl gets a reference to the given string and assigns it to the HtmlUrl field.
func (o *Comment) SetHtmlUrl(v string) {
	o.HtmlUrl = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Comment) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Comment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Comment) SetId(v int64) {
	o.Id = &v
}

// GetIssueUrl returns the IssueUrl field value if set, zero value otherwise.
func (o *Comment) GetIssueUrl() string {
	if o == nil || IsNil(o.IssueUrl) {
		var ret string
		return ret
	}
	return *o.IssueUrl
}

// GetIssueUrlOk returns a tuple with the IssueUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetIssueUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IssueUrl) {
		return nil, false
	}
	return o.IssueUrl, true
}

// HasIssueUrl returns a boolean if a field has been set.
func (o *Comment) HasIssueUrl() bool {
	if o != nil && !IsNil(o.IssueUrl) {
		return true
	}

	return false
}

// SetIssueUrl gets a reference to the given string and assigns it to the IssueUrl field.
func (o *Comment) SetIssueUrl(v string) {
	o.IssueUrl = &v
}

// GetOriginalAuthor returns the OriginalAuthor field value if set, zero value otherwise.
func (o *Comment) GetOriginalAuthor() string {
	if o == nil || IsNil(o.OriginalAuthor) {
		var ret string
		return ret
	}
	return *o.OriginalAuthor
}

// GetOriginalAuthorOk returns a tuple with the OriginalAuthor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetOriginalAuthorOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalAuthor) {
		return nil, false
	}
	return o.OriginalAuthor, true
}

// HasOriginalAuthor returns a boolean if a field has been set.
func (o *Comment) HasOriginalAuthor() bool {
	if o != nil && !IsNil(o.OriginalAuthor) {
		return true
	}

	return false
}

// SetOriginalAuthor gets a reference to the given string and assigns it to the OriginalAuthor field.
func (o *Comment) SetOriginalAuthor(v string) {
	o.OriginalAuthor = &v
}

// GetOriginalAuthorId returns the OriginalAuthorId field value if set, zero value otherwise.
func (o *Comment) GetOriginalAuthorId() int64 {
	if o == nil || IsNil(o.OriginalAuthorId) {
		var ret int64
		return ret
	}
	return *o.OriginalAuthorId
}

// GetOriginalAuthorIdOk returns a tuple with the OriginalAuthorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetOriginalAuthorIdOk() (*int64, bool) {
	if o == nil || IsNil(o.OriginalAuthorId) {
		return nil, false
	}
	return o.OriginalAuthorId, true
}

// HasOriginalAuthorId returns a boolean if a field has been set.
func (o *Comment) HasOriginalAuthorId() bool {
	if o != nil && !IsNil(o.OriginalAuthorId) {
		return true
	}

	return false
}

// SetOriginalAuthorId gets a reference to the given int64 and assigns it to the OriginalAuthorId field.
func (o *Comment) SetOriginalAuthorId(v int64) {
	o.OriginalAuthorId = &v
}

// GetPullRequestUrl returns the PullRequestUrl field value if set, zero value otherwise.
func (o *Comment) GetPullRequestUrl() string {
	if o == nil || IsNil(o.PullRequestUrl) {
		var ret string
		return ret
	}
	return *o.PullRequestUrl
}

// GetPullRequestUrlOk returns a tuple with the PullRequestUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetPullRequestUrlOk() (*string, bool) {
	if o == nil || IsNil(o.PullRequestUrl) {
		return nil, false
	}
	return o.PullRequestUrl, true
}

// HasPullRequestUrl returns a boolean if a field has been set.
func (o *Comment) HasPullRequestUrl() bool {
	if o != nil && !IsNil(o.PullRequestUrl) {
		return true
	}

	return false
}

// SetPullRequestUrl gets a reference to the given string and assigns it to the PullRequestUrl field.
func (o *Comment) SetPullRequestUrl(v string) {
	o.PullRequestUrl = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Comment) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Comment) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Comment) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *Comment) GetUser() User {
	if o == nil || IsNil(o.User) {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetUserOk() (*User, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *Comment) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *Comment) SetUser(v User) {
	o.User = &v
}

func (o Comment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Comment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Assets) {
		toSerialize["assets"] = o.Assets
	}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.HtmlUrl) {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IssueUrl) {
		toSerialize["issue_url"] = o.IssueUrl
	}
	if !IsNil(o.OriginalAuthor) {
		toSerialize["original_author"] = o.OriginalAuthor
	}
	if !IsNil(o.OriginalAuthorId) {
		toSerialize["original_author_id"] = o.OriginalAuthorId
	}
	if !IsNil(o.PullRequestUrl) {
		toSerialize["pull_request_url"] = o.PullRequestUrl
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableComment struct {
	value *Comment
	isSet bool
}

func (v NullableComment) Get() *Comment {
	return v.value
}

func (v *NullableComment) Set(val *Comment) {
	v.value = val
	v.isSet = true
}

func (v NullableComment) IsSet() bool {
	return v.isSet
}

func (v *NullableComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComment(val *Comment) *NullableComment {
	return &NullableComment{value: val, isSet: true}
}

func (v NullableComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
