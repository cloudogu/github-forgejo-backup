/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the Compare type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Compare{}

// Compare struct for Compare
type Compare struct {
	Commits      []Commit              `json:"commits,omitempty"`
	Files        []CommitAffectedFiles `json:"files,omitempty"`
	TotalCommits *int64                `json:"total_commits,omitempty"`
}

// NewCompare instantiates a new Compare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompare() *Compare {
	this := Compare{}
	return &this
}

// NewCompareWithDefaults instantiates a new Compare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompareWithDefaults() *Compare {
	this := Compare{}
	return &this
}

// GetCommits returns the Commits field value if set, zero value otherwise.
func (o *Compare) GetCommits() []Commit {
	if o == nil || IsNil(o.Commits) {
		var ret []Commit
		return ret
	}
	return o.Commits
}

// GetCommitsOk returns a tuple with the Commits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Compare) GetCommitsOk() ([]Commit, bool) {
	if o == nil || IsNil(o.Commits) {
		return nil, false
	}
	return o.Commits, true
}

// HasCommits returns a boolean if a field has been set.
func (o *Compare) HasCommits() bool {
	if o != nil && !IsNil(o.Commits) {
		return true
	}

	return false
}

// SetCommits gets a reference to the given []Commit and assigns it to the Commits field.
func (o *Compare) SetCommits(v []Commit) {
	o.Commits = v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *Compare) GetFiles() []CommitAffectedFiles {
	if o == nil || IsNil(o.Files) {
		var ret []CommitAffectedFiles
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Compare) GetFilesOk() ([]CommitAffectedFiles, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *Compare) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []CommitAffectedFiles and assigns it to the Files field.
func (o *Compare) SetFiles(v []CommitAffectedFiles) {
	o.Files = v
}

// GetTotalCommits returns the TotalCommits field value if set, zero value otherwise.
func (o *Compare) GetTotalCommits() int64 {
	if o == nil || IsNil(o.TotalCommits) {
		var ret int64
		return ret
	}
	return *o.TotalCommits
}

// GetTotalCommitsOk returns a tuple with the TotalCommits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Compare) GetTotalCommitsOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalCommits) {
		return nil, false
	}
	return o.TotalCommits, true
}

// HasTotalCommits returns a boolean if a field has been set.
func (o *Compare) HasTotalCommits() bool {
	if o != nil && !IsNil(o.TotalCommits) {
		return true
	}

	return false
}

// SetTotalCommits gets a reference to the given int64 and assigns it to the TotalCommits field.
func (o *Compare) SetTotalCommits(v int64) {
	o.TotalCommits = &v
}

func (o Compare) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Compare) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Commits) {
		toSerialize["commits"] = o.Commits
	}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	if !IsNil(o.TotalCommits) {
		toSerialize["total_commits"] = o.TotalCommits
	}
	return toSerialize, nil
}

type NullableCompare struct {
	value *Compare
	isSet bool
}

func (v NullableCompare) Get() *Compare {
	return v.value
}

func (v *NullableCompare) Set(val *Compare) {
	v.value = val
	v.isSet = true
}

func (v NullableCompare) IsSet() bool {
	return v.isSet
}

func (v *NullableCompare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompare(val *Compare) *NullableCompare {
	return &NullableCompare{value: val, isSet: true}
}

func (v NullableCompare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
