/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the CreateEmailOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateEmailOption{}

// CreateEmailOption CreateEmailOption options when creating email addresses
type CreateEmailOption struct {
	// email addresses to add
	Emails []string `json:"emails,omitempty"`
}

// NewCreateEmailOption instantiates a new CreateEmailOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateEmailOption() *CreateEmailOption {
	this := CreateEmailOption{}
	return &this
}

// NewCreateEmailOptionWithDefaults instantiates a new CreateEmailOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateEmailOptionWithDefaults() *CreateEmailOption {
	this := CreateEmailOption{}
	return &this
}

// GetEmails returns the Emails field value if set, zero value otherwise.
func (o *CreateEmailOption) GetEmails() []string {
	if o == nil || IsNil(o.Emails) {
		var ret []string
		return ret
	}
	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEmailOption) GetEmailsOk() ([]string, bool) {
	if o == nil || IsNil(o.Emails) {
		return nil, false
	}
	return o.Emails, true
}

// HasEmails returns a boolean if a field has been set.
func (o *CreateEmailOption) HasEmails() bool {
	if o != nil && !IsNil(o.Emails) {
		return true
	}

	return false
}

// SetEmails gets a reference to the given []string and assigns it to the Emails field.
func (o *CreateEmailOption) SetEmails(v []string) {
	o.Emails = v
}

func (o CreateEmailOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateEmailOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Emails) {
		toSerialize["emails"] = o.Emails
	}
	return toSerialize, nil
}

type NullableCreateEmailOption struct {
	value *CreateEmailOption
	isSet bool
}

func (v NullableCreateEmailOption) Get() *CreateEmailOption {
	return v.value
}

func (v *NullableCreateEmailOption) Set(val *CreateEmailOption) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateEmailOption) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateEmailOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateEmailOption(val *CreateEmailOption) *NullableCreateEmailOption {
	return &NullableCreateEmailOption{value: val, isSet: true}
}

func (v NullableCreateEmailOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateEmailOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


