/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateHookOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateHookOption{}

// CreateHookOption CreateHookOption options when create a hook
type CreateHookOption struct {
	Active *bool `json:"active,omitempty"`
	AuthorizationHeader *string `json:"authorization_header,omitempty"`
	BranchFilter *string `json:"branch_filter,omitempty"`
	// CreateHookOptionConfig has all config options in it required are \"content_type\" and \"url\" Required
	Config map[string]string `json:"config"`
	Events []string `json:"events,omitempty"`
	Type string `json:"type"`
}

type _CreateHookOption CreateHookOption

// NewCreateHookOption instantiates a new CreateHookOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateHookOption(config map[string]string, type_ string) *CreateHookOption {
	this := CreateHookOption{}
	var active bool = false
	this.Active = &active
	this.Config = config
	this.Type = type_
	return &this
}

// NewCreateHookOptionWithDefaults instantiates a new CreateHookOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateHookOptionWithDefaults() *CreateHookOption {
	this := CreateHookOption{}
	var active bool = false
	this.Active = &active
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *CreateHookOption) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHookOption) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *CreateHookOption) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *CreateHookOption) SetActive(v bool) {
	o.Active = &v
}

// GetAuthorizationHeader returns the AuthorizationHeader field value if set, zero value otherwise.
func (o *CreateHookOption) GetAuthorizationHeader() string {
	if o == nil || IsNil(o.AuthorizationHeader) {
		var ret string
		return ret
	}
	return *o.AuthorizationHeader
}

// GetAuthorizationHeaderOk returns a tuple with the AuthorizationHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHookOption) GetAuthorizationHeaderOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorizationHeader) {
		return nil, false
	}
	return o.AuthorizationHeader, true
}

// HasAuthorizationHeader returns a boolean if a field has been set.
func (o *CreateHookOption) HasAuthorizationHeader() bool {
	if o != nil && !IsNil(o.AuthorizationHeader) {
		return true
	}

	return false
}

// SetAuthorizationHeader gets a reference to the given string and assigns it to the AuthorizationHeader field.
func (o *CreateHookOption) SetAuthorizationHeader(v string) {
	o.AuthorizationHeader = &v
}

// GetBranchFilter returns the BranchFilter field value if set, zero value otherwise.
func (o *CreateHookOption) GetBranchFilter() string {
	if o == nil || IsNil(o.BranchFilter) {
		var ret string
		return ret
	}
	return *o.BranchFilter
}

// GetBranchFilterOk returns a tuple with the BranchFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHookOption) GetBranchFilterOk() (*string, bool) {
	if o == nil || IsNil(o.BranchFilter) {
		return nil, false
	}
	return o.BranchFilter, true
}

// HasBranchFilter returns a boolean if a field has been set.
func (o *CreateHookOption) HasBranchFilter() bool {
	if o != nil && !IsNil(o.BranchFilter) {
		return true
	}

	return false
}

// SetBranchFilter gets a reference to the given string and assigns it to the BranchFilter field.
func (o *CreateHookOption) SetBranchFilter(v string) {
	o.BranchFilter = &v
}

// GetConfig returns the Config field value
func (o *CreateHookOption) GetConfig() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *CreateHookOption) GetConfigOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *CreateHookOption) SetConfig(v map[string]string) {
	o.Config = v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *CreateHookOption) GetEvents() []string {
	if o == nil || IsNil(o.Events) {
		var ret []string
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHookOption) GetEventsOk() ([]string, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *CreateHookOption) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []string and assigns it to the Events field.
func (o *CreateHookOption) SetEvents(v []string) {
	o.Events = v
}

// GetType returns the Type field value
func (o *CreateHookOption) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateHookOption) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateHookOption) SetType(v string) {
	o.Type = v
}

func (o CreateHookOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateHookOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.AuthorizationHeader) {
		toSerialize["authorization_header"] = o.AuthorizationHeader
	}
	if !IsNil(o.BranchFilter) {
		toSerialize["branch_filter"] = o.BranchFilter
	}
	toSerialize["config"] = o.Config
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *CreateHookOption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"config",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateHookOption := _CreateHookOption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateHookOption)

	if err != nil {
		return err
	}

	*o = CreateHookOption(varCreateHookOption)

	return err
}

type NullableCreateHookOption struct {
	value *CreateHookOption
	isSet bool
}

func (v NullableCreateHookOption) Get() *CreateHookOption {
	return v.value
}

func (v *NullableCreateHookOption) Set(val *CreateHookOption) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateHookOption) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateHookOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateHookOption(val *CreateHookOption) *NullableCreateHookOption {
	return &NullableCreateHookOption{value: val, isSet: true}
}

func (v NullableCreateHookOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateHookOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


