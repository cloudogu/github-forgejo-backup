/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the CreateIssueCommentOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateIssueCommentOption{}

// CreateIssueCommentOption CreateIssueCommentOption options for creating a comment on an issue
type CreateIssueCommentOption struct {
	Body      string     `json:"body"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

type _CreateIssueCommentOption CreateIssueCommentOption

// NewCreateIssueCommentOption instantiates a new CreateIssueCommentOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateIssueCommentOption(body string) *CreateIssueCommentOption {
	this := CreateIssueCommentOption{}
	this.Body = body
	return &this
}

// NewCreateIssueCommentOptionWithDefaults instantiates a new CreateIssueCommentOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateIssueCommentOptionWithDefaults() *CreateIssueCommentOption {
	this := CreateIssueCommentOption{}
	return &this
}

// GetBody returns the Body field value
func (o *CreateIssueCommentOption) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *CreateIssueCommentOption) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *CreateIssueCommentOption) SetBody(v string) {
	o.Body = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *CreateIssueCommentOption) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIssueCommentOption) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *CreateIssueCommentOption) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *CreateIssueCommentOption) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o CreateIssueCommentOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateIssueCommentOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["body"] = o.Body
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

func (o *CreateIssueCommentOption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"body",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateIssueCommentOption := _CreateIssueCommentOption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateIssueCommentOption)

	if err != nil {
		return err
	}

	*o = CreateIssueCommentOption(varCreateIssueCommentOption)

	return err
}

type NullableCreateIssueCommentOption struct {
	value *CreateIssueCommentOption
	isSet bool
}

func (v NullableCreateIssueCommentOption) Get() *CreateIssueCommentOption {
	return v.value
}

func (v *NullableCreateIssueCommentOption) Set(val *CreateIssueCommentOption) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateIssueCommentOption) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateIssueCommentOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateIssueCommentOption(val *CreateIssueCommentOption) *NullableCreateIssueCommentOption {
	return &NullableCreateIssueCommentOption{value: val, isSet: true}
}

func (v NullableCreateIssueCommentOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateIssueCommentOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
