/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateOrUpdateSecretOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateOrUpdateSecretOption{}

// CreateOrUpdateSecretOption CreateOrUpdateSecretOption options when creating or updating secret
type CreateOrUpdateSecretOption struct {
	// Data of the secret to update
	Data string `json:"data"`
}

type _CreateOrUpdateSecretOption CreateOrUpdateSecretOption

// NewCreateOrUpdateSecretOption instantiates a new CreateOrUpdateSecretOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateOrUpdateSecretOption(data string) *CreateOrUpdateSecretOption {
	this := CreateOrUpdateSecretOption{}
	this.Data = data
	return &this
}

// NewCreateOrUpdateSecretOptionWithDefaults instantiates a new CreateOrUpdateSecretOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateOrUpdateSecretOptionWithDefaults() *CreateOrUpdateSecretOption {
	this := CreateOrUpdateSecretOption{}
	return &this
}

// GetData returns the Data field value
func (o *CreateOrUpdateSecretOption) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateSecretOption) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *CreateOrUpdateSecretOption) SetData(v string) {
	o.Data = v
}

func (o CreateOrUpdateSecretOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateOrUpdateSecretOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *CreateOrUpdateSecretOption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateOrUpdateSecretOption := _CreateOrUpdateSecretOption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateOrUpdateSecretOption)

	if err != nil {
		return err
	}

	*o = CreateOrUpdateSecretOption(varCreateOrUpdateSecretOption)

	return err
}

type NullableCreateOrUpdateSecretOption struct {
	value *CreateOrUpdateSecretOption
	isSet bool
}

func (v NullableCreateOrUpdateSecretOption) Get() *CreateOrUpdateSecretOption {
	return v.value
}

func (v *NullableCreateOrUpdateSecretOption) Set(val *CreateOrUpdateSecretOption) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOrUpdateSecretOption) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOrUpdateSecretOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOrUpdateSecretOption(val *CreateOrUpdateSecretOption) *NullableCreateOrUpdateSecretOption {
	return &NullableCreateOrUpdateSecretOption{value: val, isSet: true}
}

func (v NullableCreateOrUpdateSecretOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOrUpdateSecretOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
