/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateOrgOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateOrgOption{}

// CreateOrgOption CreateOrgOption options for creating an organization
type CreateOrgOption struct {
	Description               *string `json:"description,omitempty"`
	Email                     *string `json:"email,omitempty"`
	FullName                  *string `json:"full_name,omitempty"`
	Location                  *string `json:"location,omitempty"`
	RepoAdminChangeTeamAccess *bool   `json:"repo_admin_change_team_access,omitempty"`
	Username                  string  `json:"username"`
	// possible values are `public` (default), `limited` or `private`
	Visibility *string `json:"visibility,omitempty"`
	Website    *string `json:"website,omitempty"`
}

type _CreateOrgOption CreateOrgOption

// NewCreateOrgOption instantiates a new CreateOrgOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateOrgOption(username string) *CreateOrgOption {
	this := CreateOrgOption{}
	this.Username = username
	return &this
}

// NewCreateOrgOptionWithDefaults instantiates a new CreateOrgOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateOrgOptionWithDefaults() *CreateOrgOption {
	this := CreateOrgOption{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateOrgOption) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrgOption) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateOrgOption) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateOrgOption) SetDescription(v string) {
	o.Description = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *CreateOrgOption) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrgOption) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *CreateOrgOption) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *CreateOrgOption) SetEmail(v string) {
	o.Email = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *CreateOrgOption) GetFullName() string {
	if o == nil || IsNil(o.FullName) {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrgOption) GetFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.FullName) {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *CreateOrgOption) HasFullName() bool {
	if o != nil && !IsNil(o.FullName) {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *CreateOrgOption) SetFullName(v string) {
	o.FullName = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *CreateOrgOption) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrgOption) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *CreateOrgOption) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *CreateOrgOption) SetLocation(v string) {
	o.Location = &v
}

// GetRepoAdminChangeTeamAccess returns the RepoAdminChangeTeamAccess field value if set, zero value otherwise.
func (o *CreateOrgOption) GetRepoAdminChangeTeamAccess() bool {
	if o == nil || IsNil(o.RepoAdminChangeTeamAccess) {
		var ret bool
		return ret
	}
	return *o.RepoAdminChangeTeamAccess
}

// GetRepoAdminChangeTeamAccessOk returns a tuple with the RepoAdminChangeTeamAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrgOption) GetRepoAdminChangeTeamAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.RepoAdminChangeTeamAccess) {
		return nil, false
	}
	return o.RepoAdminChangeTeamAccess, true
}

// HasRepoAdminChangeTeamAccess returns a boolean if a field has been set.
func (o *CreateOrgOption) HasRepoAdminChangeTeamAccess() bool {
	if o != nil && !IsNil(o.RepoAdminChangeTeamAccess) {
		return true
	}

	return false
}

// SetRepoAdminChangeTeamAccess gets a reference to the given bool and assigns it to the RepoAdminChangeTeamAccess field.
func (o *CreateOrgOption) SetRepoAdminChangeTeamAccess(v bool) {
	o.RepoAdminChangeTeamAccess = &v
}

// GetUsername returns the Username field value
func (o *CreateOrgOption) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *CreateOrgOption) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *CreateOrgOption) SetUsername(v string) {
	o.Username = v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *CreateOrgOption) GetVisibility() string {
	if o == nil || IsNil(o.Visibility) {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrgOption) GetVisibilityOk() (*string, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *CreateOrgOption) HasVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *CreateOrgOption) SetVisibility(v string) {
	o.Visibility = &v
}

// GetWebsite returns the Website field value if set, zero value otherwise.
func (o *CreateOrgOption) GetWebsite() string {
	if o == nil || IsNil(o.Website) {
		var ret string
		return ret
	}
	return *o.Website
}

// GetWebsiteOk returns a tuple with the Website field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrgOption) GetWebsiteOk() (*string, bool) {
	if o == nil || IsNil(o.Website) {
		return nil, false
	}
	return o.Website, true
}

// HasWebsite returns a boolean if a field has been set.
func (o *CreateOrgOption) HasWebsite() bool {
	if o != nil && !IsNil(o.Website) {
		return true
	}

	return false
}

// SetWebsite gets a reference to the given string and assigns it to the Website field.
func (o *CreateOrgOption) SetWebsite(v string) {
	o.Website = &v
}

func (o CreateOrgOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateOrgOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.FullName) {
		toSerialize["full_name"] = o.FullName
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.RepoAdminChangeTeamAccess) {
		toSerialize["repo_admin_change_team_access"] = o.RepoAdminChangeTeamAccess
	}
	toSerialize["username"] = o.Username
	if !IsNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}
	if !IsNil(o.Website) {
		toSerialize["website"] = o.Website
	}
	return toSerialize, nil
}

func (o *CreateOrgOption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateOrgOption := _CreateOrgOption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateOrgOption)

	if err != nil {
		return err
	}

	*o = CreateOrgOption(varCreateOrgOption)

	return err
}

type NullableCreateOrgOption struct {
	value *CreateOrgOption
	isSet bool
}

func (v NullableCreateOrgOption) Get() *CreateOrgOption {
	return v.value
}

func (v *NullableCreateOrgOption) Set(val *CreateOrgOption) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOrgOption) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOrgOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOrgOption(val *CreateOrgOption) *NullableCreateOrgOption {
	return &NullableCreateOrgOption{value: val, isSet: true}
}

func (v NullableCreateOrgOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOrgOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
