/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the CreatePullReviewOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreatePullReviewOptions{}

// CreatePullReviewOptions CreatePullReviewOptions are options to create a pull review
type CreatePullReviewOptions struct {
	Body *string `json:"body,omitempty"`
	Comments []CreatePullReviewComment `json:"comments,omitempty"`
	CommitId *string `json:"commit_id,omitempty"`
	// ReviewStateType review state type
	Event *string `json:"event,omitempty"`
}

// NewCreatePullReviewOptions instantiates a new CreatePullReviewOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePullReviewOptions() *CreatePullReviewOptions {
	this := CreatePullReviewOptions{}
	return &this
}

// NewCreatePullReviewOptionsWithDefaults instantiates a new CreatePullReviewOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePullReviewOptionsWithDefaults() *CreatePullReviewOptions {
	this := CreatePullReviewOptions{}
	return &this
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *CreatePullReviewOptions) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePullReviewOptions) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *CreatePullReviewOptions) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *CreatePullReviewOptions) SetBody(v string) {
	o.Body = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *CreatePullReviewOptions) GetComments() []CreatePullReviewComment {
	if o == nil || IsNil(o.Comments) {
		var ret []CreatePullReviewComment
		return ret
	}
	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePullReviewOptions) GetCommentsOk() ([]CreatePullReviewComment, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *CreatePullReviewOptions) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given []CreatePullReviewComment and assigns it to the Comments field.
func (o *CreatePullReviewOptions) SetComments(v []CreatePullReviewComment) {
	o.Comments = v
}

// GetCommitId returns the CommitId field value if set, zero value otherwise.
func (o *CreatePullReviewOptions) GetCommitId() string {
	if o == nil || IsNil(o.CommitId) {
		var ret string
		return ret
	}
	return *o.CommitId
}

// GetCommitIdOk returns a tuple with the CommitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePullReviewOptions) GetCommitIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommitId) {
		return nil, false
	}
	return o.CommitId, true
}

// HasCommitId returns a boolean if a field has been set.
func (o *CreatePullReviewOptions) HasCommitId() bool {
	if o != nil && !IsNil(o.CommitId) {
		return true
	}

	return false
}

// SetCommitId gets a reference to the given string and assigns it to the CommitId field.
func (o *CreatePullReviewOptions) SetCommitId(v string) {
	o.CommitId = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *CreatePullReviewOptions) GetEvent() string {
	if o == nil || IsNil(o.Event) {
		var ret string
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePullReviewOptions) GetEventOk() (*string, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *CreatePullReviewOptions) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given string and assigns it to the Event field.
func (o *CreatePullReviewOptions) SetEvent(v string) {
	o.Event = &v
}

func (o CreatePullReviewOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreatePullReviewOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.CommitId) {
		toSerialize["commit_id"] = o.CommitId
	}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	return toSerialize, nil
}

type NullableCreatePullReviewOptions struct {
	value *CreatePullReviewOptions
	isSet bool
}

func (v NullableCreatePullReviewOptions) Get() *CreatePullReviewOptions {
	return v.value
}

func (v *NullableCreatePullReviewOptions) Set(val *CreatePullReviewOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePullReviewOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePullReviewOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePullReviewOptions(val *CreatePullReviewOptions) *NullableCreatePullReviewOptions {
	return &NullableCreatePullReviewOptions{value: val, isSet: true}
}

func (v NullableCreatePullReviewOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePullReviewOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


