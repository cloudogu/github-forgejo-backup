/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateReleaseOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateReleaseOption{}

// CreateReleaseOption CreateReleaseOption options when creating a release
type CreateReleaseOption struct {
	Body             *string `json:"body,omitempty"`
	Draft            *bool   `json:"draft,omitempty"`
	HideArchiveLinks *bool   `json:"hide_archive_links,omitempty"`
	Name             *string `json:"name,omitempty"`
	Prerelease       *bool   `json:"prerelease,omitempty"`
	TagName          string  `json:"tag_name"`
	TargetCommitish  *string `json:"target_commitish,omitempty"`
}

type _CreateReleaseOption CreateReleaseOption

// NewCreateReleaseOption instantiates a new CreateReleaseOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateReleaseOption(tagName string) *CreateReleaseOption {
	this := CreateReleaseOption{}
	this.TagName = tagName
	return &this
}

// NewCreateReleaseOptionWithDefaults instantiates a new CreateReleaseOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateReleaseOptionWithDefaults() *CreateReleaseOption {
	this := CreateReleaseOption{}
	return &this
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *CreateReleaseOption) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReleaseOption) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *CreateReleaseOption) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *CreateReleaseOption) SetBody(v string) {
	o.Body = &v
}

// GetDraft returns the Draft field value if set, zero value otherwise.
func (o *CreateReleaseOption) GetDraft() bool {
	if o == nil || IsNil(o.Draft) {
		var ret bool
		return ret
	}
	return *o.Draft
}

// GetDraftOk returns a tuple with the Draft field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReleaseOption) GetDraftOk() (*bool, bool) {
	if o == nil || IsNil(o.Draft) {
		return nil, false
	}
	return o.Draft, true
}

// HasDraft returns a boolean if a field has been set.
func (o *CreateReleaseOption) HasDraft() bool {
	if o != nil && !IsNil(o.Draft) {
		return true
	}

	return false
}

// SetDraft gets a reference to the given bool and assigns it to the Draft field.
func (o *CreateReleaseOption) SetDraft(v bool) {
	o.Draft = &v
}

// GetHideArchiveLinks returns the HideArchiveLinks field value if set, zero value otherwise.
func (o *CreateReleaseOption) GetHideArchiveLinks() bool {
	if o == nil || IsNil(o.HideArchiveLinks) {
		var ret bool
		return ret
	}
	return *o.HideArchiveLinks
}

// GetHideArchiveLinksOk returns a tuple with the HideArchiveLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReleaseOption) GetHideArchiveLinksOk() (*bool, bool) {
	if o == nil || IsNil(o.HideArchiveLinks) {
		return nil, false
	}
	return o.HideArchiveLinks, true
}

// HasHideArchiveLinks returns a boolean if a field has been set.
func (o *CreateReleaseOption) HasHideArchiveLinks() bool {
	if o != nil && !IsNil(o.HideArchiveLinks) {
		return true
	}

	return false
}

// SetHideArchiveLinks gets a reference to the given bool and assigns it to the HideArchiveLinks field.
func (o *CreateReleaseOption) SetHideArchiveLinks(v bool) {
	o.HideArchiveLinks = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateReleaseOption) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReleaseOption) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateReleaseOption) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateReleaseOption) SetName(v string) {
	o.Name = &v
}

// GetPrerelease returns the Prerelease field value if set, zero value otherwise.
func (o *CreateReleaseOption) GetPrerelease() bool {
	if o == nil || IsNil(o.Prerelease) {
		var ret bool
		return ret
	}
	return *o.Prerelease
}

// GetPrereleaseOk returns a tuple with the Prerelease field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReleaseOption) GetPrereleaseOk() (*bool, bool) {
	if o == nil || IsNil(o.Prerelease) {
		return nil, false
	}
	return o.Prerelease, true
}

// HasPrerelease returns a boolean if a field has been set.
func (o *CreateReleaseOption) HasPrerelease() bool {
	if o != nil && !IsNil(o.Prerelease) {
		return true
	}

	return false
}

// SetPrerelease gets a reference to the given bool and assigns it to the Prerelease field.
func (o *CreateReleaseOption) SetPrerelease(v bool) {
	o.Prerelease = &v
}

// GetTagName returns the TagName field value
func (o *CreateReleaseOption) GetTagName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TagName
}

// GetTagNameOk returns a tuple with the TagName field value
// and a boolean to check if the value has been set.
func (o *CreateReleaseOption) GetTagNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TagName, true
}

// SetTagName sets field value
func (o *CreateReleaseOption) SetTagName(v string) {
	o.TagName = v
}

// GetTargetCommitish returns the TargetCommitish field value if set, zero value otherwise.
func (o *CreateReleaseOption) GetTargetCommitish() string {
	if o == nil || IsNil(o.TargetCommitish) {
		var ret string
		return ret
	}
	return *o.TargetCommitish
}

// GetTargetCommitishOk returns a tuple with the TargetCommitish field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReleaseOption) GetTargetCommitishOk() (*string, bool) {
	if o == nil || IsNil(o.TargetCommitish) {
		return nil, false
	}
	return o.TargetCommitish, true
}

// HasTargetCommitish returns a boolean if a field has been set.
func (o *CreateReleaseOption) HasTargetCommitish() bool {
	if o != nil && !IsNil(o.TargetCommitish) {
		return true
	}

	return false
}

// SetTargetCommitish gets a reference to the given string and assigns it to the TargetCommitish field.
func (o *CreateReleaseOption) SetTargetCommitish(v string) {
	o.TargetCommitish = &v
}

func (o CreateReleaseOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateReleaseOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.Draft) {
		toSerialize["draft"] = o.Draft
	}
	if !IsNil(o.HideArchiveLinks) {
		toSerialize["hide_archive_links"] = o.HideArchiveLinks
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Prerelease) {
		toSerialize["prerelease"] = o.Prerelease
	}
	toSerialize["tag_name"] = o.TagName
	if !IsNil(o.TargetCommitish) {
		toSerialize["target_commitish"] = o.TargetCommitish
	}
	return toSerialize, nil
}

func (o *CreateReleaseOption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tag_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateReleaseOption := _CreateReleaseOption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateReleaseOption)

	if err != nil {
		return err
	}

	*o = CreateReleaseOption(varCreateReleaseOption)

	return err
}

type NullableCreateReleaseOption struct {
	value *CreateReleaseOption
	isSet bool
}

func (v NullableCreateReleaseOption) Get() *CreateReleaseOption {
	return v.value
}

func (v *NullableCreateReleaseOption) Set(val *CreateReleaseOption) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateReleaseOption) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateReleaseOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateReleaseOption(val *CreateReleaseOption) *NullableCreateReleaseOption {
	return &NullableCreateReleaseOption{value: val, isSet: true}
}

func (v NullableCreateReleaseOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateReleaseOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
