/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateRepoOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRepoOption{}

// CreateRepoOption CreateRepoOption options when creating repository
type CreateRepoOption struct {
	// Whether the repository should be auto-initialized?
	AutoInit *bool `json:"auto_init,omitempty"`
	// DefaultBranch of the repository (used when initializes and in template)
	DefaultBranch *string `json:"default_branch,omitempty"`
	// Description of the repository to create
	Description *string `json:"description,omitempty"`
	// Gitignores to use
	Gitignores *string `json:"gitignores,omitempty"`
	// Label-Set to use
	IssueLabels *string `json:"issue_labels,omitempty"`
	// License to use
	License *string `json:"license,omitempty"`
	// Name of the repository to create
	Name string `json:"name"`
	// ObjectFormatName of the underlying git repository
	ObjectFormatName *string `json:"object_format_name,omitempty"`
	// Whether the repository is private
	Private *bool `json:"private,omitempty"`
	// Readme of the repository to create
	Readme *string `json:"readme,omitempty"`
	// Whether the repository is template
	Template *bool `json:"template,omitempty"`
	// TrustModel of the repository
	TrustModel *string `json:"trust_model,omitempty"`
}

type _CreateRepoOption CreateRepoOption

// NewCreateRepoOption instantiates a new CreateRepoOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRepoOption(name string) *CreateRepoOption {
	this := CreateRepoOption{}
	this.Name = name
	return &this
}

// NewCreateRepoOptionWithDefaults instantiates a new CreateRepoOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRepoOptionWithDefaults() *CreateRepoOption {
	this := CreateRepoOption{}
	return &this
}

// GetAutoInit returns the AutoInit field value if set, zero value otherwise.
func (o *CreateRepoOption) GetAutoInit() bool {
	if o == nil || IsNil(o.AutoInit) {
		var ret bool
		return ret
	}
	return *o.AutoInit
}

// GetAutoInitOk returns a tuple with the AutoInit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepoOption) GetAutoInitOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoInit) {
		return nil, false
	}
	return o.AutoInit, true
}

// HasAutoInit returns a boolean if a field has been set.
func (o *CreateRepoOption) HasAutoInit() bool {
	if o != nil && !IsNil(o.AutoInit) {
		return true
	}

	return false
}

// SetAutoInit gets a reference to the given bool and assigns it to the AutoInit field.
func (o *CreateRepoOption) SetAutoInit(v bool) {
	o.AutoInit = &v
}

// GetDefaultBranch returns the DefaultBranch field value if set, zero value otherwise.
func (o *CreateRepoOption) GetDefaultBranch() string {
	if o == nil || IsNil(o.DefaultBranch) {
		var ret string
		return ret
	}
	return *o.DefaultBranch
}

// GetDefaultBranchOk returns a tuple with the DefaultBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepoOption) GetDefaultBranchOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultBranch) {
		return nil, false
	}
	return o.DefaultBranch, true
}

// HasDefaultBranch returns a boolean if a field has been set.
func (o *CreateRepoOption) HasDefaultBranch() bool {
	if o != nil && !IsNil(o.DefaultBranch) {
		return true
	}

	return false
}

// SetDefaultBranch gets a reference to the given string and assigns it to the DefaultBranch field.
func (o *CreateRepoOption) SetDefaultBranch(v string) {
	o.DefaultBranch = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateRepoOption) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepoOption) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateRepoOption) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateRepoOption) SetDescription(v string) {
	o.Description = &v
}

// GetGitignores returns the Gitignores field value if set, zero value otherwise.
func (o *CreateRepoOption) GetGitignores() string {
	if o == nil || IsNil(o.Gitignores) {
		var ret string
		return ret
	}
	return *o.Gitignores
}

// GetGitignoresOk returns a tuple with the Gitignores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepoOption) GetGitignoresOk() (*string, bool) {
	if o == nil || IsNil(o.Gitignores) {
		return nil, false
	}
	return o.Gitignores, true
}

// HasGitignores returns a boolean if a field has been set.
func (o *CreateRepoOption) HasGitignores() bool {
	if o != nil && !IsNil(o.Gitignores) {
		return true
	}

	return false
}

// SetGitignores gets a reference to the given string and assigns it to the Gitignores field.
func (o *CreateRepoOption) SetGitignores(v string) {
	o.Gitignores = &v
}

// GetIssueLabels returns the IssueLabels field value if set, zero value otherwise.
func (o *CreateRepoOption) GetIssueLabels() string {
	if o == nil || IsNil(o.IssueLabels) {
		var ret string
		return ret
	}
	return *o.IssueLabels
}

// GetIssueLabelsOk returns a tuple with the IssueLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepoOption) GetIssueLabelsOk() (*string, bool) {
	if o == nil || IsNil(o.IssueLabels) {
		return nil, false
	}
	return o.IssueLabels, true
}

// HasIssueLabels returns a boolean if a field has been set.
func (o *CreateRepoOption) HasIssueLabels() bool {
	if o != nil && !IsNil(o.IssueLabels) {
		return true
	}

	return false
}

// SetIssueLabels gets a reference to the given string and assigns it to the IssueLabels field.
func (o *CreateRepoOption) SetIssueLabels(v string) {
	o.IssueLabels = &v
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *CreateRepoOption) GetLicense() string {
	if o == nil || IsNil(o.License) {
		var ret string
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepoOption) GetLicenseOk() (*string, bool) {
	if o == nil || IsNil(o.License) {
		return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *CreateRepoOption) HasLicense() bool {
	if o != nil && !IsNil(o.License) {
		return true
	}

	return false
}

// SetLicense gets a reference to the given string and assigns it to the License field.
func (o *CreateRepoOption) SetLicense(v string) {
	o.License = &v
}

// GetName returns the Name field value
func (o *CreateRepoOption) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateRepoOption) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateRepoOption) SetName(v string) {
	o.Name = v
}

// GetObjectFormatName returns the ObjectFormatName field value if set, zero value otherwise.
func (o *CreateRepoOption) GetObjectFormatName() string {
	if o == nil || IsNil(o.ObjectFormatName) {
		var ret string
		return ret
	}
	return *o.ObjectFormatName
}

// GetObjectFormatNameOk returns a tuple with the ObjectFormatName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepoOption) GetObjectFormatNameOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectFormatName) {
		return nil, false
	}
	return o.ObjectFormatName, true
}

// HasObjectFormatName returns a boolean if a field has been set.
func (o *CreateRepoOption) HasObjectFormatName() bool {
	if o != nil && !IsNil(o.ObjectFormatName) {
		return true
	}

	return false
}

// SetObjectFormatName gets a reference to the given string and assigns it to the ObjectFormatName field.
func (o *CreateRepoOption) SetObjectFormatName(v string) {
	o.ObjectFormatName = &v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *CreateRepoOption) GetPrivate() bool {
	if o == nil || IsNil(o.Private) {
		var ret bool
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepoOption) GetPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.Private) {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *CreateRepoOption) HasPrivate() bool {
	if o != nil && !IsNil(o.Private) {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given bool and assigns it to the Private field.
func (o *CreateRepoOption) SetPrivate(v bool) {
	o.Private = &v
}

// GetReadme returns the Readme field value if set, zero value otherwise.
func (o *CreateRepoOption) GetReadme() string {
	if o == nil || IsNil(o.Readme) {
		var ret string
		return ret
	}
	return *o.Readme
}

// GetReadmeOk returns a tuple with the Readme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepoOption) GetReadmeOk() (*string, bool) {
	if o == nil || IsNil(o.Readme) {
		return nil, false
	}
	return o.Readme, true
}

// HasReadme returns a boolean if a field has been set.
func (o *CreateRepoOption) HasReadme() bool {
	if o != nil && !IsNil(o.Readme) {
		return true
	}

	return false
}

// SetReadme gets a reference to the given string and assigns it to the Readme field.
func (o *CreateRepoOption) SetReadme(v string) {
	o.Readme = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *CreateRepoOption) GetTemplate() bool {
	if o == nil || IsNil(o.Template) {
		var ret bool
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepoOption) GetTemplateOk() (*bool, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *CreateRepoOption) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given bool and assigns it to the Template field.
func (o *CreateRepoOption) SetTemplate(v bool) {
	o.Template = &v
}

// GetTrustModel returns the TrustModel field value if set, zero value otherwise.
func (o *CreateRepoOption) GetTrustModel() string {
	if o == nil || IsNil(o.TrustModel) {
		var ret string
		return ret
	}
	return *o.TrustModel
}

// GetTrustModelOk returns a tuple with the TrustModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepoOption) GetTrustModelOk() (*string, bool) {
	if o == nil || IsNil(o.TrustModel) {
		return nil, false
	}
	return o.TrustModel, true
}

// HasTrustModel returns a boolean if a field has been set.
func (o *CreateRepoOption) HasTrustModel() bool {
	if o != nil && !IsNil(o.TrustModel) {
		return true
	}

	return false
}

// SetTrustModel gets a reference to the given string and assigns it to the TrustModel field.
func (o *CreateRepoOption) SetTrustModel(v string) {
	o.TrustModel = &v
}

func (o CreateRepoOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRepoOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutoInit) {
		toSerialize["auto_init"] = o.AutoInit
	}
	if !IsNil(o.DefaultBranch) {
		toSerialize["default_branch"] = o.DefaultBranch
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Gitignores) {
		toSerialize["gitignores"] = o.Gitignores
	}
	if !IsNil(o.IssueLabels) {
		toSerialize["issue_labels"] = o.IssueLabels
	}
	if !IsNil(o.License) {
		toSerialize["license"] = o.License
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.ObjectFormatName) {
		toSerialize["object_format_name"] = o.ObjectFormatName
	}
	if !IsNil(o.Private) {
		toSerialize["private"] = o.Private
	}
	if !IsNil(o.Readme) {
		toSerialize["readme"] = o.Readme
	}
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	if !IsNil(o.TrustModel) {
		toSerialize["trust_model"] = o.TrustModel
	}
	return toSerialize, nil
}

func (o *CreateRepoOption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateRepoOption := _CreateRepoOption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateRepoOption)

	if err != nil {
		return err
	}

	*o = CreateRepoOption(varCreateRepoOption)

	return err
}

type NullableCreateRepoOption struct {
	value *CreateRepoOption
	isSet bool
}

func (v NullableCreateRepoOption) Get() *CreateRepoOption {
	return v.value
}

func (v *NullableCreateRepoOption) Set(val *CreateRepoOption) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRepoOption) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRepoOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRepoOption(val *CreateRepoOption) *NullableCreateRepoOption {
	return &NullableCreateRepoOption{value: val, isSet: true}
}

func (v NullableCreateRepoOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRepoOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


