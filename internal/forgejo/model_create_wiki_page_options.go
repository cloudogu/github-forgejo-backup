/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the CreateWikiPageOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateWikiPageOptions{}

// CreateWikiPageOptions CreateWikiPageOptions form for creating wiki
type CreateWikiPageOptions struct {
	// content must be base64 encoded
	ContentBase64 *string `json:"content_base64,omitempty"`
	// optional commit message summarizing the change
	Message *string `json:"message,omitempty"`
	// page title. leave empty to keep unchanged
	Title *string `json:"title,omitempty"`
}

// NewCreateWikiPageOptions instantiates a new CreateWikiPageOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateWikiPageOptions() *CreateWikiPageOptions {
	this := CreateWikiPageOptions{}
	return &this
}

// NewCreateWikiPageOptionsWithDefaults instantiates a new CreateWikiPageOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateWikiPageOptionsWithDefaults() *CreateWikiPageOptions {
	this := CreateWikiPageOptions{}
	return &this
}

// GetContentBase64 returns the ContentBase64 field value if set, zero value otherwise.
func (o *CreateWikiPageOptions) GetContentBase64() string {
	if o == nil || IsNil(o.ContentBase64) {
		var ret string
		return ret
	}
	return *o.ContentBase64
}

// GetContentBase64Ok returns a tuple with the ContentBase64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateWikiPageOptions) GetContentBase64Ok() (*string, bool) {
	if o == nil || IsNil(o.ContentBase64) {
		return nil, false
	}
	return o.ContentBase64, true
}

// HasContentBase64 returns a boolean if a field has been set.
func (o *CreateWikiPageOptions) HasContentBase64() bool {
	if o != nil && !IsNil(o.ContentBase64) {
		return true
	}

	return false
}

// SetContentBase64 gets a reference to the given string and assigns it to the ContentBase64 field.
func (o *CreateWikiPageOptions) SetContentBase64(v string) {
	o.ContentBase64 = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *CreateWikiPageOptions) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateWikiPageOptions) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *CreateWikiPageOptions) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *CreateWikiPageOptions) SetMessage(v string) {
	o.Message = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *CreateWikiPageOptions) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateWikiPageOptions) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *CreateWikiPageOptions) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *CreateWikiPageOptions) SetTitle(v string) {
	o.Title = &v
}

func (o CreateWikiPageOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateWikiPageOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContentBase64) {
		toSerialize["content_base64"] = o.ContentBase64
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

type NullableCreateWikiPageOptions struct {
	value *CreateWikiPageOptions
	isSet bool
}

func (v NullableCreateWikiPageOptions) Get() *CreateWikiPageOptions {
	return v.value
}

func (v *NullableCreateWikiPageOptions) Set(val *CreateWikiPageOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateWikiPageOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateWikiPageOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateWikiPageOptions(val *CreateWikiPageOptions) *NullableCreateWikiPageOptions {
	return &NullableCreateWikiPageOptions{value: val, isSet: true}
}

func (v NullableCreateWikiPageOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateWikiPageOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


