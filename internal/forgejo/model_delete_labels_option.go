/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
	"time"
)

// checks if the DeleteLabelsOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteLabelsOption{}

// DeleteLabelsOption DeleteLabelOption options for deleting a label
type DeleteLabelsOption struct {
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewDeleteLabelsOption instantiates a new DeleteLabelsOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteLabelsOption() *DeleteLabelsOption {
	this := DeleteLabelsOption{}
	return &this
}

// NewDeleteLabelsOptionWithDefaults instantiates a new DeleteLabelsOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteLabelsOptionWithDefaults() *DeleteLabelsOption {
	this := DeleteLabelsOption{}
	return &this
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DeleteLabelsOption) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteLabelsOption) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DeleteLabelsOption) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DeleteLabelsOption) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o DeleteLabelsOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteLabelsOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableDeleteLabelsOption struct {
	value *DeleteLabelsOption
	isSet bool
}

func (v NullableDeleteLabelsOption) Get() *DeleteLabelsOption {
	return v.value
}

func (v *NullableDeleteLabelsOption) Set(val *DeleteLabelsOption) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteLabelsOption) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteLabelsOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteLabelsOption(val *DeleteLabelsOption) *NullableDeleteLabelsOption {
	return &NullableDeleteLabelsOption{value: val, isSet: true}
}

func (v NullableDeleteLabelsOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteLabelsOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
