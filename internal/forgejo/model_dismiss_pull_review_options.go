/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the DismissPullReviewOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DismissPullReviewOptions{}

// DismissPullReviewOptions DismissPullReviewOptions are options to dismiss a pull review
type DismissPullReviewOptions struct {
	Message *string `json:"message,omitempty"`
	Priors  *bool   `json:"priors,omitempty"`
}

// NewDismissPullReviewOptions instantiates a new DismissPullReviewOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDismissPullReviewOptions() *DismissPullReviewOptions {
	this := DismissPullReviewOptions{}
	return &this
}

// NewDismissPullReviewOptionsWithDefaults instantiates a new DismissPullReviewOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDismissPullReviewOptionsWithDefaults() *DismissPullReviewOptions {
	this := DismissPullReviewOptions{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *DismissPullReviewOptions) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DismissPullReviewOptions) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *DismissPullReviewOptions) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *DismissPullReviewOptions) SetMessage(v string) {
	o.Message = &v
}

// GetPriors returns the Priors field value if set, zero value otherwise.
func (o *DismissPullReviewOptions) GetPriors() bool {
	if o == nil || IsNil(o.Priors) {
		var ret bool
		return ret
	}
	return *o.Priors
}

// GetPriorsOk returns a tuple with the Priors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DismissPullReviewOptions) GetPriorsOk() (*bool, bool) {
	if o == nil || IsNil(o.Priors) {
		return nil, false
	}
	return o.Priors, true
}

// HasPriors returns a boolean if a field has been set.
func (o *DismissPullReviewOptions) HasPriors() bool {
	if o != nil && !IsNil(o.Priors) {
		return true
	}

	return false
}

// SetPriors gets a reference to the given bool and assigns it to the Priors field.
func (o *DismissPullReviewOptions) SetPriors(v bool) {
	o.Priors = &v
}

func (o DismissPullReviewOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DismissPullReviewOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Priors) {
		toSerialize["priors"] = o.Priors
	}
	return toSerialize, nil
}

type NullableDismissPullReviewOptions struct {
	value *DismissPullReviewOptions
	isSet bool
}

func (v NullableDismissPullReviewOptions) Get() *DismissPullReviewOptions {
	return v.value
}

func (v *NullableDismissPullReviewOptions) Set(val *DismissPullReviewOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableDismissPullReviewOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableDismissPullReviewOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDismissPullReviewOptions(val *DismissPullReviewOptions) *NullableDismissPullReviewOptions {
	return &NullableDismissPullReviewOptions{value: val, isSet: true}
}

func (v NullableDismissPullReviewOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDismissPullReviewOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
