/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DispatchWorkflowOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DispatchWorkflowOption{}

// DispatchWorkflowOption DispatchWorkflowOption options when dispatching a workflow
type DispatchWorkflowOption struct {
	// Input keys and values configured in the workflow file.
	Inputs *map[string]string `json:"inputs,omitempty"`
	// Git reference for the workflow
	Ref string `json:"ref"`
	// Flag to return the run info
	ReturnRunInfo *bool `json:"return_run_info,omitempty"`
}

type _DispatchWorkflowOption DispatchWorkflowOption

// NewDispatchWorkflowOption instantiates a new DispatchWorkflowOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDispatchWorkflowOption(ref string) *DispatchWorkflowOption {
	this := DispatchWorkflowOption{}
	this.Ref = ref
	var returnRunInfo bool = false
	this.ReturnRunInfo = &returnRunInfo
	return &this
}

// NewDispatchWorkflowOptionWithDefaults instantiates a new DispatchWorkflowOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDispatchWorkflowOptionWithDefaults() *DispatchWorkflowOption {
	this := DispatchWorkflowOption{}
	var returnRunInfo bool = false
	this.ReturnRunInfo = &returnRunInfo
	return &this
}

// GetInputs returns the Inputs field value if set, zero value otherwise.
func (o *DispatchWorkflowOption) GetInputs() map[string]string {
	if o == nil || IsNil(o.Inputs) {
		var ret map[string]string
		return ret
	}
	return *o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DispatchWorkflowOption) GetInputsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Inputs) {
		return nil, false
	}
	return o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *DispatchWorkflowOption) HasInputs() bool {
	if o != nil && !IsNil(o.Inputs) {
		return true
	}

	return false
}

// SetInputs gets a reference to the given map[string]string and assigns it to the Inputs field.
func (o *DispatchWorkflowOption) SetInputs(v map[string]string) {
	o.Inputs = &v
}

// GetRef returns the Ref field value
func (o *DispatchWorkflowOption) GetRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ref
}

// GetRefOk returns a tuple with the Ref field value
// and a boolean to check if the value has been set.
func (o *DispatchWorkflowOption) GetRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ref, true
}

// SetRef sets field value
func (o *DispatchWorkflowOption) SetRef(v string) {
	o.Ref = v
}

// GetReturnRunInfo returns the ReturnRunInfo field value if set, zero value otherwise.
func (o *DispatchWorkflowOption) GetReturnRunInfo() bool {
	if o == nil || IsNil(o.ReturnRunInfo) {
		var ret bool
		return ret
	}
	return *o.ReturnRunInfo
}

// GetReturnRunInfoOk returns a tuple with the ReturnRunInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DispatchWorkflowOption) GetReturnRunInfoOk() (*bool, bool) {
	if o == nil || IsNil(o.ReturnRunInfo) {
		return nil, false
	}
	return o.ReturnRunInfo, true
}

// HasReturnRunInfo returns a boolean if a field has been set.
func (o *DispatchWorkflowOption) HasReturnRunInfo() bool {
	if o != nil && !IsNil(o.ReturnRunInfo) {
		return true
	}

	return false
}

// SetReturnRunInfo gets a reference to the given bool and assigns it to the ReturnRunInfo field.
func (o *DispatchWorkflowOption) SetReturnRunInfo(v bool) {
	o.ReturnRunInfo = &v
}

func (o DispatchWorkflowOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DispatchWorkflowOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Inputs) {
		toSerialize["inputs"] = o.Inputs
	}
	toSerialize["ref"] = o.Ref
	if !IsNil(o.ReturnRunInfo) {
		toSerialize["return_run_info"] = o.ReturnRunInfo
	}
	return toSerialize, nil
}

func (o *DispatchWorkflowOption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ref",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDispatchWorkflowOption := _DispatchWorkflowOption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDispatchWorkflowOption)

	if err != nil {
		return err
	}

	*o = DispatchWorkflowOption(varDispatchWorkflowOption)

	return err
}

type NullableDispatchWorkflowOption struct {
	value *DispatchWorkflowOption
	isSet bool
}

func (v NullableDispatchWorkflowOption) Get() *DispatchWorkflowOption {
	return v.value
}

func (v *NullableDispatchWorkflowOption) Set(val *DispatchWorkflowOption) {
	v.value = val
	v.isSet = true
}

func (v NullableDispatchWorkflowOption) IsSet() bool {
	return v.isSet
}

func (v *NullableDispatchWorkflowOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDispatchWorkflowOption(val *DispatchWorkflowOption) *NullableDispatchWorkflowOption {
	return &NullableDispatchWorkflowOption{value: val, isSet: true}
}

func (v NullableDispatchWorkflowOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDispatchWorkflowOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


