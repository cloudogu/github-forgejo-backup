/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the DispatchWorkflowRun type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DispatchWorkflowRun{}

// DispatchWorkflowRun DispatchWorkflowRun represents a workflow run
type DispatchWorkflowRun struct {
	// the workflow run id
	Id *int64 `json:"id,omitempty"`
	// the jobs name
	Jobs []string `json:"jobs,omitempty"`
	// a unique number for each run of a repository
	RunNumber *int64 `json:"run_number,omitempty"`
}

// NewDispatchWorkflowRun instantiates a new DispatchWorkflowRun object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDispatchWorkflowRun() *DispatchWorkflowRun {
	this := DispatchWorkflowRun{}
	return &this
}

// NewDispatchWorkflowRunWithDefaults instantiates a new DispatchWorkflowRun object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDispatchWorkflowRunWithDefaults() *DispatchWorkflowRun {
	this := DispatchWorkflowRun{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DispatchWorkflowRun) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DispatchWorkflowRun) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DispatchWorkflowRun) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DispatchWorkflowRun) SetId(v int64) {
	o.Id = &v
}

// GetJobs returns the Jobs field value if set, zero value otherwise.
func (o *DispatchWorkflowRun) GetJobs() []string {
	if o == nil || IsNil(o.Jobs) {
		var ret []string
		return ret
	}
	return o.Jobs
}

// GetJobsOk returns a tuple with the Jobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DispatchWorkflowRun) GetJobsOk() ([]string, bool) {
	if o == nil || IsNil(o.Jobs) {
		return nil, false
	}
	return o.Jobs, true
}

// HasJobs returns a boolean if a field has been set.
func (o *DispatchWorkflowRun) HasJobs() bool {
	if o != nil && !IsNil(o.Jobs) {
		return true
	}

	return false
}

// SetJobs gets a reference to the given []string and assigns it to the Jobs field.
func (o *DispatchWorkflowRun) SetJobs(v []string) {
	o.Jobs = v
}

// GetRunNumber returns the RunNumber field value if set, zero value otherwise.
func (o *DispatchWorkflowRun) GetRunNumber() int64 {
	if o == nil || IsNil(o.RunNumber) {
		var ret int64
		return ret
	}
	return *o.RunNumber
}

// GetRunNumberOk returns a tuple with the RunNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DispatchWorkflowRun) GetRunNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.RunNumber) {
		return nil, false
	}
	return o.RunNumber, true
}

// HasRunNumber returns a boolean if a field has been set.
func (o *DispatchWorkflowRun) HasRunNumber() bool {
	if o != nil && !IsNil(o.RunNumber) {
		return true
	}

	return false
}

// SetRunNumber gets a reference to the given int64 and assigns it to the RunNumber field.
func (o *DispatchWorkflowRun) SetRunNumber(v int64) {
	o.RunNumber = &v
}

func (o DispatchWorkflowRun) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DispatchWorkflowRun) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Jobs) {
		toSerialize["jobs"] = o.Jobs
	}
	if !IsNil(o.RunNumber) {
		toSerialize["run_number"] = o.RunNumber
	}
	return toSerialize, nil
}

type NullableDispatchWorkflowRun struct {
	value *DispatchWorkflowRun
	isSet bool
}

func (v NullableDispatchWorkflowRun) Get() *DispatchWorkflowRun {
	return v.value
}

func (v *NullableDispatchWorkflowRun) Set(val *DispatchWorkflowRun) {
	v.value = val
	v.isSet = true
}

func (v NullableDispatchWorkflowRun) IsSet() bool {
	return v.isSet
}

func (v *NullableDispatchWorkflowRun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDispatchWorkflowRun(val *DispatchWorkflowRun) *NullableDispatchWorkflowRun {
	return &NullableDispatchWorkflowRun{value: val, isSet: true}
}

func (v NullableDispatchWorkflowRun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDispatchWorkflowRun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


