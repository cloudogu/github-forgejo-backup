/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the EditGitHookOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditGitHookOption{}

// EditGitHookOption EditGitHookOption options when modifying one Git hook
type EditGitHookOption struct {
	Content *string `json:"content,omitempty"`
}

// NewEditGitHookOption instantiates a new EditGitHookOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditGitHookOption() *EditGitHookOption {
	this := EditGitHookOption{}
	return &this
}

// NewEditGitHookOptionWithDefaults instantiates a new EditGitHookOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditGitHookOptionWithDefaults() *EditGitHookOption {
	this := EditGitHookOption{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *EditGitHookOption) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditGitHookOption) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *EditGitHookOption) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *EditGitHookOption) SetContent(v string) {
	o.Content = &v
}

func (o EditGitHookOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditGitHookOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	return toSerialize, nil
}

type NullableEditGitHookOption struct {
	value *EditGitHookOption
	isSet bool
}

func (v NullableEditGitHookOption) Get() *EditGitHookOption {
	return v.value
}

func (v *NullableEditGitHookOption) Set(val *EditGitHookOption) {
	v.value = val
	v.isSet = true
}

func (v NullableEditGitHookOption) IsSet() bool {
	return v.isSet
}

func (v *NullableEditGitHookOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditGitHookOption(val *EditGitHookOption) *NullableEditGitHookOption {
	return &NullableEditGitHookOption{value: val, isSet: true}
}

func (v NullableEditGitHookOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditGitHookOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


