/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the EditHookOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditHookOption{}

// EditHookOption EditHookOption options when modify one hook
type EditHookOption struct {
	Active *bool `json:"active,omitempty"`
	AuthorizationHeader *string `json:"authorization_header,omitempty"`
	BranchFilter *string `json:"branch_filter,omitempty"`
	Config *map[string]string `json:"config,omitempty"`
	Events []string `json:"events,omitempty"`
}

// NewEditHookOption instantiates a new EditHookOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditHookOption() *EditHookOption {
	this := EditHookOption{}
	return &this
}

// NewEditHookOptionWithDefaults instantiates a new EditHookOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditHookOptionWithDefaults() *EditHookOption {
	this := EditHookOption{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *EditHookOption) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditHookOption) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *EditHookOption) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *EditHookOption) SetActive(v bool) {
	o.Active = &v
}

// GetAuthorizationHeader returns the AuthorizationHeader field value if set, zero value otherwise.
func (o *EditHookOption) GetAuthorizationHeader() string {
	if o == nil || IsNil(o.AuthorizationHeader) {
		var ret string
		return ret
	}
	return *o.AuthorizationHeader
}

// GetAuthorizationHeaderOk returns a tuple with the AuthorizationHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditHookOption) GetAuthorizationHeaderOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorizationHeader) {
		return nil, false
	}
	return o.AuthorizationHeader, true
}

// HasAuthorizationHeader returns a boolean if a field has been set.
func (o *EditHookOption) HasAuthorizationHeader() bool {
	if o != nil && !IsNil(o.AuthorizationHeader) {
		return true
	}

	return false
}

// SetAuthorizationHeader gets a reference to the given string and assigns it to the AuthorizationHeader field.
func (o *EditHookOption) SetAuthorizationHeader(v string) {
	o.AuthorizationHeader = &v
}

// GetBranchFilter returns the BranchFilter field value if set, zero value otherwise.
func (o *EditHookOption) GetBranchFilter() string {
	if o == nil || IsNil(o.BranchFilter) {
		var ret string
		return ret
	}
	return *o.BranchFilter
}

// GetBranchFilterOk returns a tuple with the BranchFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditHookOption) GetBranchFilterOk() (*string, bool) {
	if o == nil || IsNil(o.BranchFilter) {
		return nil, false
	}
	return o.BranchFilter, true
}

// HasBranchFilter returns a boolean if a field has been set.
func (o *EditHookOption) HasBranchFilter() bool {
	if o != nil && !IsNil(o.BranchFilter) {
		return true
	}

	return false
}

// SetBranchFilter gets a reference to the given string and assigns it to the BranchFilter field.
func (o *EditHookOption) SetBranchFilter(v string) {
	o.BranchFilter = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *EditHookOption) GetConfig() map[string]string {
	if o == nil || IsNil(o.Config) {
		var ret map[string]string
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditHookOption) GetConfigOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *EditHookOption) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]string and assigns it to the Config field.
func (o *EditHookOption) SetConfig(v map[string]string) {
	o.Config = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *EditHookOption) GetEvents() []string {
	if o == nil || IsNil(o.Events) {
		var ret []string
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditHookOption) GetEventsOk() ([]string, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *EditHookOption) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []string and assigns it to the Events field.
func (o *EditHookOption) SetEvents(v []string) {
	o.Events = v
}

func (o EditHookOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditHookOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.AuthorizationHeader) {
		toSerialize["authorization_header"] = o.AuthorizationHeader
	}
	if !IsNil(o.BranchFilter) {
		toSerialize["branch_filter"] = o.BranchFilter
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	return toSerialize, nil
}

type NullableEditHookOption struct {
	value *EditHookOption
	isSet bool
}

func (v NullableEditHookOption) Get() *EditHookOption {
	return v.value
}

func (v *NullableEditHookOption) Set(val *EditHookOption) {
	v.value = val
	v.isSet = true
}

func (v NullableEditHookOption) IsSet() bool {
	return v.isSet
}

func (v *NullableEditHookOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditHookOption(val *EditHookOption) *NullableEditHookOption {
	return &NullableEditHookOption{value: val, isSet: true}
}

func (v NullableEditHookOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditHookOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


