/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the EditQuotaRuleOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditQuotaRuleOptions{}

// EditQuotaRuleOptions EditQuotaRuleOptions represents the options for editing a quota rule
type EditQuotaRuleOptions struct {
	// The limit set by the rule
	Limit *int64 `json:"limit,omitempty"`
	// The subjects affected by the rule
	Subjects []string `json:"subjects,omitempty"`
}

// NewEditQuotaRuleOptions instantiates a new EditQuotaRuleOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditQuotaRuleOptions() *EditQuotaRuleOptions {
	this := EditQuotaRuleOptions{}
	return &this
}

// NewEditQuotaRuleOptionsWithDefaults instantiates a new EditQuotaRuleOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditQuotaRuleOptionsWithDefaults() *EditQuotaRuleOptions {
	this := EditQuotaRuleOptions{}
	return &this
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *EditQuotaRuleOptions) GetLimit() int64 {
	if o == nil || IsNil(o.Limit) {
		var ret int64
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditQuotaRuleOptions) GetLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *EditQuotaRuleOptions) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int64 and assigns it to the Limit field.
func (o *EditQuotaRuleOptions) SetLimit(v int64) {
	o.Limit = &v
}

// GetSubjects returns the Subjects field value if set, zero value otherwise.
func (o *EditQuotaRuleOptions) GetSubjects() []string {
	if o == nil || IsNil(o.Subjects) {
		var ret []string
		return ret
	}
	return o.Subjects
}

// GetSubjectsOk returns a tuple with the Subjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditQuotaRuleOptions) GetSubjectsOk() ([]string, bool) {
	if o == nil || IsNil(o.Subjects) {
		return nil, false
	}
	return o.Subjects, true
}

// HasSubjects returns a boolean if a field has been set.
func (o *EditQuotaRuleOptions) HasSubjects() bool {
	if o != nil && !IsNil(o.Subjects) {
		return true
	}

	return false
}

// SetSubjects gets a reference to the given []string and assigns it to the Subjects field.
func (o *EditQuotaRuleOptions) SetSubjects(v []string) {
	o.Subjects = v
}

func (o EditQuotaRuleOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditQuotaRuleOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Subjects) {
		toSerialize["subjects"] = o.Subjects
	}
	return toSerialize, nil
}

type NullableEditQuotaRuleOptions struct {
	value *EditQuotaRuleOptions
	isSet bool
}

func (v NullableEditQuotaRuleOptions) Get() *EditQuotaRuleOptions {
	return v.value
}

func (v *NullableEditQuotaRuleOptions) Set(val *EditQuotaRuleOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableEditQuotaRuleOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableEditQuotaRuleOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditQuotaRuleOptions(val *EditQuotaRuleOptions) *NullableEditQuotaRuleOptions {
	return &NullableEditQuotaRuleOptions{value: val, isSet: true}
}

func (v NullableEditQuotaRuleOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditQuotaRuleOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


