/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EditTeamOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditTeamOption{}

// EditTeamOption EditTeamOption options for editing a team
type EditTeamOption struct {
	CanCreateOrgRepo        *bool              `json:"can_create_org_repo,omitempty"`
	Description             *string            `json:"description,omitempty"`
	IncludesAllRepositories *bool              `json:"includes_all_repositories,omitempty"`
	Name                    string             `json:"name"`
	Permission              *string            `json:"permission,omitempty"`
	Units                   []string           `json:"units,omitempty"`
	UnitsMap                *map[string]string `json:"units_map,omitempty"`
}

type _EditTeamOption EditTeamOption

// NewEditTeamOption instantiates a new EditTeamOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditTeamOption(name string) *EditTeamOption {
	this := EditTeamOption{}
	this.Name = name
	return &this
}

// NewEditTeamOptionWithDefaults instantiates a new EditTeamOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditTeamOptionWithDefaults() *EditTeamOption {
	this := EditTeamOption{}
	return &this
}

// GetCanCreateOrgRepo returns the CanCreateOrgRepo field value if set, zero value otherwise.
func (o *EditTeamOption) GetCanCreateOrgRepo() bool {
	if o == nil || IsNil(o.CanCreateOrgRepo) {
		var ret bool
		return ret
	}
	return *o.CanCreateOrgRepo
}

// GetCanCreateOrgRepoOk returns a tuple with the CanCreateOrgRepo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditTeamOption) GetCanCreateOrgRepoOk() (*bool, bool) {
	if o == nil || IsNil(o.CanCreateOrgRepo) {
		return nil, false
	}
	return o.CanCreateOrgRepo, true
}

// HasCanCreateOrgRepo returns a boolean if a field has been set.
func (o *EditTeamOption) HasCanCreateOrgRepo() bool {
	if o != nil && !IsNil(o.CanCreateOrgRepo) {
		return true
	}

	return false
}

// SetCanCreateOrgRepo gets a reference to the given bool and assigns it to the CanCreateOrgRepo field.
func (o *EditTeamOption) SetCanCreateOrgRepo(v bool) {
	o.CanCreateOrgRepo = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EditTeamOption) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditTeamOption) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EditTeamOption) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EditTeamOption) SetDescription(v string) {
	o.Description = &v
}

// GetIncludesAllRepositories returns the IncludesAllRepositories field value if set, zero value otherwise.
func (o *EditTeamOption) GetIncludesAllRepositories() bool {
	if o == nil || IsNil(o.IncludesAllRepositories) {
		var ret bool
		return ret
	}
	return *o.IncludesAllRepositories
}

// GetIncludesAllRepositoriesOk returns a tuple with the IncludesAllRepositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditTeamOption) GetIncludesAllRepositoriesOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludesAllRepositories) {
		return nil, false
	}
	return o.IncludesAllRepositories, true
}

// HasIncludesAllRepositories returns a boolean if a field has been set.
func (o *EditTeamOption) HasIncludesAllRepositories() bool {
	if o != nil && !IsNil(o.IncludesAllRepositories) {
		return true
	}

	return false
}

// SetIncludesAllRepositories gets a reference to the given bool and assigns it to the IncludesAllRepositories field.
func (o *EditTeamOption) SetIncludesAllRepositories(v bool) {
	o.IncludesAllRepositories = &v
}

// GetName returns the Name field value
func (o *EditTeamOption) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EditTeamOption) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EditTeamOption) SetName(v string) {
	o.Name = v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *EditTeamOption) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditTeamOption) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *EditTeamOption) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *EditTeamOption) SetPermission(v string) {
	o.Permission = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *EditTeamOption) GetUnits() []string {
	if o == nil || IsNil(o.Units) {
		var ret []string
		return ret
	}
	return o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditTeamOption) GetUnitsOk() ([]string, bool) {
	if o == nil || IsNil(o.Units) {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *EditTeamOption) HasUnits() bool {
	if o != nil && !IsNil(o.Units) {
		return true
	}

	return false
}

// SetUnits gets a reference to the given []string and assigns it to the Units field.
func (o *EditTeamOption) SetUnits(v []string) {
	o.Units = v
}

// GetUnitsMap returns the UnitsMap field value if set, zero value otherwise.
func (o *EditTeamOption) GetUnitsMap() map[string]string {
	if o == nil || IsNil(o.UnitsMap) {
		var ret map[string]string
		return ret
	}
	return *o.UnitsMap
}

// GetUnitsMapOk returns a tuple with the UnitsMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditTeamOption) GetUnitsMapOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.UnitsMap) {
		return nil, false
	}
	return o.UnitsMap, true
}

// HasUnitsMap returns a boolean if a field has been set.
func (o *EditTeamOption) HasUnitsMap() bool {
	if o != nil && !IsNil(o.UnitsMap) {
		return true
	}

	return false
}

// SetUnitsMap gets a reference to the given map[string]string and assigns it to the UnitsMap field.
func (o *EditTeamOption) SetUnitsMap(v map[string]string) {
	o.UnitsMap = &v
}

func (o EditTeamOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditTeamOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CanCreateOrgRepo) {
		toSerialize["can_create_org_repo"] = o.CanCreateOrgRepo
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.IncludesAllRepositories) {
		toSerialize["includes_all_repositories"] = o.IncludesAllRepositories
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	if !IsNil(o.Units) {
		toSerialize["units"] = o.Units
	}
	if !IsNil(o.UnitsMap) {
		toSerialize["units_map"] = o.UnitsMap
	}
	return toSerialize, nil
}

func (o *EditTeamOption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEditTeamOption := _EditTeamOption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEditTeamOption)

	if err != nil {
		return err
	}

	*o = EditTeamOption(varEditTeamOption)

	return err
}

type NullableEditTeamOption struct {
	value *EditTeamOption
	isSet bool
}

func (v NullableEditTeamOption) Get() *EditTeamOption {
	return v.value
}

func (v *NullableEditTeamOption) Set(val *EditTeamOption) {
	v.value = val
	v.isSet = true
}

func (v NullableEditTeamOption) IsSet() bool {
	return v.isSet
}

func (v *NullableEditTeamOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditTeamOption(val *EditTeamOption) *NullableEditTeamOption {
	return &NullableEditTeamOption{value: val, isSet: true}
}

func (v NullableEditTeamOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditTeamOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
