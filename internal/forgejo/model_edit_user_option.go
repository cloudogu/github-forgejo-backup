/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the EditUserOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditUserOption{}

// EditUserOption EditUserOption edit user options
type EditUserOption struct {
	Active *bool `json:"active,omitempty"`
	Admin *bool `json:"admin,omitempty"`
	AllowCreateOrganization *bool `json:"allow_create_organization,omitempty"`
	AllowGitHook *bool `json:"allow_git_hook,omitempty"`
	AllowImportLocal *bool `json:"allow_import_local,omitempty"`
	Description *string `json:"description,omitempty"`
	Email *string `json:"email,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	Location *string `json:"location,omitempty"`
	LoginName *string `json:"login_name,omitempty"`
	MaxRepoCreation *int64 `json:"max_repo_creation,omitempty"`
	MustChangePassword *bool `json:"must_change_password,omitempty"`
	Password *string `json:"password,omitempty"`
	ProhibitLogin *bool `json:"prohibit_login,omitempty"`
	Pronouns *string `json:"pronouns,omitempty"`
	Restricted *bool `json:"restricted,omitempty"`
	SourceId *int64 `json:"source_id,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	Website *string `json:"website,omitempty"`
}

// NewEditUserOption instantiates a new EditUserOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditUserOption() *EditUserOption {
	this := EditUserOption{}
	return &this
}

// NewEditUserOptionWithDefaults instantiates a new EditUserOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditUserOptionWithDefaults() *EditUserOption {
	this := EditUserOption{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *EditUserOption) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserOption) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *EditUserOption) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *EditUserOption) SetActive(v bool) {
	o.Active = &v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *EditUserOption) GetAdmin() bool {
	if o == nil || IsNil(o.Admin) {
		var ret bool
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserOption) GetAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *EditUserOption) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given bool and assigns it to the Admin field.
func (o *EditUserOption) SetAdmin(v bool) {
	o.Admin = &v
}

// GetAllowCreateOrganization returns the AllowCreateOrganization field value if set, zero value otherwise.
func (o *EditUserOption) GetAllowCreateOrganization() bool {
	if o == nil || IsNil(o.AllowCreateOrganization) {
		var ret bool
		return ret
	}
	return *o.AllowCreateOrganization
}

// GetAllowCreateOrganizationOk returns a tuple with the AllowCreateOrganization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserOption) GetAllowCreateOrganizationOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowCreateOrganization) {
		return nil, false
	}
	return o.AllowCreateOrganization, true
}

// HasAllowCreateOrganization returns a boolean if a field has been set.
func (o *EditUserOption) HasAllowCreateOrganization() bool {
	if o != nil && !IsNil(o.AllowCreateOrganization) {
		return true
	}

	return false
}

// SetAllowCreateOrganization gets a reference to the given bool and assigns it to the AllowCreateOrganization field.
func (o *EditUserOption) SetAllowCreateOrganization(v bool) {
	o.AllowCreateOrganization = &v
}

// GetAllowGitHook returns the AllowGitHook field value if set, zero value otherwise.
func (o *EditUserOption) GetAllowGitHook() bool {
	if o == nil || IsNil(o.AllowGitHook) {
		var ret bool
		return ret
	}
	return *o.AllowGitHook
}

// GetAllowGitHookOk returns a tuple with the AllowGitHook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserOption) GetAllowGitHookOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowGitHook) {
		return nil, false
	}
	return o.AllowGitHook, true
}

// HasAllowGitHook returns a boolean if a field has been set.
func (o *EditUserOption) HasAllowGitHook() bool {
	if o != nil && !IsNil(o.AllowGitHook) {
		return true
	}

	return false
}

// SetAllowGitHook gets a reference to the given bool and assigns it to the AllowGitHook field.
func (o *EditUserOption) SetAllowGitHook(v bool) {
	o.AllowGitHook = &v
}

// GetAllowImportLocal returns the AllowImportLocal field value if set, zero value otherwise.
func (o *EditUserOption) GetAllowImportLocal() bool {
	if o == nil || IsNil(o.AllowImportLocal) {
		var ret bool
		return ret
	}
	return *o.AllowImportLocal
}

// GetAllowImportLocalOk returns a tuple with the AllowImportLocal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserOption) GetAllowImportLocalOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowImportLocal) {
		return nil, false
	}
	return o.AllowImportLocal, true
}

// HasAllowImportLocal returns a boolean if a field has been set.
func (o *EditUserOption) HasAllowImportLocal() bool {
	if o != nil && !IsNil(o.AllowImportLocal) {
		return true
	}

	return false
}

// SetAllowImportLocal gets a reference to the given bool and assigns it to the AllowImportLocal field.
func (o *EditUserOption) SetAllowImportLocal(v bool) {
	o.AllowImportLocal = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EditUserOption) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserOption) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EditUserOption) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EditUserOption) SetDescription(v string) {
	o.Description = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *EditUserOption) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserOption) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *EditUserOption) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *EditUserOption) SetEmail(v string) {
	o.Email = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *EditUserOption) GetFullName() string {
	if o == nil || IsNil(o.FullName) {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserOption) GetFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.FullName) {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *EditUserOption) HasFullName() bool {
	if o != nil && !IsNil(o.FullName) {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *EditUserOption) SetFullName(v string) {
	o.FullName = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *EditUserOption) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserOption) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *EditUserOption) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *EditUserOption) SetLocation(v string) {
	o.Location = &v
}

// GetLoginName returns the LoginName field value if set, zero value otherwise.
func (o *EditUserOption) GetLoginName() string {
	if o == nil || IsNil(o.LoginName) {
		var ret string
		return ret
	}
	return *o.LoginName
}

// GetLoginNameOk returns a tuple with the LoginName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserOption) GetLoginNameOk() (*string, bool) {
	if o == nil || IsNil(o.LoginName) {
		return nil, false
	}
	return o.LoginName, true
}

// HasLoginName returns a boolean if a field has been set.
func (o *EditUserOption) HasLoginName() bool {
	if o != nil && !IsNil(o.LoginName) {
		return true
	}

	return false
}

// SetLoginName gets a reference to the given string and assigns it to the LoginName field.
func (o *EditUserOption) SetLoginName(v string) {
	o.LoginName = &v
}

// GetMaxRepoCreation returns the MaxRepoCreation field value if set, zero value otherwise.
func (o *EditUserOption) GetMaxRepoCreation() int64 {
	if o == nil || IsNil(o.MaxRepoCreation) {
		var ret int64
		return ret
	}
	return *o.MaxRepoCreation
}

// GetMaxRepoCreationOk returns a tuple with the MaxRepoCreation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserOption) GetMaxRepoCreationOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxRepoCreation) {
		return nil, false
	}
	return o.MaxRepoCreation, true
}

// HasMaxRepoCreation returns a boolean if a field has been set.
func (o *EditUserOption) HasMaxRepoCreation() bool {
	if o != nil && !IsNil(o.MaxRepoCreation) {
		return true
	}

	return false
}

// SetMaxRepoCreation gets a reference to the given int64 and assigns it to the MaxRepoCreation field.
func (o *EditUserOption) SetMaxRepoCreation(v int64) {
	o.MaxRepoCreation = &v
}

// GetMustChangePassword returns the MustChangePassword field value if set, zero value otherwise.
func (o *EditUserOption) GetMustChangePassword() bool {
	if o == nil || IsNil(o.MustChangePassword) {
		var ret bool
		return ret
	}
	return *o.MustChangePassword
}

// GetMustChangePasswordOk returns a tuple with the MustChangePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserOption) GetMustChangePasswordOk() (*bool, bool) {
	if o == nil || IsNil(o.MustChangePassword) {
		return nil, false
	}
	return o.MustChangePassword, true
}

// HasMustChangePassword returns a boolean if a field has been set.
func (o *EditUserOption) HasMustChangePassword() bool {
	if o != nil && !IsNil(o.MustChangePassword) {
		return true
	}

	return false
}

// SetMustChangePassword gets a reference to the given bool and assigns it to the MustChangePassword field.
func (o *EditUserOption) SetMustChangePassword(v bool) {
	o.MustChangePassword = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *EditUserOption) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserOption) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *EditUserOption) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *EditUserOption) SetPassword(v string) {
	o.Password = &v
}

// GetProhibitLogin returns the ProhibitLogin field value if set, zero value otherwise.
func (o *EditUserOption) GetProhibitLogin() bool {
	if o == nil || IsNil(o.ProhibitLogin) {
		var ret bool
		return ret
	}
	return *o.ProhibitLogin
}

// GetProhibitLoginOk returns a tuple with the ProhibitLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserOption) GetProhibitLoginOk() (*bool, bool) {
	if o == nil || IsNil(o.ProhibitLogin) {
		return nil, false
	}
	return o.ProhibitLogin, true
}

// HasProhibitLogin returns a boolean if a field has been set.
func (o *EditUserOption) HasProhibitLogin() bool {
	if o != nil && !IsNil(o.ProhibitLogin) {
		return true
	}

	return false
}

// SetProhibitLogin gets a reference to the given bool and assigns it to the ProhibitLogin field.
func (o *EditUserOption) SetProhibitLogin(v bool) {
	o.ProhibitLogin = &v
}

// GetPronouns returns the Pronouns field value if set, zero value otherwise.
func (o *EditUserOption) GetPronouns() string {
	if o == nil || IsNil(o.Pronouns) {
		var ret string
		return ret
	}
	return *o.Pronouns
}

// GetPronounsOk returns a tuple with the Pronouns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserOption) GetPronounsOk() (*string, bool) {
	if o == nil || IsNil(o.Pronouns) {
		return nil, false
	}
	return o.Pronouns, true
}

// HasPronouns returns a boolean if a field has been set.
func (o *EditUserOption) HasPronouns() bool {
	if o != nil && !IsNil(o.Pronouns) {
		return true
	}

	return false
}

// SetPronouns gets a reference to the given string and assigns it to the Pronouns field.
func (o *EditUserOption) SetPronouns(v string) {
	o.Pronouns = &v
}

// GetRestricted returns the Restricted field value if set, zero value otherwise.
func (o *EditUserOption) GetRestricted() bool {
	if o == nil || IsNil(o.Restricted) {
		var ret bool
		return ret
	}
	return *o.Restricted
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserOption) GetRestrictedOk() (*bool, bool) {
	if o == nil || IsNil(o.Restricted) {
		return nil, false
	}
	return o.Restricted, true
}

// HasRestricted returns a boolean if a field has been set.
func (o *EditUserOption) HasRestricted() bool {
	if o != nil && !IsNil(o.Restricted) {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given bool and assigns it to the Restricted field.
func (o *EditUserOption) SetRestricted(v bool) {
	o.Restricted = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *EditUserOption) GetSourceId() int64 {
	if o == nil || IsNil(o.SourceId) {
		var ret int64
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserOption) GetSourceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *EditUserOption) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given int64 and assigns it to the SourceId field.
func (o *EditUserOption) SetSourceId(v int64) {
	o.SourceId = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *EditUserOption) GetVisibility() string {
	if o == nil || IsNil(o.Visibility) {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserOption) GetVisibilityOk() (*string, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *EditUserOption) HasVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *EditUserOption) SetVisibility(v string) {
	o.Visibility = &v
}

// GetWebsite returns the Website field value if set, zero value otherwise.
func (o *EditUserOption) GetWebsite() string {
	if o == nil || IsNil(o.Website) {
		var ret string
		return ret
	}
	return *o.Website
}

// GetWebsiteOk returns a tuple with the Website field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserOption) GetWebsiteOk() (*string, bool) {
	if o == nil || IsNil(o.Website) {
		return nil, false
	}
	return o.Website, true
}

// HasWebsite returns a boolean if a field has been set.
func (o *EditUserOption) HasWebsite() bool {
	if o != nil && !IsNil(o.Website) {
		return true
	}

	return false
}

// SetWebsite gets a reference to the given string and assigns it to the Website field.
func (o *EditUserOption) SetWebsite(v string) {
	o.Website = &v
}

func (o EditUserOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditUserOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	if !IsNil(o.AllowCreateOrganization) {
		toSerialize["allow_create_organization"] = o.AllowCreateOrganization
	}
	if !IsNil(o.AllowGitHook) {
		toSerialize["allow_git_hook"] = o.AllowGitHook
	}
	if !IsNil(o.AllowImportLocal) {
		toSerialize["allow_import_local"] = o.AllowImportLocal
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.FullName) {
		toSerialize["full_name"] = o.FullName
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.LoginName) {
		toSerialize["login_name"] = o.LoginName
	}
	if !IsNil(o.MaxRepoCreation) {
		toSerialize["max_repo_creation"] = o.MaxRepoCreation
	}
	if !IsNil(o.MustChangePassword) {
		toSerialize["must_change_password"] = o.MustChangePassword
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.ProhibitLogin) {
		toSerialize["prohibit_login"] = o.ProhibitLogin
	}
	if !IsNil(o.Pronouns) {
		toSerialize["pronouns"] = o.Pronouns
	}
	if !IsNil(o.Restricted) {
		toSerialize["restricted"] = o.Restricted
	}
	if !IsNil(o.SourceId) {
		toSerialize["source_id"] = o.SourceId
	}
	if !IsNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}
	if !IsNil(o.Website) {
		toSerialize["website"] = o.Website
	}
	return toSerialize, nil
}

type NullableEditUserOption struct {
	value *EditUserOption
	isSet bool
}

func (v NullableEditUserOption) Get() *EditUserOption {
	return v.value
}

func (v *NullableEditUserOption) Set(val *EditUserOption) {
	v.value = val
	v.isSet = true
}

func (v NullableEditUserOption) IsSet() bool {
	return v.isSet
}

func (v *NullableEditUserOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditUserOption(val *EditUserOption) *NullableEditUserOption {
	return &NullableEditUserOption{value: val, isSet: true}
}

func (v NullableEditUserOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditUserOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


