/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the FilesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesResponse{}

// FilesResponse FilesResponse contains information about multiple files from a repo
type FilesResponse struct {
	Commit *FileCommitResponse `json:"commit,omitempty"`
	Files []ContentsResponse `json:"files,omitempty"`
	Verification *PayloadCommitVerification `json:"verification,omitempty"`
}

// NewFilesResponse instantiates a new FilesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesResponse() *FilesResponse {
	this := FilesResponse{}
	return &this
}

// NewFilesResponseWithDefaults instantiates a new FilesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesResponseWithDefaults() *FilesResponse {
	this := FilesResponse{}
	return &this
}

// GetCommit returns the Commit field value if set, zero value otherwise.
func (o *FilesResponse) GetCommit() FileCommitResponse {
	if o == nil || IsNil(o.Commit) {
		var ret FileCommitResponse
		return ret
	}
	return *o.Commit
}

// GetCommitOk returns a tuple with the Commit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesResponse) GetCommitOk() (*FileCommitResponse, bool) {
	if o == nil || IsNil(o.Commit) {
		return nil, false
	}
	return o.Commit, true
}

// HasCommit returns a boolean if a field has been set.
func (o *FilesResponse) HasCommit() bool {
	if o != nil && !IsNil(o.Commit) {
		return true
	}

	return false
}

// SetCommit gets a reference to the given FileCommitResponse and assigns it to the Commit field.
func (o *FilesResponse) SetCommit(v FileCommitResponse) {
	o.Commit = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *FilesResponse) GetFiles() []ContentsResponse {
	if o == nil || IsNil(o.Files) {
		var ret []ContentsResponse
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesResponse) GetFilesOk() ([]ContentsResponse, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *FilesResponse) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []ContentsResponse and assigns it to the Files field.
func (o *FilesResponse) SetFiles(v []ContentsResponse) {
	o.Files = v
}

// GetVerification returns the Verification field value if set, zero value otherwise.
func (o *FilesResponse) GetVerification() PayloadCommitVerification {
	if o == nil || IsNil(o.Verification) {
		var ret PayloadCommitVerification
		return ret
	}
	return *o.Verification
}

// GetVerificationOk returns a tuple with the Verification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesResponse) GetVerificationOk() (*PayloadCommitVerification, bool) {
	if o == nil || IsNil(o.Verification) {
		return nil, false
	}
	return o.Verification, true
}

// HasVerification returns a boolean if a field has been set.
func (o *FilesResponse) HasVerification() bool {
	if o != nil && !IsNil(o.Verification) {
		return true
	}

	return false
}

// SetVerification gets a reference to the given PayloadCommitVerification and assigns it to the Verification field.
func (o *FilesResponse) SetVerification(v PayloadCommitVerification) {
	o.Verification = &v
}

func (o FilesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Commit) {
		toSerialize["commit"] = o.Commit
	}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	if !IsNil(o.Verification) {
		toSerialize["verification"] = o.Verification
	}
	return toSerialize, nil
}

type NullableFilesResponse struct {
	value *FilesResponse
	isSet bool
}

func (v NullableFilesResponse) Get() *FilesResponse {
	return v.value
}

func (v *NullableFilesResponse) Set(val *FilesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesResponse(val *FilesResponse) *NullableFilesResponse {
	return &NullableFilesResponse{value: val, isSet: true}
}

func (v NullableFilesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


