/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the GeneralAttachmentSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeneralAttachmentSettings{}

// GeneralAttachmentSettings GeneralAttachmentSettings contains global Attachment settings exposed by API
type GeneralAttachmentSettings struct {
	AllowedTypes *string `json:"allowed_types,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	MaxFiles *int64 `json:"max_files,omitempty"`
	MaxSize *int64 `json:"max_size,omitempty"`
}

// NewGeneralAttachmentSettings instantiates a new GeneralAttachmentSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeneralAttachmentSettings() *GeneralAttachmentSettings {
	this := GeneralAttachmentSettings{}
	return &this
}

// NewGeneralAttachmentSettingsWithDefaults instantiates a new GeneralAttachmentSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeneralAttachmentSettingsWithDefaults() *GeneralAttachmentSettings {
	this := GeneralAttachmentSettings{}
	return &this
}

// GetAllowedTypes returns the AllowedTypes field value if set, zero value otherwise.
func (o *GeneralAttachmentSettings) GetAllowedTypes() string {
	if o == nil || IsNil(o.AllowedTypes) {
		var ret string
		return ret
	}
	return *o.AllowedTypes
}

// GetAllowedTypesOk returns a tuple with the AllowedTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralAttachmentSettings) GetAllowedTypesOk() (*string, bool) {
	if o == nil || IsNil(o.AllowedTypes) {
		return nil, false
	}
	return o.AllowedTypes, true
}

// HasAllowedTypes returns a boolean if a field has been set.
func (o *GeneralAttachmentSettings) HasAllowedTypes() bool {
	if o != nil && !IsNil(o.AllowedTypes) {
		return true
	}

	return false
}

// SetAllowedTypes gets a reference to the given string and assigns it to the AllowedTypes field.
func (o *GeneralAttachmentSettings) SetAllowedTypes(v string) {
	o.AllowedTypes = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *GeneralAttachmentSettings) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralAttachmentSettings) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *GeneralAttachmentSettings) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *GeneralAttachmentSettings) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMaxFiles returns the MaxFiles field value if set, zero value otherwise.
func (o *GeneralAttachmentSettings) GetMaxFiles() int64 {
	if o == nil || IsNil(o.MaxFiles) {
		var ret int64
		return ret
	}
	return *o.MaxFiles
}

// GetMaxFilesOk returns a tuple with the MaxFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralAttachmentSettings) GetMaxFilesOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxFiles) {
		return nil, false
	}
	return o.MaxFiles, true
}

// HasMaxFiles returns a boolean if a field has been set.
func (o *GeneralAttachmentSettings) HasMaxFiles() bool {
	if o != nil && !IsNil(o.MaxFiles) {
		return true
	}

	return false
}

// SetMaxFiles gets a reference to the given int64 and assigns it to the MaxFiles field.
func (o *GeneralAttachmentSettings) SetMaxFiles(v int64) {
	o.MaxFiles = &v
}

// GetMaxSize returns the MaxSize field value if set, zero value otherwise.
func (o *GeneralAttachmentSettings) GetMaxSize() int64 {
	if o == nil || IsNil(o.MaxSize) {
		var ret int64
		return ret
	}
	return *o.MaxSize
}

// GetMaxSizeOk returns a tuple with the MaxSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralAttachmentSettings) GetMaxSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxSize) {
		return nil, false
	}
	return o.MaxSize, true
}

// HasMaxSize returns a boolean if a field has been set.
func (o *GeneralAttachmentSettings) HasMaxSize() bool {
	if o != nil && !IsNil(o.MaxSize) {
		return true
	}

	return false
}

// SetMaxSize gets a reference to the given int64 and assigns it to the MaxSize field.
func (o *GeneralAttachmentSettings) SetMaxSize(v int64) {
	o.MaxSize = &v
}

func (o GeneralAttachmentSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeneralAttachmentSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowedTypes) {
		toSerialize["allowed_types"] = o.AllowedTypes
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.MaxFiles) {
		toSerialize["max_files"] = o.MaxFiles
	}
	if !IsNil(o.MaxSize) {
		toSerialize["max_size"] = o.MaxSize
	}
	return toSerialize, nil
}

type NullableGeneralAttachmentSettings struct {
	value *GeneralAttachmentSettings
	isSet bool
}

func (v NullableGeneralAttachmentSettings) Get() *GeneralAttachmentSettings {
	return v.value
}

func (v *NullableGeneralAttachmentSettings) Set(val *GeneralAttachmentSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableGeneralAttachmentSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableGeneralAttachmentSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeneralAttachmentSettings(val *GeneralAttachmentSettings) *NullableGeneralAttachmentSettings {
	return &NullableGeneralAttachmentSettings{value: val, isSet: true}
}

func (v NullableGeneralAttachmentSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeneralAttachmentSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


