/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the GitBlob type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitBlob{}

// GitBlob GitBlob represents a git blob
type GitBlob struct {
	Content *string `json:"content,omitempty"`
	Encoding *string `json:"encoding,omitempty"`
	Sha *string `json:"sha,omitempty"`
	Size *int64 `json:"size,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewGitBlob instantiates a new GitBlob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitBlob() *GitBlob {
	this := GitBlob{}
	return &this
}

// NewGitBlobWithDefaults instantiates a new GitBlob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitBlobWithDefaults() *GitBlob {
	this := GitBlob{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *GitBlob) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitBlob) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *GitBlob) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *GitBlob) SetContent(v string) {
	o.Content = &v
}

// GetEncoding returns the Encoding field value if set, zero value otherwise.
func (o *GitBlob) GetEncoding() string {
	if o == nil || IsNil(o.Encoding) {
		var ret string
		return ret
	}
	return *o.Encoding
}

// GetEncodingOk returns a tuple with the Encoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitBlob) GetEncodingOk() (*string, bool) {
	if o == nil || IsNil(o.Encoding) {
		return nil, false
	}
	return o.Encoding, true
}

// HasEncoding returns a boolean if a field has been set.
func (o *GitBlob) HasEncoding() bool {
	if o != nil && !IsNil(o.Encoding) {
		return true
	}

	return false
}

// SetEncoding gets a reference to the given string and assigns it to the Encoding field.
func (o *GitBlob) SetEncoding(v string) {
	o.Encoding = &v
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *GitBlob) GetSha() string {
	if o == nil || IsNil(o.Sha) {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitBlob) GetShaOk() (*string, bool) {
	if o == nil || IsNil(o.Sha) {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *GitBlob) HasSha() bool {
	if o != nil && !IsNil(o.Sha) {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *GitBlob) SetSha(v string) {
	o.Sha = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *GitBlob) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitBlob) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *GitBlob) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *GitBlob) SetSize(v int64) {
	o.Size = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *GitBlob) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitBlob) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *GitBlob) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *GitBlob) SetUrl(v string) {
	o.Url = &v
}

func (o GitBlob) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitBlob) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.Encoding) {
		toSerialize["encoding"] = o.Encoding
	}
	if !IsNil(o.Sha) {
		toSerialize["sha"] = o.Sha
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableGitBlob struct {
	value *GitBlob
	isSet bool
}

func (v NullableGitBlob) Get() *GitBlob {
	return v.value
}

func (v *NullableGitBlob) Set(val *GitBlob) {
	v.value = val
	v.isSet = true
}

func (v NullableGitBlob) IsSet() bool {
	return v.isSet
}

func (v *NullableGitBlob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitBlob(val *GitBlob) *NullableGitBlob {
	return &NullableGitBlob{value: val, isSet: true}
}

func (v NullableGitBlob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitBlob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


