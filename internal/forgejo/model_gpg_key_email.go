/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the GPGKeyEmail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GPGKeyEmail{}

// GPGKeyEmail GPGKeyEmail an email attached to a GPGKey
type GPGKeyEmail struct {
	Email    *string `json:"email,omitempty"`
	Verified *bool   `json:"verified,omitempty"`
}

// NewGPGKeyEmail instantiates a new GPGKeyEmail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGPGKeyEmail() *GPGKeyEmail {
	this := GPGKeyEmail{}
	return &this
}

// NewGPGKeyEmailWithDefaults instantiates a new GPGKeyEmail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGPGKeyEmailWithDefaults() *GPGKeyEmail {
	this := GPGKeyEmail{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *GPGKeyEmail) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GPGKeyEmail) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *GPGKeyEmail) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *GPGKeyEmail) SetEmail(v string) {
	o.Email = &v
}

// GetVerified returns the Verified field value if set, zero value otherwise.
func (o *GPGKeyEmail) GetVerified() bool {
	if o == nil || IsNil(o.Verified) {
		var ret bool
		return ret
	}
	return *o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GPGKeyEmail) GetVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.Verified) {
		return nil, false
	}
	return o.Verified, true
}

// HasVerified returns a boolean if a field has been set.
func (o *GPGKeyEmail) HasVerified() bool {
	if o != nil && !IsNil(o.Verified) {
		return true
	}

	return false
}

// SetVerified gets a reference to the given bool and assigns it to the Verified field.
func (o *GPGKeyEmail) SetVerified(v bool) {
	o.Verified = &v
}

func (o GPGKeyEmail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GPGKeyEmail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Verified) {
		toSerialize["verified"] = o.Verified
	}
	return toSerialize, nil
}

type NullableGPGKeyEmail struct {
	value *GPGKeyEmail
	isSet bool
}

func (v NullableGPGKeyEmail) Get() *GPGKeyEmail {
	return v.value
}

func (v *NullableGPGKeyEmail) Set(val *GPGKeyEmail) {
	v.value = val
	v.isSet = true
}

func (v NullableGPGKeyEmail) IsSet() bool {
	return v.isSet
}

func (v *NullableGPGKeyEmail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGPGKeyEmail(val *GPGKeyEmail) *NullableGPGKeyEmail {
	return &NullableGPGKeyEmail{value: val, isSet: true}
}

func (v NullableGPGKeyEmail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGPGKeyEmail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
