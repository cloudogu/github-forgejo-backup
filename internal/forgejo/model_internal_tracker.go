/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the InternalTracker type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InternalTracker{}

// InternalTracker InternalTracker represents settings for internal tracker
type InternalTracker struct {
	// Let only contributors track time (Built-in issue tracker)
	AllowOnlyContributorsToTrackTime *bool `json:"allow_only_contributors_to_track_time,omitempty"`
	// Enable dependencies for issues and pull requests (Built-in issue tracker)
	EnableIssueDependencies *bool `json:"enable_issue_dependencies,omitempty"`
	// Enable time tracking (Built-in issue tracker)
	EnableTimeTracker *bool `json:"enable_time_tracker,omitempty"`
}

// NewInternalTracker instantiates a new InternalTracker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInternalTracker() *InternalTracker {
	this := InternalTracker{}
	return &this
}

// NewInternalTrackerWithDefaults instantiates a new InternalTracker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInternalTrackerWithDefaults() *InternalTracker {
	this := InternalTracker{}
	return &this
}

// GetAllowOnlyContributorsToTrackTime returns the AllowOnlyContributorsToTrackTime field value if set, zero value otherwise.
func (o *InternalTracker) GetAllowOnlyContributorsToTrackTime() bool {
	if o == nil || IsNil(o.AllowOnlyContributorsToTrackTime) {
		var ret bool
		return ret
	}
	return *o.AllowOnlyContributorsToTrackTime
}

// GetAllowOnlyContributorsToTrackTimeOk returns a tuple with the AllowOnlyContributorsToTrackTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternalTracker) GetAllowOnlyContributorsToTrackTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowOnlyContributorsToTrackTime) {
		return nil, false
	}
	return o.AllowOnlyContributorsToTrackTime, true
}

// HasAllowOnlyContributorsToTrackTime returns a boolean if a field has been set.
func (o *InternalTracker) HasAllowOnlyContributorsToTrackTime() bool {
	if o != nil && !IsNil(o.AllowOnlyContributorsToTrackTime) {
		return true
	}

	return false
}

// SetAllowOnlyContributorsToTrackTime gets a reference to the given bool and assigns it to the AllowOnlyContributorsToTrackTime field.
func (o *InternalTracker) SetAllowOnlyContributorsToTrackTime(v bool) {
	o.AllowOnlyContributorsToTrackTime = &v
}

// GetEnableIssueDependencies returns the EnableIssueDependencies field value if set, zero value otherwise.
func (o *InternalTracker) GetEnableIssueDependencies() bool {
	if o == nil || IsNil(o.EnableIssueDependencies) {
		var ret bool
		return ret
	}
	return *o.EnableIssueDependencies
}

// GetEnableIssueDependenciesOk returns a tuple with the EnableIssueDependencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternalTracker) GetEnableIssueDependenciesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableIssueDependencies) {
		return nil, false
	}
	return o.EnableIssueDependencies, true
}

// HasEnableIssueDependencies returns a boolean if a field has been set.
func (o *InternalTracker) HasEnableIssueDependencies() bool {
	if o != nil && !IsNil(o.EnableIssueDependencies) {
		return true
	}

	return false
}

// SetEnableIssueDependencies gets a reference to the given bool and assigns it to the EnableIssueDependencies field.
func (o *InternalTracker) SetEnableIssueDependencies(v bool) {
	o.EnableIssueDependencies = &v
}

// GetEnableTimeTracker returns the EnableTimeTracker field value if set, zero value otherwise.
func (o *InternalTracker) GetEnableTimeTracker() bool {
	if o == nil || IsNil(o.EnableTimeTracker) {
		var ret bool
		return ret
	}
	return *o.EnableTimeTracker
}

// GetEnableTimeTrackerOk returns a tuple with the EnableTimeTracker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternalTracker) GetEnableTimeTrackerOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableTimeTracker) {
		return nil, false
	}
	return o.EnableTimeTracker, true
}

// HasEnableTimeTracker returns a boolean if a field has been set.
func (o *InternalTracker) HasEnableTimeTracker() bool {
	if o != nil && !IsNil(o.EnableTimeTracker) {
		return true
	}

	return false
}

// SetEnableTimeTracker gets a reference to the given bool and assigns it to the EnableTimeTracker field.
func (o *InternalTracker) SetEnableTimeTracker(v bool) {
	o.EnableTimeTracker = &v
}

func (o InternalTracker) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InternalTracker) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowOnlyContributorsToTrackTime) {
		toSerialize["allow_only_contributors_to_track_time"] = o.AllowOnlyContributorsToTrackTime
	}
	if !IsNil(o.EnableIssueDependencies) {
		toSerialize["enable_issue_dependencies"] = o.EnableIssueDependencies
	}
	if !IsNil(o.EnableTimeTracker) {
		toSerialize["enable_time_tracker"] = o.EnableTimeTracker
	}
	return toSerialize, nil
}

type NullableInternalTracker struct {
	value *InternalTracker
	isSet bool
}

func (v NullableInternalTracker) Get() *InternalTracker {
	return v.value
}

func (v *NullableInternalTracker) Set(val *InternalTracker) {
	v.value = val
	v.isSet = true
}

func (v NullableInternalTracker) IsSet() bool {
	return v.isSet
}

func (v *NullableInternalTracker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInternalTracker(val *InternalTracker) *NullableInternalTracker {
	return &NullableInternalTracker{value: val, isSet: true}
}

func (v NullableInternalTracker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInternalTracker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


