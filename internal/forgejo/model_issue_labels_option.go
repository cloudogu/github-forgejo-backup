/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
	"time"
)

// checks if the IssueLabelsOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssueLabelsOption{}

// IssueLabelsOption IssueLabelsOption a collection of labels
type IssueLabelsOption struct {
	// Labels can be a list of integers representing label IDs or a list of strings representing label names
	Labels []map[string]interface{} `json:"labels,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewIssueLabelsOption instantiates a new IssueLabelsOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueLabelsOption() *IssueLabelsOption {
	this := IssueLabelsOption{}
	return &this
}

// NewIssueLabelsOptionWithDefaults instantiates a new IssueLabelsOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueLabelsOptionWithDefaults() *IssueLabelsOption {
	this := IssueLabelsOption{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *IssueLabelsOption) GetLabels() []map[string]interface{} {
	if o == nil || IsNil(o.Labels) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueLabelsOption) GetLabelsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *IssueLabelsOption) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []map[string]interface{} and assigns it to the Labels field.
func (o *IssueLabelsOption) SetLabels(v []map[string]interface{}) {
	o.Labels = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *IssueLabelsOption) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueLabelsOption) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *IssueLabelsOption) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *IssueLabelsOption) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o IssueLabelsOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueLabelsOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableIssueLabelsOption struct {
	value *IssueLabelsOption
	isSet bool
}

func (v NullableIssueLabelsOption) Get() *IssueLabelsOption {
	return v.value
}

func (v *NullableIssueLabelsOption) Set(val *IssueLabelsOption) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueLabelsOption) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueLabelsOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueLabelsOption(val *IssueLabelsOption) *NullableIssueLabelsOption {
	return &NullableIssueLabelsOption{value: val, isSet: true}
}

func (v NullableIssueLabelsOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueLabelsOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


