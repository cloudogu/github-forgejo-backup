/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the IssueTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssueTemplate{}

// IssueTemplate IssueTemplate represents an issue template for a repository
type IssueTemplate struct {
	About    *string          `json:"about,omitempty"`
	Body     []IssueFormField `json:"body,omitempty"`
	Content  *string          `json:"content,omitempty"`
	FileName *string          `json:"file_name,omitempty"`
	Labels   []string         `json:"labels,omitempty"`
	Name     *string          `json:"name,omitempty"`
	Ref      *string          `json:"ref,omitempty"`
	Title    *string          `json:"title,omitempty"`
}

// NewIssueTemplate instantiates a new IssueTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueTemplate() *IssueTemplate {
	this := IssueTemplate{}
	return &this
}

// NewIssueTemplateWithDefaults instantiates a new IssueTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueTemplateWithDefaults() *IssueTemplate {
	this := IssueTemplate{}
	return &this
}

// GetAbout returns the About field value if set, zero value otherwise.
func (o *IssueTemplate) GetAbout() string {
	if o == nil || IsNil(o.About) {
		var ret string
		return ret
	}
	return *o.About
}

// GetAboutOk returns a tuple with the About field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueTemplate) GetAboutOk() (*string, bool) {
	if o == nil || IsNil(o.About) {
		return nil, false
	}
	return o.About, true
}

// HasAbout returns a boolean if a field has been set.
func (o *IssueTemplate) HasAbout() bool {
	if o != nil && !IsNil(o.About) {
		return true
	}

	return false
}

// SetAbout gets a reference to the given string and assigns it to the About field.
func (o *IssueTemplate) SetAbout(v string) {
	o.About = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *IssueTemplate) GetBody() []IssueFormField {
	if o == nil || IsNil(o.Body) {
		var ret []IssueFormField
		return ret
	}
	return o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueTemplate) GetBodyOk() ([]IssueFormField, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *IssueTemplate) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given []IssueFormField and assigns it to the Body field.
func (o *IssueTemplate) SetBody(v []IssueFormField) {
	o.Body = v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *IssueTemplate) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueTemplate) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *IssueTemplate) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *IssueTemplate) SetContent(v string) {
	o.Content = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *IssueTemplate) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueTemplate) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *IssueTemplate) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *IssueTemplate) SetFileName(v string) {
	o.FileName = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *IssueTemplate) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueTemplate) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *IssueTemplate) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *IssueTemplate) SetLabels(v []string) {
	o.Labels = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IssueTemplate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueTemplate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IssueTemplate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IssueTemplate) SetName(v string) {
	o.Name = &v
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *IssueTemplate) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueTemplate) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *IssueTemplate) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *IssueTemplate) SetRef(v string) {
	o.Ref = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *IssueTemplate) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueTemplate) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *IssueTemplate) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *IssueTemplate) SetTitle(v string) {
	o.Title = &v
}

func (o IssueTemplate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.About) {
		toSerialize["about"] = o.About
	}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.FileName) {
		toSerialize["file_name"] = o.FileName
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Ref) {
		toSerialize["ref"] = o.Ref
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

type NullableIssueTemplate struct {
	value *IssueTemplate
	isSet bool
}

func (v NullableIssueTemplate) Get() *IssueTemplate {
	return v.value
}

func (v *NullableIssueTemplate) Set(val *IssueTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueTemplate(val *IssueTemplate) *NullableIssueTemplate {
	return &NullableIssueTemplate{value: val, isSet: true}
}

func (v NullableIssueTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
