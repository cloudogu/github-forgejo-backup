/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the LicenseTemplateInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseTemplateInfo{}

// LicenseTemplateInfo LicensesInfo contains information about a License
type LicenseTemplateInfo struct {
	Body *string `json:"body,omitempty"`
	Implementation *string `json:"implementation,omitempty"`
	Key *string `json:"key,omitempty"`
	Name *string `json:"name,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewLicenseTemplateInfo instantiates a new LicenseTemplateInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseTemplateInfo() *LicenseTemplateInfo {
	this := LicenseTemplateInfo{}
	return &this
}

// NewLicenseTemplateInfoWithDefaults instantiates a new LicenseTemplateInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseTemplateInfoWithDefaults() *LicenseTemplateInfo {
	this := LicenseTemplateInfo{}
	return &this
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *LicenseTemplateInfo) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseTemplateInfo) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *LicenseTemplateInfo) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *LicenseTemplateInfo) SetBody(v string) {
	o.Body = &v
}

// GetImplementation returns the Implementation field value if set, zero value otherwise.
func (o *LicenseTemplateInfo) GetImplementation() string {
	if o == nil || IsNil(o.Implementation) {
		var ret string
		return ret
	}
	return *o.Implementation
}

// GetImplementationOk returns a tuple with the Implementation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseTemplateInfo) GetImplementationOk() (*string, bool) {
	if o == nil || IsNil(o.Implementation) {
		return nil, false
	}
	return o.Implementation, true
}

// HasImplementation returns a boolean if a field has been set.
func (o *LicenseTemplateInfo) HasImplementation() bool {
	if o != nil && !IsNil(o.Implementation) {
		return true
	}

	return false
}

// SetImplementation gets a reference to the given string and assigns it to the Implementation field.
func (o *LicenseTemplateInfo) SetImplementation(v string) {
	o.Implementation = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *LicenseTemplateInfo) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseTemplateInfo) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *LicenseTemplateInfo) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *LicenseTemplateInfo) SetKey(v string) {
	o.Key = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LicenseTemplateInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseTemplateInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LicenseTemplateInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LicenseTemplateInfo) SetName(v string) {
	o.Name = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *LicenseTemplateInfo) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseTemplateInfo) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *LicenseTemplateInfo) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *LicenseTemplateInfo) SetUrl(v string) {
	o.Url = &v
}

func (o LicenseTemplateInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseTemplateInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.Implementation) {
		toSerialize["implementation"] = o.Implementation
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableLicenseTemplateInfo struct {
	value *LicenseTemplateInfo
	isSet bool
}

func (v NullableLicenseTemplateInfo) Get() *LicenseTemplateInfo {
	return v.value
}

func (v *NullableLicenseTemplateInfo) Set(val *LicenseTemplateInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseTemplateInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseTemplateInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseTemplateInfo(val *LicenseTemplateInfo) *NullableLicenseTemplateInfo {
	return &NullableLicenseTemplateInfo{value: val, isSet: true}
}

func (v NullableLicenseTemplateInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseTemplateInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


