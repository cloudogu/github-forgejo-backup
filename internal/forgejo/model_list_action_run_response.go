/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the ListActionRunResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListActionRunResponse{}

// ListActionRunResponse ListActionRunResponse return a list of ActionRun
type ListActionRunResponse struct {
	TotalCount   *int64      `json:"total_count,omitempty"`
	WorkflowRuns []ActionRun `json:"workflow_runs,omitempty"`
}

// NewListActionRunResponse instantiates a new ListActionRunResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListActionRunResponse() *ListActionRunResponse {
	this := ListActionRunResponse{}
	return &this
}

// NewListActionRunResponseWithDefaults instantiates a new ListActionRunResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListActionRunResponseWithDefaults() *ListActionRunResponse {
	this := ListActionRunResponse{}
	return &this
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *ListActionRunResponse) GetTotalCount() int64 {
	if o == nil || IsNil(o.TotalCount) {
		var ret int64
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListActionRunResponse) GetTotalCountOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *ListActionRunResponse) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int64 and assigns it to the TotalCount field.
func (o *ListActionRunResponse) SetTotalCount(v int64) {
	o.TotalCount = &v
}

// GetWorkflowRuns returns the WorkflowRuns field value if set, zero value otherwise.
func (o *ListActionRunResponse) GetWorkflowRuns() []ActionRun {
	if o == nil || IsNil(o.WorkflowRuns) {
		var ret []ActionRun
		return ret
	}
	return o.WorkflowRuns
}

// GetWorkflowRunsOk returns a tuple with the WorkflowRuns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListActionRunResponse) GetWorkflowRunsOk() ([]ActionRun, bool) {
	if o == nil || IsNil(o.WorkflowRuns) {
		return nil, false
	}
	return o.WorkflowRuns, true
}

// HasWorkflowRuns returns a boolean if a field has been set.
func (o *ListActionRunResponse) HasWorkflowRuns() bool {
	if o != nil && !IsNil(o.WorkflowRuns) {
		return true
	}

	return false
}

// SetWorkflowRuns gets a reference to the given []ActionRun and assigns it to the WorkflowRuns field.
func (o *ListActionRunResponse) SetWorkflowRuns(v []ActionRun) {
	o.WorkflowRuns = v
}

func (o ListActionRunResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListActionRunResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TotalCount) {
		toSerialize["total_count"] = o.TotalCount
	}
	if !IsNil(o.WorkflowRuns) {
		toSerialize["workflow_runs"] = o.WorkflowRuns
	}
	return toSerialize, nil
}

type NullableListActionRunResponse struct {
	value *ListActionRunResponse
	isSet bool
}

func (v NullableListActionRunResponse) Get() *ListActionRunResponse {
	return v.value
}

func (v *NullableListActionRunResponse) Set(val *ListActionRunResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListActionRunResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListActionRunResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListActionRunResponse(val *ListActionRunResponse) *NullableListActionRunResponse {
	return &NullableListActionRunResponse{value: val, isSet: true}
}

func (v NullableListActionRunResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListActionRunResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
