/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
	"time"
)

// checks if the Milestone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Milestone{}

// Milestone Milestone milestone is a collection of issues on one repository
type Milestone struct {
	ClosedAt     *time.Time `json:"closed_at,omitempty"`
	ClosedIssues *int64     `json:"closed_issues,omitempty"`
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	Description  *string    `json:"description,omitempty"`
	DueOn        *time.Time `json:"due_on,omitempty"`
	Id           *int64     `json:"id,omitempty"`
	OpenIssues   *int64     `json:"open_issues,omitempty"`
	// StateType issue state type
	State     *string    `json:"state,omitempty"`
	Title     *string    `json:"title,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewMilestone instantiates a new Milestone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMilestone() *Milestone {
	this := Milestone{}
	return &this
}

// NewMilestoneWithDefaults instantiates a new Milestone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMilestoneWithDefaults() *Milestone {
	this := Milestone{}
	return &this
}

// GetClosedAt returns the ClosedAt field value if set, zero value otherwise.
func (o *Milestone) GetClosedAt() time.Time {
	if o == nil || IsNil(o.ClosedAt) {
		var ret time.Time
		return ret
	}
	return *o.ClosedAt
}

// GetClosedAtOk returns a tuple with the ClosedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Milestone) GetClosedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ClosedAt) {
		return nil, false
	}
	return o.ClosedAt, true
}

// HasClosedAt returns a boolean if a field has been set.
func (o *Milestone) HasClosedAt() bool {
	if o != nil && !IsNil(o.ClosedAt) {
		return true
	}

	return false
}

// SetClosedAt gets a reference to the given time.Time and assigns it to the ClosedAt field.
func (o *Milestone) SetClosedAt(v time.Time) {
	o.ClosedAt = &v
}

// GetClosedIssues returns the ClosedIssues field value if set, zero value otherwise.
func (o *Milestone) GetClosedIssues() int64 {
	if o == nil || IsNil(o.ClosedIssues) {
		var ret int64
		return ret
	}
	return *o.ClosedIssues
}

// GetClosedIssuesOk returns a tuple with the ClosedIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Milestone) GetClosedIssuesOk() (*int64, bool) {
	if o == nil || IsNil(o.ClosedIssues) {
		return nil, false
	}
	return o.ClosedIssues, true
}

// HasClosedIssues returns a boolean if a field has been set.
func (o *Milestone) HasClosedIssues() bool {
	if o != nil && !IsNil(o.ClosedIssues) {
		return true
	}

	return false
}

// SetClosedIssues gets a reference to the given int64 and assigns it to the ClosedIssues field.
func (o *Milestone) SetClosedIssues(v int64) {
	o.ClosedIssues = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Milestone) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Milestone) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Milestone) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Milestone) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Milestone) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Milestone) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Milestone) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Milestone) SetDescription(v string) {
	o.Description = &v
}

// GetDueOn returns the DueOn field value if set, zero value otherwise.
func (o *Milestone) GetDueOn() time.Time {
	if o == nil || IsNil(o.DueOn) {
		var ret time.Time
		return ret
	}
	return *o.DueOn
}

// GetDueOnOk returns a tuple with the DueOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Milestone) GetDueOnOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DueOn) {
		return nil, false
	}
	return o.DueOn, true
}

// HasDueOn returns a boolean if a field has been set.
func (o *Milestone) HasDueOn() bool {
	if o != nil && !IsNil(o.DueOn) {
		return true
	}

	return false
}

// SetDueOn gets a reference to the given time.Time and assigns it to the DueOn field.
func (o *Milestone) SetDueOn(v time.Time) {
	o.DueOn = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Milestone) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Milestone) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Milestone) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Milestone) SetId(v int64) {
	o.Id = &v
}

// GetOpenIssues returns the OpenIssues field value if set, zero value otherwise.
func (o *Milestone) GetOpenIssues() int64 {
	if o == nil || IsNil(o.OpenIssues) {
		var ret int64
		return ret
	}
	return *o.OpenIssues
}

// GetOpenIssuesOk returns a tuple with the OpenIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Milestone) GetOpenIssuesOk() (*int64, bool) {
	if o == nil || IsNil(o.OpenIssues) {
		return nil, false
	}
	return o.OpenIssues, true
}

// HasOpenIssues returns a boolean if a field has been set.
func (o *Milestone) HasOpenIssues() bool {
	if o != nil && !IsNil(o.OpenIssues) {
		return true
	}

	return false
}

// SetOpenIssues gets a reference to the given int64 and assigns it to the OpenIssues field.
func (o *Milestone) SetOpenIssues(v int64) {
	o.OpenIssues = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Milestone) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Milestone) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Milestone) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Milestone) SetState(v string) {
	o.State = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Milestone) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Milestone) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Milestone) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Milestone) SetTitle(v string) {
	o.Title = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Milestone) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Milestone) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Milestone) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Milestone) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o Milestone) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Milestone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClosedAt) {
		toSerialize["closed_at"] = o.ClosedAt
	}
	if !IsNil(o.ClosedIssues) {
		toSerialize["closed_issues"] = o.ClosedIssues
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DueOn) {
		toSerialize["due_on"] = o.DueOn
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.OpenIssues) {
		toSerialize["open_issues"] = o.OpenIssues
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableMilestone struct {
	value *Milestone
	isSet bool
}

func (v NullableMilestone) Get() *Milestone {
	return v.value
}

func (v *NullableMilestone) Set(val *Milestone) {
	v.value = val
	v.isSet = true
}

func (v NullableMilestone) IsSet() bool {
	return v.isSet
}

func (v *NullableMilestone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMilestone(val *Milestone) *NullableMilestone {
	return &NullableMilestone{value: val, isSet: true}
}

func (v NullableMilestone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMilestone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
