/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the PayloadCommitVerification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PayloadCommitVerification{}

// PayloadCommitVerification PayloadCommitVerification represents the GPG verification of a commit
type PayloadCommitVerification struct {
	Payload   *string      `json:"payload,omitempty"`
	Reason    *string      `json:"reason,omitempty"`
	Signature *string      `json:"signature,omitempty"`
	Signer    *PayloadUser `json:"signer,omitempty"`
	Verified  *bool        `json:"verified,omitempty"`
}

// NewPayloadCommitVerification instantiates a new PayloadCommitVerification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayloadCommitVerification() *PayloadCommitVerification {
	this := PayloadCommitVerification{}
	return &this
}

// NewPayloadCommitVerificationWithDefaults instantiates a new PayloadCommitVerification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayloadCommitVerificationWithDefaults() *PayloadCommitVerification {
	this := PayloadCommitVerification{}
	return &this
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *PayloadCommitVerification) GetPayload() string {
	if o == nil || IsNil(o.Payload) {
		var ret string
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayloadCommitVerification) GetPayloadOk() (*string, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *PayloadCommitVerification) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given string and assigns it to the Payload field.
func (o *PayloadCommitVerification) SetPayload(v string) {
	o.Payload = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *PayloadCommitVerification) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayloadCommitVerification) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *PayloadCommitVerification) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *PayloadCommitVerification) SetReason(v string) {
	o.Reason = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *PayloadCommitVerification) GetSignature() string {
	if o == nil || IsNil(o.Signature) {
		var ret string
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayloadCommitVerification) GetSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.Signature) {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *PayloadCommitVerification) HasSignature() bool {
	if o != nil && !IsNil(o.Signature) {
		return true
	}

	return false
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *PayloadCommitVerification) SetSignature(v string) {
	o.Signature = &v
}

// GetSigner returns the Signer field value if set, zero value otherwise.
func (o *PayloadCommitVerification) GetSigner() PayloadUser {
	if o == nil || IsNil(o.Signer) {
		var ret PayloadUser
		return ret
	}
	return *o.Signer
}

// GetSignerOk returns a tuple with the Signer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayloadCommitVerification) GetSignerOk() (*PayloadUser, bool) {
	if o == nil || IsNil(o.Signer) {
		return nil, false
	}
	return o.Signer, true
}

// HasSigner returns a boolean if a field has been set.
func (o *PayloadCommitVerification) HasSigner() bool {
	if o != nil && !IsNil(o.Signer) {
		return true
	}

	return false
}

// SetSigner gets a reference to the given PayloadUser and assigns it to the Signer field.
func (o *PayloadCommitVerification) SetSigner(v PayloadUser) {
	o.Signer = &v
}

// GetVerified returns the Verified field value if set, zero value otherwise.
func (o *PayloadCommitVerification) GetVerified() bool {
	if o == nil || IsNil(o.Verified) {
		var ret bool
		return ret
	}
	return *o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayloadCommitVerification) GetVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.Verified) {
		return nil, false
	}
	return o.Verified, true
}

// HasVerified returns a boolean if a field has been set.
func (o *PayloadCommitVerification) HasVerified() bool {
	if o != nil && !IsNil(o.Verified) {
		return true
	}

	return false
}

// SetVerified gets a reference to the given bool and assigns it to the Verified field.
func (o *PayloadCommitVerification) SetVerified(v bool) {
	o.Verified = &v
}

func (o PayloadCommitVerification) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PayloadCommitVerification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Signature) {
		toSerialize["signature"] = o.Signature
	}
	if !IsNil(o.Signer) {
		toSerialize["signer"] = o.Signer
	}
	if !IsNil(o.Verified) {
		toSerialize["verified"] = o.Verified
	}
	return toSerialize, nil
}

type NullablePayloadCommitVerification struct {
	value *PayloadCommitVerification
	isSet bool
}

func (v NullablePayloadCommitVerification) Get() *PayloadCommitVerification {
	return v.value
}

func (v *NullablePayloadCommitVerification) Set(val *PayloadCommitVerification) {
	v.value = val
	v.isSet = true
}

func (v NullablePayloadCommitVerification) IsSet() bool {
	return v.isSet
}

func (v *NullablePayloadCommitVerification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayloadCommitVerification(val *PayloadCommitVerification) *NullablePayloadCommitVerification {
	return &NullablePayloadCommitVerification{value: val, isSet: true}
}

func (v NullablePayloadCommitVerification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayloadCommitVerification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
