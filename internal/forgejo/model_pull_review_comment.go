/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
	"time"
)

// checks if the PullReviewComment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PullReviewComment{}

// PullReviewComment PullReviewComment represents a comment on a pull request review
type PullReviewComment struct {
	Body                *string    `json:"body,omitempty"`
	CommitId            *string    `json:"commit_id,omitempty"`
	CreatedAt           *time.Time `json:"created_at,omitempty"`
	DiffHunk            *string    `json:"diff_hunk,omitempty"`
	HtmlUrl             *string    `json:"html_url,omitempty"`
	Id                  *int64     `json:"id,omitempty"`
	OriginalCommitId    *string    `json:"original_commit_id,omitempty"`
	OriginalPosition    *int32     `json:"original_position,omitempty"`
	Path                *string    `json:"path,omitempty"`
	Position            *int32     `json:"position,omitempty"`
	PullRequestReviewId *int64     `json:"pull_request_review_id,omitempty"`
	PullRequestUrl      *string    `json:"pull_request_url,omitempty"`
	Resolver            *User      `json:"resolver,omitempty"`
	UpdatedAt           *time.Time `json:"updated_at,omitempty"`
	User                *User      `json:"user,omitempty"`
}

// NewPullReviewComment instantiates a new PullReviewComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPullReviewComment() *PullReviewComment {
	this := PullReviewComment{}
	return &this
}

// NewPullReviewCommentWithDefaults instantiates a new PullReviewComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPullReviewCommentWithDefaults() *PullReviewComment {
	this := PullReviewComment{}
	return &this
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *PullReviewComment) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReviewComment) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *PullReviewComment) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *PullReviewComment) SetBody(v string) {
	o.Body = &v
}

// GetCommitId returns the CommitId field value if set, zero value otherwise.
func (o *PullReviewComment) GetCommitId() string {
	if o == nil || IsNil(o.CommitId) {
		var ret string
		return ret
	}
	return *o.CommitId
}

// GetCommitIdOk returns a tuple with the CommitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReviewComment) GetCommitIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommitId) {
		return nil, false
	}
	return o.CommitId, true
}

// HasCommitId returns a boolean if a field has been set.
func (o *PullReviewComment) HasCommitId() bool {
	if o != nil && !IsNil(o.CommitId) {
		return true
	}

	return false
}

// SetCommitId gets a reference to the given string and assigns it to the CommitId field.
func (o *PullReviewComment) SetCommitId(v string) {
	o.CommitId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PullReviewComment) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReviewComment) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PullReviewComment) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PullReviewComment) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDiffHunk returns the DiffHunk field value if set, zero value otherwise.
func (o *PullReviewComment) GetDiffHunk() string {
	if o == nil || IsNil(o.DiffHunk) {
		var ret string
		return ret
	}
	return *o.DiffHunk
}

// GetDiffHunkOk returns a tuple with the DiffHunk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReviewComment) GetDiffHunkOk() (*string, bool) {
	if o == nil || IsNil(o.DiffHunk) {
		return nil, false
	}
	return o.DiffHunk, true
}

// HasDiffHunk returns a boolean if a field has been set.
func (o *PullReviewComment) HasDiffHunk() bool {
	if o != nil && !IsNil(o.DiffHunk) {
		return true
	}

	return false
}

// SetDiffHunk gets a reference to the given string and assigns it to the DiffHunk field.
func (o *PullReviewComment) SetDiffHunk(v string) {
	o.DiffHunk = &v
}

// GetHtmlUrl returns the HtmlUrl field value if set, zero value otherwise.
func (o *PullReviewComment) GetHtmlUrl() string {
	if o == nil || IsNil(o.HtmlUrl) {
		var ret string
		return ret
	}
	return *o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReviewComment) GetHtmlUrlOk() (*string, bool) {
	if o == nil || IsNil(o.HtmlUrl) {
		return nil, false
	}
	return o.HtmlUrl, true
}

// HasHtmlUrl returns a boolean if a field has been set.
func (o *PullReviewComment) HasHtmlUrl() bool {
	if o != nil && !IsNil(o.HtmlUrl) {
		return true
	}

	return false
}

// SetHtmlUrl gets a reference to the given string and assigns it to the HtmlUrl field.
func (o *PullReviewComment) SetHtmlUrl(v string) {
	o.HtmlUrl = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PullReviewComment) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReviewComment) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PullReviewComment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *PullReviewComment) SetId(v int64) {
	o.Id = &v
}

// GetOriginalCommitId returns the OriginalCommitId field value if set, zero value otherwise.
func (o *PullReviewComment) GetOriginalCommitId() string {
	if o == nil || IsNil(o.OriginalCommitId) {
		var ret string
		return ret
	}
	return *o.OriginalCommitId
}

// GetOriginalCommitIdOk returns a tuple with the OriginalCommitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReviewComment) GetOriginalCommitIdOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalCommitId) {
		return nil, false
	}
	return o.OriginalCommitId, true
}

// HasOriginalCommitId returns a boolean if a field has been set.
func (o *PullReviewComment) HasOriginalCommitId() bool {
	if o != nil && !IsNil(o.OriginalCommitId) {
		return true
	}

	return false
}

// SetOriginalCommitId gets a reference to the given string and assigns it to the OriginalCommitId field.
func (o *PullReviewComment) SetOriginalCommitId(v string) {
	o.OriginalCommitId = &v
}

// GetOriginalPosition returns the OriginalPosition field value if set, zero value otherwise.
func (o *PullReviewComment) GetOriginalPosition() int32 {
	if o == nil || IsNil(o.OriginalPosition) {
		var ret int32
		return ret
	}
	return *o.OriginalPosition
}

// GetOriginalPositionOk returns a tuple with the OriginalPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReviewComment) GetOriginalPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.OriginalPosition) {
		return nil, false
	}
	return o.OriginalPosition, true
}

// HasOriginalPosition returns a boolean if a field has been set.
func (o *PullReviewComment) HasOriginalPosition() bool {
	if o != nil && !IsNil(o.OriginalPosition) {
		return true
	}

	return false
}

// SetOriginalPosition gets a reference to the given int32 and assigns it to the OriginalPosition field.
func (o *PullReviewComment) SetOriginalPosition(v int32) {
	o.OriginalPosition = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *PullReviewComment) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReviewComment) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *PullReviewComment) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *PullReviewComment) SetPath(v string) {
	o.Path = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *PullReviewComment) GetPosition() int32 {
	if o == nil || IsNil(o.Position) {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReviewComment) GetPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *PullReviewComment) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *PullReviewComment) SetPosition(v int32) {
	o.Position = &v
}

// GetPullRequestReviewId returns the PullRequestReviewId field value if set, zero value otherwise.
func (o *PullReviewComment) GetPullRequestReviewId() int64 {
	if o == nil || IsNil(o.PullRequestReviewId) {
		var ret int64
		return ret
	}
	return *o.PullRequestReviewId
}

// GetPullRequestReviewIdOk returns a tuple with the PullRequestReviewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReviewComment) GetPullRequestReviewIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PullRequestReviewId) {
		return nil, false
	}
	return o.PullRequestReviewId, true
}

// HasPullRequestReviewId returns a boolean if a field has been set.
func (o *PullReviewComment) HasPullRequestReviewId() bool {
	if o != nil && !IsNil(o.PullRequestReviewId) {
		return true
	}

	return false
}

// SetPullRequestReviewId gets a reference to the given int64 and assigns it to the PullRequestReviewId field.
func (o *PullReviewComment) SetPullRequestReviewId(v int64) {
	o.PullRequestReviewId = &v
}

// GetPullRequestUrl returns the PullRequestUrl field value if set, zero value otherwise.
func (o *PullReviewComment) GetPullRequestUrl() string {
	if o == nil || IsNil(o.PullRequestUrl) {
		var ret string
		return ret
	}
	return *o.PullRequestUrl
}

// GetPullRequestUrlOk returns a tuple with the PullRequestUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReviewComment) GetPullRequestUrlOk() (*string, bool) {
	if o == nil || IsNil(o.PullRequestUrl) {
		return nil, false
	}
	return o.PullRequestUrl, true
}

// HasPullRequestUrl returns a boolean if a field has been set.
func (o *PullReviewComment) HasPullRequestUrl() bool {
	if o != nil && !IsNil(o.PullRequestUrl) {
		return true
	}

	return false
}

// SetPullRequestUrl gets a reference to the given string and assigns it to the PullRequestUrl field.
func (o *PullReviewComment) SetPullRequestUrl(v string) {
	o.PullRequestUrl = &v
}

// GetResolver returns the Resolver field value if set, zero value otherwise.
func (o *PullReviewComment) GetResolver() User {
	if o == nil || IsNil(o.Resolver) {
		var ret User
		return ret
	}
	return *o.Resolver
}

// GetResolverOk returns a tuple with the Resolver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReviewComment) GetResolverOk() (*User, bool) {
	if o == nil || IsNil(o.Resolver) {
		return nil, false
	}
	return o.Resolver, true
}

// HasResolver returns a boolean if a field has been set.
func (o *PullReviewComment) HasResolver() bool {
	if o != nil && !IsNil(o.Resolver) {
		return true
	}

	return false
}

// SetResolver gets a reference to the given User and assigns it to the Resolver field.
func (o *PullReviewComment) SetResolver(v User) {
	o.Resolver = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *PullReviewComment) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReviewComment) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *PullReviewComment) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *PullReviewComment) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *PullReviewComment) GetUser() User {
	if o == nil || IsNil(o.User) {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReviewComment) GetUserOk() (*User, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *PullReviewComment) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *PullReviewComment) SetUser(v User) {
	o.User = &v
}

func (o PullReviewComment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PullReviewComment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.CommitId) {
		toSerialize["commit_id"] = o.CommitId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.DiffHunk) {
		toSerialize["diff_hunk"] = o.DiffHunk
	}
	if !IsNil(o.HtmlUrl) {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.OriginalCommitId) {
		toSerialize["original_commit_id"] = o.OriginalCommitId
	}
	if !IsNil(o.OriginalPosition) {
		toSerialize["original_position"] = o.OriginalPosition
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.PullRequestReviewId) {
		toSerialize["pull_request_review_id"] = o.PullRequestReviewId
	}
	if !IsNil(o.PullRequestUrl) {
		toSerialize["pull_request_url"] = o.PullRequestUrl
	}
	if !IsNil(o.Resolver) {
		toSerialize["resolver"] = o.Resolver
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullablePullReviewComment struct {
	value *PullReviewComment
	isSet bool
}

func (v NullablePullReviewComment) Get() *PullReviewComment {
	return v.value
}

func (v *NullablePullReviewComment) Set(val *PullReviewComment) {
	v.value = val
	v.isSet = true
}

func (v NullablePullReviewComment) IsSet() bool {
	return v.isSet
}

func (v *NullablePullReviewComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePullReviewComment(val *PullReviewComment) *NullablePullReviewComment {
	return &NullablePullReviewComment{value: val, isSet: true}
}

func (v NullablePullReviewComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePullReviewComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
