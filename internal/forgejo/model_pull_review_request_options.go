/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the PullReviewRequestOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PullReviewRequestOptions{}

// PullReviewRequestOptions PullReviewRequestOptions are options to add or remove pull review requests
type PullReviewRequestOptions struct {
	Reviewers []string `json:"reviewers,omitempty"`
	TeamReviewers []string `json:"team_reviewers,omitempty"`
}

// NewPullReviewRequestOptions instantiates a new PullReviewRequestOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPullReviewRequestOptions() *PullReviewRequestOptions {
	this := PullReviewRequestOptions{}
	return &this
}

// NewPullReviewRequestOptionsWithDefaults instantiates a new PullReviewRequestOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPullReviewRequestOptionsWithDefaults() *PullReviewRequestOptions {
	this := PullReviewRequestOptions{}
	return &this
}

// GetReviewers returns the Reviewers field value if set, zero value otherwise.
func (o *PullReviewRequestOptions) GetReviewers() []string {
	if o == nil || IsNil(o.Reviewers) {
		var ret []string
		return ret
	}
	return o.Reviewers
}

// GetReviewersOk returns a tuple with the Reviewers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReviewRequestOptions) GetReviewersOk() ([]string, bool) {
	if o == nil || IsNil(o.Reviewers) {
		return nil, false
	}
	return o.Reviewers, true
}

// HasReviewers returns a boolean if a field has been set.
func (o *PullReviewRequestOptions) HasReviewers() bool {
	if o != nil && !IsNil(o.Reviewers) {
		return true
	}

	return false
}

// SetReviewers gets a reference to the given []string and assigns it to the Reviewers field.
func (o *PullReviewRequestOptions) SetReviewers(v []string) {
	o.Reviewers = v
}

// GetTeamReviewers returns the TeamReviewers field value if set, zero value otherwise.
func (o *PullReviewRequestOptions) GetTeamReviewers() []string {
	if o == nil || IsNil(o.TeamReviewers) {
		var ret []string
		return ret
	}
	return o.TeamReviewers
}

// GetTeamReviewersOk returns a tuple with the TeamReviewers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReviewRequestOptions) GetTeamReviewersOk() ([]string, bool) {
	if o == nil || IsNil(o.TeamReviewers) {
		return nil, false
	}
	return o.TeamReviewers, true
}

// HasTeamReviewers returns a boolean if a field has been set.
func (o *PullReviewRequestOptions) HasTeamReviewers() bool {
	if o != nil && !IsNil(o.TeamReviewers) {
		return true
	}

	return false
}

// SetTeamReviewers gets a reference to the given []string and assigns it to the TeamReviewers field.
func (o *PullReviewRequestOptions) SetTeamReviewers(v []string) {
	o.TeamReviewers = v
}

func (o PullReviewRequestOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PullReviewRequestOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reviewers) {
		toSerialize["reviewers"] = o.Reviewers
	}
	if !IsNil(o.TeamReviewers) {
		toSerialize["team_reviewers"] = o.TeamReviewers
	}
	return toSerialize, nil
}

type NullablePullReviewRequestOptions struct {
	value *PullReviewRequestOptions
	isSet bool
}

func (v NullablePullReviewRequestOptions) Get() *PullReviewRequestOptions {
	return v.value
}

func (v *NullablePullReviewRequestOptions) Set(val *PullReviewRequestOptions) {
	v.value = val
	v.isSet = true
}

func (v NullablePullReviewRequestOptions) IsSet() bool {
	return v.isSet
}

func (v *NullablePullReviewRequestOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePullReviewRequestOptions(val *PullReviewRequestOptions) *NullablePullReviewRequestOptions {
	return &NullablePullReviewRequestOptions{value: val, isSet: true}
}

func (v NullablePullReviewRequestOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePullReviewRequestOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


