/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the QuotaGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuotaGroup{}

// QuotaGroup QuotaGroup represents a quota group
type QuotaGroup struct {
	// Name of the group
	Name *string `json:"name,omitempty"`
	// Rules associated with the group
	Rules []QuotaRuleInfo `json:"rules,omitempty"`
}

// NewQuotaGroup instantiates a new QuotaGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuotaGroup() *QuotaGroup {
	this := QuotaGroup{}
	return &this
}

// NewQuotaGroupWithDefaults instantiates a new QuotaGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuotaGroupWithDefaults() *QuotaGroup {
	this := QuotaGroup{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *QuotaGroup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaGroup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *QuotaGroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *QuotaGroup) SetName(v string) {
	o.Name = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *QuotaGroup) GetRules() []QuotaRuleInfo {
	if o == nil || IsNil(o.Rules) {
		var ret []QuotaRuleInfo
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaGroup) GetRulesOk() ([]QuotaRuleInfo, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *QuotaGroup) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []QuotaRuleInfo and assigns it to the Rules field.
func (o *QuotaGroup) SetRules(v []QuotaRuleInfo) {
	o.Rules = v
}

func (o QuotaGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuotaGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	return toSerialize, nil
}

type NullableQuotaGroup struct {
	value *QuotaGroup
	isSet bool
}

func (v NullableQuotaGroup) Get() *QuotaGroup {
	return v.value
}

func (v *NullableQuotaGroup) Set(val *QuotaGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableQuotaGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableQuotaGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuotaGroup(val *QuotaGroup) *NullableQuotaGroup {
	return &NullableQuotaGroup{value: val, isSet: true}
}

func (v NullableQuotaGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuotaGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
