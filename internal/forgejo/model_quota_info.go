/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the QuotaInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuotaInfo{}

// QuotaInfo QuotaInfo represents information about a user's quota
type QuotaInfo struct {
	// QuotaGroupList represents a list of quota groups
	Groups []QuotaGroup `json:"groups,omitempty"`
	Used *QuotaUsed `json:"used,omitempty"`
}

// NewQuotaInfo instantiates a new QuotaInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuotaInfo() *QuotaInfo {
	this := QuotaInfo{}
	return &this
}

// NewQuotaInfoWithDefaults instantiates a new QuotaInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuotaInfoWithDefaults() *QuotaInfo {
	this := QuotaInfo{}
	return &this
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *QuotaInfo) GetGroups() []QuotaGroup {
	if o == nil || IsNil(o.Groups) {
		var ret []QuotaGroup
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaInfo) GetGroupsOk() ([]QuotaGroup, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *QuotaInfo) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []QuotaGroup and assigns it to the Groups field.
func (o *QuotaInfo) SetGroups(v []QuotaGroup) {
	o.Groups = v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *QuotaInfo) GetUsed() QuotaUsed {
	if o == nil || IsNil(o.Used) {
		var ret QuotaUsed
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaInfo) GetUsedOk() (*QuotaUsed, bool) {
	if o == nil || IsNil(o.Used) {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *QuotaInfo) HasUsed() bool {
	if o != nil && !IsNil(o.Used) {
		return true
	}

	return false
}

// SetUsed gets a reference to the given QuotaUsed and assigns it to the Used field.
func (o *QuotaInfo) SetUsed(v QuotaUsed) {
	o.Used = &v
}

func (o QuotaInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuotaInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.Used) {
		toSerialize["used"] = o.Used
	}
	return toSerialize, nil
}

type NullableQuotaInfo struct {
	value *QuotaInfo
	isSet bool
}

func (v NullableQuotaInfo) Get() *QuotaInfo {
	return v.value
}

func (v *NullableQuotaInfo) Set(val *QuotaInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableQuotaInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableQuotaInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuotaInfo(val *QuotaInfo) *NullableQuotaInfo {
	return &NullableQuotaInfo{value: val, isSet: true}
}

func (v NullableQuotaInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuotaInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


