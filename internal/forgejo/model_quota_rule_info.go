/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the QuotaRuleInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuotaRuleInfo{}

// QuotaRuleInfo QuotaRuleInfo contains information about a quota rule
type QuotaRuleInfo struct {
	// The limit set by the rule
	Limit *int64 `json:"limit,omitempty"`
	// Name of the rule (only shown to admins)
	Name *string `json:"name,omitempty"`
	// Subjects the rule affects
	Subjects []string `json:"subjects,omitempty"`
}

// NewQuotaRuleInfo instantiates a new QuotaRuleInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuotaRuleInfo() *QuotaRuleInfo {
	this := QuotaRuleInfo{}
	return &this
}

// NewQuotaRuleInfoWithDefaults instantiates a new QuotaRuleInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuotaRuleInfoWithDefaults() *QuotaRuleInfo {
	this := QuotaRuleInfo{}
	return &this
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *QuotaRuleInfo) GetLimit() int64 {
	if o == nil || IsNil(o.Limit) {
		var ret int64
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaRuleInfo) GetLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *QuotaRuleInfo) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int64 and assigns it to the Limit field.
func (o *QuotaRuleInfo) SetLimit(v int64) {
	o.Limit = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *QuotaRuleInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaRuleInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *QuotaRuleInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *QuotaRuleInfo) SetName(v string) {
	o.Name = &v
}

// GetSubjects returns the Subjects field value if set, zero value otherwise.
func (o *QuotaRuleInfo) GetSubjects() []string {
	if o == nil || IsNil(o.Subjects) {
		var ret []string
		return ret
	}
	return o.Subjects
}

// GetSubjectsOk returns a tuple with the Subjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaRuleInfo) GetSubjectsOk() ([]string, bool) {
	if o == nil || IsNil(o.Subjects) {
		return nil, false
	}
	return o.Subjects, true
}

// HasSubjects returns a boolean if a field has been set.
func (o *QuotaRuleInfo) HasSubjects() bool {
	if o != nil && !IsNil(o.Subjects) {
		return true
	}

	return false
}

// SetSubjects gets a reference to the given []string and assigns it to the Subjects field.
func (o *QuotaRuleInfo) SetSubjects(v []string) {
	o.Subjects = v
}

func (o QuotaRuleInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuotaRuleInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Subjects) {
		toSerialize["subjects"] = o.Subjects
	}
	return toSerialize, nil
}

type NullableQuotaRuleInfo struct {
	value *QuotaRuleInfo
	isSet bool
}

func (v NullableQuotaRuleInfo) Get() *QuotaRuleInfo {
	return v.value
}

func (v *NullableQuotaRuleInfo) Set(val *QuotaRuleInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableQuotaRuleInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableQuotaRuleInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuotaRuleInfo(val *QuotaRuleInfo) *NullableQuotaRuleInfo {
	return &NullableQuotaRuleInfo{value: val, isSet: true}
}

func (v NullableQuotaRuleInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuotaRuleInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
