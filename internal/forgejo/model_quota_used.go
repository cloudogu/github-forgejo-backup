/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the QuotaUsed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuotaUsed{}

// QuotaUsed QuotaUsed represents the quota usage of a user
type QuotaUsed struct {
	Size *QuotaUsedSize `json:"size,omitempty"`
}

// NewQuotaUsed instantiates a new QuotaUsed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuotaUsed() *QuotaUsed {
	this := QuotaUsed{}
	return &this
}

// NewQuotaUsedWithDefaults instantiates a new QuotaUsed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuotaUsedWithDefaults() *QuotaUsed {
	this := QuotaUsed{}
	return &this
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *QuotaUsed) GetSize() QuotaUsedSize {
	if o == nil || IsNil(o.Size) {
		var ret QuotaUsedSize
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaUsed) GetSizeOk() (*QuotaUsedSize, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *QuotaUsed) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given QuotaUsedSize and assigns it to the Size field.
func (o *QuotaUsed) SetSize(v QuotaUsedSize) {
	o.Size = &v
}

func (o QuotaUsed) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuotaUsed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	return toSerialize, nil
}

type NullableQuotaUsed struct {
	value *QuotaUsed
	isSet bool
}

func (v NullableQuotaUsed) Get() *QuotaUsed {
	return v.value
}

func (v *NullableQuotaUsed) Set(val *QuotaUsed) {
	v.value = val
	v.isSet = true
}

func (v NullableQuotaUsed) IsSet() bool {
	return v.isSet
}

func (v *NullableQuotaUsed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuotaUsed(val *QuotaUsed) *NullableQuotaUsed {
	return &NullableQuotaUsed{value: val, isSet: true}
}

func (v NullableQuotaUsed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuotaUsed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
