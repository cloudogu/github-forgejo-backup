/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the QuotaUsedPackage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuotaUsedPackage{}

// QuotaUsedPackage QuotaUsedPackage represents a package counting towards a user's quota
type QuotaUsedPackage struct {
	// HTML URL to the package version
	HtmlUrl *string `json:"html_url,omitempty"`
	// Name of the package
	Name *string `json:"name,omitempty"`
	// Size of the package version
	Size *int64 `json:"size,omitempty"`
	// Type of the package
	Type *string `json:"type,omitempty"`
	// Version of the package
	Version *string `json:"version,omitempty"`
}

// NewQuotaUsedPackage instantiates a new QuotaUsedPackage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuotaUsedPackage() *QuotaUsedPackage {
	this := QuotaUsedPackage{}
	return &this
}

// NewQuotaUsedPackageWithDefaults instantiates a new QuotaUsedPackage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuotaUsedPackageWithDefaults() *QuotaUsedPackage {
	this := QuotaUsedPackage{}
	return &this
}

// GetHtmlUrl returns the HtmlUrl field value if set, zero value otherwise.
func (o *QuotaUsedPackage) GetHtmlUrl() string {
	if o == nil || IsNil(o.HtmlUrl) {
		var ret string
		return ret
	}
	return *o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaUsedPackage) GetHtmlUrlOk() (*string, bool) {
	if o == nil || IsNil(o.HtmlUrl) {
		return nil, false
	}
	return o.HtmlUrl, true
}

// HasHtmlUrl returns a boolean if a field has been set.
func (o *QuotaUsedPackage) HasHtmlUrl() bool {
	if o != nil && !IsNil(o.HtmlUrl) {
		return true
	}

	return false
}

// SetHtmlUrl gets a reference to the given string and assigns it to the HtmlUrl field.
func (o *QuotaUsedPackage) SetHtmlUrl(v string) {
	o.HtmlUrl = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *QuotaUsedPackage) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaUsedPackage) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *QuotaUsedPackage) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *QuotaUsedPackage) SetName(v string) {
	o.Name = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *QuotaUsedPackage) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaUsedPackage) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *QuotaUsedPackage) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *QuotaUsedPackage) SetSize(v int64) {
	o.Size = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *QuotaUsedPackage) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaUsedPackage) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *QuotaUsedPackage) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *QuotaUsedPackage) SetType(v string) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *QuotaUsedPackage) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaUsedPackage) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *QuotaUsedPackage) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *QuotaUsedPackage) SetVersion(v string) {
	o.Version = &v
}

func (o QuotaUsedPackage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuotaUsedPackage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HtmlUrl) {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableQuotaUsedPackage struct {
	value *QuotaUsedPackage
	isSet bool
}

func (v NullableQuotaUsedPackage) Get() *QuotaUsedPackage {
	return v.value
}

func (v *NullableQuotaUsedPackage) Set(val *QuotaUsedPackage) {
	v.value = val
	v.isSet = true
}

func (v NullableQuotaUsedPackage) IsSet() bool {
	return v.isSet
}

func (v *NullableQuotaUsedPackage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuotaUsedPackage(val *QuotaUsedPackage) *NullableQuotaUsedPackage {
	return &NullableQuotaUsedPackage{value: val, isSet: true}
}

func (v NullableQuotaUsedPackage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuotaUsedPackage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
