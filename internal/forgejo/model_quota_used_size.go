/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the QuotaUsedSize type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuotaUsedSize{}

// QuotaUsedSize QuotaUsedSize represents the size-based quota usage of a user
type QuotaUsedSize struct {
	Assets *QuotaUsedSizeAssets `json:"assets,omitempty"`
	Git *QuotaUsedSizeGit `json:"git,omitempty"`
	Repos *QuotaUsedSizeRepos `json:"repos,omitempty"`
}

// NewQuotaUsedSize instantiates a new QuotaUsedSize object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuotaUsedSize() *QuotaUsedSize {
	this := QuotaUsedSize{}
	return &this
}

// NewQuotaUsedSizeWithDefaults instantiates a new QuotaUsedSize object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuotaUsedSizeWithDefaults() *QuotaUsedSize {
	this := QuotaUsedSize{}
	return &this
}

// GetAssets returns the Assets field value if set, zero value otherwise.
func (o *QuotaUsedSize) GetAssets() QuotaUsedSizeAssets {
	if o == nil || IsNil(o.Assets) {
		var ret QuotaUsedSizeAssets
		return ret
	}
	return *o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaUsedSize) GetAssetsOk() (*QuotaUsedSizeAssets, bool) {
	if o == nil || IsNil(o.Assets) {
		return nil, false
	}
	return o.Assets, true
}

// HasAssets returns a boolean if a field has been set.
func (o *QuotaUsedSize) HasAssets() bool {
	if o != nil && !IsNil(o.Assets) {
		return true
	}

	return false
}

// SetAssets gets a reference to the given QuotaUsedSizeAssets and assigns it to the Assets field.
func (o *QuotaUsedSize) SetAssets(v QuotaUsedSizeAssets) {
	o.Assets = &v
}

// GetGit returns the Git field value if set, zero value otherwise.
func (o *QuotaUsedSize) GetGit() QuotaUsedSizeGit {
	if o == nil || IsNil(o.Git) {
		var ret QuotaUsedSizeGit
		return ret
	}
	return *o.Git
}

// GetGitOk returns a tuple with the Git field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaUsedSize) GetGitOk() (*QuotaUsedSizeGit, bool) {
	if o == nil || IsNil(o.Git) {
		return nil, false
	}
	return o.Git, true
}

// HasGit returns a boolean if a field has been set.
func (o *QuotaUsedSize) HasGit() bool {
	if o != nil && !IsNil(o.Git) {
		return true
	}

	return false
}

// SetGit gets a reference to the given QuotaUsedSizeGit and assigns it to the Git field.
func (o *QuotaUsedSize) SetGit(v QuotaUsedSizeGit) {
	o.Git = &v
}

// GetRepos returns the Repos field value if set, zero value otherwise.
func (o *QuotaUsedSize) GetRepos() QuotaUsedSizeRepos {
	if o == nil || IsNil(o.Repos) {
		var ret QuotaUsedSizeRepos
		return ret
	}
	return *o.Repos
}

// GetReposOk returns a tuple with the Repos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaUsedSize) GetReposOk() (*QuotaUsedSizeRepos, bool) {
	if o == nil || IsNil(o.Repos) {
		return nil, false
	}
	return o.Repos, true
}

// HasRepos returns a boolean if a field has been set.
func (o *QuotaUsedSize) HasRepos() bool {
	if o != nil && !IsNil(o.Repos) {
		return true
	}

	return false
}

// SetRepos gets a reference to the given QuotaUsedSizeRepos and assigns it to the Repos field.
func (o *QuotaUsedSize) SetRepos(v QuotaUsedSizeRepos) {
	o.Repos = &v
}

func (o QuotaUsedSize) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuotaUsedSize) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Assets) {
		toSerialize["assets"] = o.Assets
	}
	if !IsNil(o.Git) {
		toSerialize["git"] = o.Git
	}
	if !IsNil(o.Repos) {
		toSerialize["repos"] = o.Repos
	}
	return toSerialize, nil
}

type NullableQuotaUsedSize struct {
	value *QuotaUsedSize
	isSet bool
}

func (v NullableQuotaUsedSize) Get() *QuotaUsedSize {
	return v.value
}

func (v *NullableQuotaUsedSize) Set(val *QuotaUsedSize) {
	v.value = val
	v.isSet = true
}

func (v NullableQuotaUsedSize) IsSet() bool {
	return v.isSet
}

func (v *NullableQuotaUsedSize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuotaUsedSize(val *QuotaUsedSize) *NullableQuotaUsedSize {
	return &NullableQuotaUsedSize{value: val, isSet: true}
}

func (v NullableQuotaUsedSize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuotaUsedSize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


