/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the QuotaUsedSizeGit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuotaUsedSizeGit{}

// QuotaUsedSizeGit QuotaUsedSizeGit represents the size-based git (lfs) quota usage of a user
type QuotaUsedSizeGit struct {
	// Storage size of the user's Git LFS objects
	LFS *int64 `json:"LFS,omitempty"`
}

// NewQuotaUsedSizeGit instantiates a new QuotaUsedSizeGit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuotaUsedSizeGit() *QuotaUsedSizeGit {
	this := QuotaUsedSizeGit{}
	return &this
}

// NewQuotaUsedSizeGitWithDefaults instantiates a new QuotaUsedSizeGit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuotaUsedSizeGitWithDefaults() *QuotaUsedSizeGit {
	this := QuotaUsedSizeGit{}
	return &this
}

// GetLFS returns the LFS field value if set, zero value otherwise.
func (o *QuotaUsedSizeGit) GetLFS() int64 {
	if o == nil || IsNil(o.LFS) {
		var ret int64
		return ret
	}
	return *o.LFS
}

// GetLFSOk returns a tuple with the LFS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaUsedSizeGit) GetLFSOk() (*int64, bool) {
	if o == nil || IsNil(o.LFS) {
		return nil, false
	}
	return o.LFS, true
}

// HasLFS returns a boolean if a field has been set.
func (o *QuotaUsedSizeGit) HasLFS() bool {
	if o != nil && !IsNil(o.LFS) {
		return true
	}

	return false
}

// SetLFS gets a reference to the given int64 and assigns it to the LFS field.
func (o *QuotaUsedSizeGit) SetLFS(v int64) {
	o.LFS = &v
}

func (o QuotaUsedSizeGit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuotaUsedSizeGit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LFS) {
		toSerialize["LFS"] = o.LFS
	}
	return toSerialize, nil
}

type NullableQuotaUsedSizeGit struct {
	value *QuotaUsedSizeGit
	isSet bool
}

func (v NullableQuotaUsedSizeGit) Get() *QuotaUsedSizeGit {
	return v.value
}

func (v *NullableQuotaUsedSizeGit) Set(val *QuotaUsedSizeGit) {
	v.value = val
	v.isSet = true
}

func (v NullableQuotaUsedSizeGit) IsSet() bool {
	return v.isSet
}

func (v *NullableQuotaUsedSizeGit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuotaUsedSizeGit(val *QuotaUsedSizeGit) *NullableQuotaUsedSizeGit {
	return &NullableQuotaUsedSizeGit{value: val, isSet: true}
}

func (v NullableQuotaUsedSizeGit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuotaUsedSizeGit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


