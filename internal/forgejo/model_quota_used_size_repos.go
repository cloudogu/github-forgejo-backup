/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the QuotaUsedSizeRepos type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuotaUsedSizeRepos{}

// QuotaUsedSizeRepos QuotaUsedSizeRepos represents the size-based repository quota usage of a user
type QuotaUsedSizeRepos struct {
	// Storage size of the user's private repositories
	Private *int64 `json:"private,omitempty"`
	// Storage size of the user's public repositories
	Public *int64 `json:"public,omitempty"`
}

// NewQuotaUsedSizeRepos instantiates a new QuotaUsedSizeRepos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuotaUsedSizeRepos() *QuotaUsedSizeRepos {
	this := QuotaUsedSizeRepos{}
	return &this
}

// NewQuotaUsedSizeReposWithDefaults instantiates a new QuotaUsedSizeRepos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuotaUsedSizeReposWithDefaults() *QuotaUsedSizeRepos {
	this := QuotaUsedSizeRepos{}
	return &this
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *QuotaUsedSizeRepos) GetPrivate() int64 {
	if o == nil || IsNil(o.Private) {
		var ret int64
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaUsedSizeRepos) GetPrivateOk() (*int64, bool) {
	if o == nil || IsNil(o.Private) {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *QuotaUsedSizeRepos) HasPrivate() bool {
	if o != nil && !IsNil(o.Private) {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given int64 and assigns it to the Private field.
func (o *QuotaUsedSizeRepos) SetPrivate(v int64) {
	o.Private = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *QuotaUsedSizeRepos) GetPublic() int64 {
	if o == nil || IsNil(o.Public) {
		var ret int64
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaUsedSizeRepos) GetPublicOk() (*int64, bool) {
	if o == nil || IsNil(o.Public) {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *QuotaUsedSizeRepos) HasPublic() bool {
	if o != nil && !IsNil(o.Public) {
		return true
	}

	return false
}

// SetPublic gets a reference to the given int64 and assigns it to the Public field.
func (o *QuotaUsedSizeRepos) SetPublic(v int64) {
	o.Public = &v
}

func (o QuotaUsedSizeRepos) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuotaUsedSizeRepos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Private) {
		toSerialize["private"] = o.Private
	}
	if !IsNil(o.Public) {
		toSerialize["public"] = o.Public
	}
	return toSerialize, nil
}

type NullableQuotaUsedSizeRepos struct {
	value *QuotaUsedSizeRepos
	isSet bool
}

func (v NullableQuotaUsedSizeRepos) Get() *QuotaUsedSizeRepos {
	return v.value
}

func (v *NullableQuotaUsedSizeRepos) Set(val *QuotaUsedSizeRepos) {
	v.value = val
	v.isSet = true
}

func (v NullableQuotaUsedSizeRepos) IsSet() bool {
	return v.isSet
}

func (v *NullableQuotaUsedSizeRepos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuotaUsedSizeRepos(val *QuotaUsedSizeRepos) *NullableQuotaUsedSizeRepos {
	return &NullableQuotaUsedSizeRepos{value: val, isSet: true}
}

func (v NullableQuotaUsedSizeRepos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuotaUsedSizeRepos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
