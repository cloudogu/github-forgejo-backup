/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RenameOrgOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RenameOrgOption{}

// RenameOrgOption RenameOrgOption options when renaming an organization
type RenameOrgOption struct {
	// New username for this org. This name cannot be in use yet by any other user.
	NewName string `json:"new_name"`
}

type _RenameOrgOption RenameOrgOption

// NewRenameOrgOption instantiates a new RenameOrgOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRenameOrgOption(newName string) *RenameOrgOption {
	this := RenameOrgOption{}
	this.NewName = newName
	return &this
}

// NewRenameOrgOptionWithDefaults instantiates a new RenameOrgOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRenameOrgOptionWithDefaults() *RenameOrgOption {
	this := RenameOrgOption{}
	return &this
}

// GetNewName returns the NewName field value
func (o *RenameOrgOption) GetNewName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewName
}

// GetNewNameOk returns a tuple with the NewName field value
// and a boolean to check if the value has been set.
func (o *RenameOrgOption) GetNewNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewName, true
}

// SetNewName sets field value
func (o *RenameOrgOption) SetNewName(v string) {
	o.NewName = v
}

func (o RenameOrgOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RenameOrgOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["new_name"] = o.NewName
	return toSerialize, nil
}

func (o *RenameOrgOption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"new_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRenameOrgOption := _RenameOrgOption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRenameOrgOption)

	if err != nil {
		return err
	}

	*o = RenameOrgOption(varRenameOrgOption)

	return err
}

type NullableRenameOrgOption struct {
	value *RenameOrgOption
	isSet bool
}

func (v NullableRenameOrgOption) Get() *RenameOrgOption {
	return v.value
}

func (v *NullableRenameOrgOption) Set(val *RenameOrgOption) {
	v.value = val
	v.isSet = true
}

func (v NullableRenameOrgOption) IsSet() bool {
	return v.isSet
}

func (v *NullableRenameOrgOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRenameOrgOption(val *RenameOrgOption) *NullableRenameOrgOption {
	return &NullableRenameOrgOption{value: val, isSet: true}
}

func (v NullableRenameOrgOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRenameOrgOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
