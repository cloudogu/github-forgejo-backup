/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RenameUserOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RenameUserOption{}

// RenameUserOption RenameUserOption options when renaming a user
type RenameUserOption struct {
	// New username for this user. This name cannot be in use yet by any other user.
	NewUsername string `json:"new_username"`
}

type _RenameUserOption RenameUserOption

// NewRenameUserOption instantiates a new RenameUserOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRenameUserOption(newUsername string) *RenameUserOption {
	this := RenameUserOption{}
	this.NewUsername = newUsername
	return &this
}

// NewRenameUserOptionWithDefaults instantiates a new RenameUserOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRenameUserOptionWithDefaults() *RenameUserOption {
	this := RenameUserOption{}
	return &this
}

// GetNewUsername returns the NewUsername field value
func (o *RenameUserOption) GetNewUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewUsername
}

// GetNewUsernameOk returns a tuple with the NewUsername field value
// and a boolean to check if the value has been set.
func (o *RenameUserOption) GetNewUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewUsername, true
}

// SetNewUsername sets field value
func (o *RenameUserOption) SetNewUsername(v string) {
	o.NewUsername = v
}

func (o RenameUserOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RenameUserOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["new_username"] = o.NewUsername
	return toSerialize, nil
}

func (o *RenameUserOption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"new_username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRenameUserOption := _RenameUserOption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRenameUserOption)

	if err != nil {
		return err
	}

	*o = RenameUserOption(varRenameUserOption)

	return err
}

type NullableRenameUserOption struct {
	value *RenameUserOption
	isSet bool
}

func (v NullableRenameUserOption) Get() *RenameUserOption {
	return v.value
}

func (v *NullableRenameUserOption) Set(val *RenameUserOption) {
	v.value = val
	v.isSet = true
}

func (v NullableRenameUserOption) IsSet() bool {
	return v.isSet
}

func (v *NullableRenameUserOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRenameUserOption(val *RenameUserOption) *NullableRenameUserOption {
	return &NullableRenameUserOption{value: val, isSet: true}
}

func (v NullableRenameUserOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRenameUserOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


