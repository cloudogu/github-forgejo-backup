/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the ReplaceFlagsOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplaceFlagsOption{}

// ReplaceFlagsOption ReplaceFlagsOption options when replacing the flags of a repository
type ReplaceFlagsOption struct {
	Flags []string `json:"flags,omitempty"`
}

// NewReplaceFlagsOption instantiates a new ReplaceFlagsOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplaceFlagsOption() *ReplaceFlagsOption {
	this := ReplaceFlagsOption{}
	return &this
}

// NewReplaceFlagsOptionWithDefaults instantiates a new ReplaceFlagsOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplaceFlagsOptionWithDefaults() *ReplaceFlagsOption {
	this := ReplaceFlagsOption{}
	return &this
}

// GetFlags returns the Flags field value if set, zero value otherwise.
func (o *ReplaceFlagsOption) GetFlags() []string {
	if o == nil || IsNil(o.Flags) {
		var ret []string
		return ret
	}
	return o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceFlagsOption) GetFlagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Flags) {
		return nil, false
	}
	return o.Flags, true
}

// HasFlags returns a boolean if a field has been set.
func (o *ReplaceFlagsOption) HasFlags() bool {
	if o != nil && !IsNil(o.Flags) {
		return true
	}

	return false
}

// SetFlags gets a reference to the given []string and assigns it to the Flags field.
func (o *ReplaceFlagsOption) SetFlags(v []string) {
	o.Flags = v
}

func (o ReplaceFlagsOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplaceFlagsOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Flags) {
		toSerialize["flags"] = o.Flags
	}
	return toSerialize, nil
}

type NullableReplaceFlagsOption struct {
	value *ReplaceFlagsOption
	isSet bool
}

func (v NullableReplaceFlagsOption) Get() *ReplaceFlagsOption {
	return v.value
}

func (v *NullableReplaceFlagsOption) Set(val *ReplaceFlagsOption) {
	v.value = val
	v.isSet = true
}

func (v NullableReplaceFlagsOption) IsSet() bool {
	return v.isSet
}

func (v *NullableReplaceFlagsOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplaceFlagsOption(val *ReplaceFlagsOption) *NullableReplaceFlagsOption {
	return &NullableReplaceFlagsOption{value: val, isSet: true}
}

func (v NullableReplaceFlagsOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplaceFlagsOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


