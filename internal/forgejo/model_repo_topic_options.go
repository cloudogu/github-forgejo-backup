/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the RepoTopicOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RepoTopicOptions{}

// RepoTopicOptions RepoTopicOptions a collection of repo topic names
type RepoTopicOptions struct {
	// list of topic names
	Topics []string `json:"topics,omitempty"`
}

// NewRepoTopicOptions instantiates a new RepoTopicOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepoTopicOptions() *RepoTopicOptions {
	this := RepoTopicOptions{}
	return &this
}

// NewRepoTopicOptionsWithDefaults instantiates a new RepoTopicOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepoTopicOptionsWithDefaults() *RepoTopicOptions {
	this := RepoTopicOptions{}
	return &this
}

// GetTopics returns the Topics field value if set, zero value otherwise.
func (o *RepoTopicOptions) GetTopics() []string {
	if o == nil || IsNil(o.Topics) {
		var ret []string
		return ret
	}
	return o.Topics
}

// GetTopicsOk returns a tuple with the Topics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepoTopicOptions) GetTopicsOk() ([]string, bool) {
	if o == nil || IsNil(o.Topics) {
		return nil, false
	}
	return o.Topics, true
}

// HasTopics returns a boolean if a field has been set.
func (o *RepoTopicOptions) HasTopics() bool {
	if o != nil && !IsNil(o.Topics) {
		return true
	}

	return false
}

// SetTopics gets a reference to the given []string and assigns it to the Topics field.
func (o *RepoTopicOptions) SetTopics(v []string) {
	o.Topics = v
}

func (o RepoTopicOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RepoTopicOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Topics) {
		toSerialize["topics"] = o.Topics
	}
	return toSerialize, nil
}

type NullableRepoTopicOptions struct {
	value *RepoTopicOptions
	isSet bool
}

func (v NullableRepoTopicOptions) Get() *RepoTopicOptions {
	return v.value
}

func (v *NullableRepoTopicOptions) Set(val *RepoTopicOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableRepoTopicOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableRepoTopicOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepoTopicOptions(val *RepoTopicOptions) *NullableRepoTopicOptions {
	return &NullableRepoTopicOptions{value: val, isSet: true}
}

func (v NullableRepoTopicOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepoTopicOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
