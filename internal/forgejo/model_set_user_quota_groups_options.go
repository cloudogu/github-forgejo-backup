/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SetUserQuotaGroupsOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetUserQuotaGroupsOptions{}

// SetUserQuotaGroupsOptions SetUserQuotaGroupsOptions represents the quota groups of a user
type SetUserQuotaGroupsOptions struct {
	// Quota groups the user shall have
	Groups []string `json:"groups"`
}

type _SetUserQuotaGroupsOptions SetUserQuotaGroupsOptions

// NewSetUserQuotaGroupsOptions instantiates a new SetUserQuotaGroupsOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetUserQuotaGroupsOptions(groups []string) *SetUserQuotaGroupsOptions {
	this := SetUserQuotaGroupsOptions{}
	this.Groups = groups
	return &this
}

// NewSetUserQuotaGroupsOptionsWithDefaults instantiates a new SetUserQuotaGroupsOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetUserQuotaGroupsOptionsWithDefaults() *SetUserQuotaGroupsOptions {
	this := SetUserQuotaGroupsOptions{}
	return &this
}

// GetGroups returns the Groups field value
func (o *SetUserQuotaGroupsOptions) GetGroups() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value
// and a boolean to check if the value has been set.
func (o *SetUserQuotaGroupsOptions) GetGroupsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Groups, true
}

// SetGroups sets field value
func (o *SetUserQuotaGroupsOptions) SetGroups(v []string) {
	o.Groups = v
}

func (o SetUserQuotaGroupsOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetUserQuotaGroupsOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["groups"] = o.Groups
	return toSerialize, nil
}

func (o *SetUserQuotaGroupsOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"groups",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetUserQuotaGroupsOptions := _SetUserQuotaGroupsOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSetUserQuotaGroupsOptions)

	if err != nil {
		return err
	}

	*o = SetUserQuotaGroupsOptions(varSetUserQuotaGroupsOptions)

	return err
}

type NullableSetUserQuotaGroupsOptions struct {
	value *SetUserQuotaGroupsOptions
	isSet bool
}

func (v NullableSetUserQuotaGroupsOptions) Get() *SetUserQuotaGroupsOptions {
	return v.value
}

func (v *NullableSetUserQuotaGroupsOptions) Set(val *SetUserQuotaGroupsOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSetUserQuotaGroupsOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSetUserQuotaGroupsOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetUserQuotaGroupsOptions(val *SetUserQuotaGroupsOptions) *NullableSetUserQuotaGroupsOptions {
	return &NullableSetUserQuotaGroupsOptions{value: val, isSet: true}
}

func (v NullableSetUserQuotaGroupsOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetUserQuotaGroupsOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
