/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
	"time"
)

// checks if the StopWatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StopWatch{}

// StopWatch StopWatch represent a running stopwatch
type StopWatch struct {
	Created *time.Time `json:"created,omitempty"`
	Duration *string `json:"duration,omitempty"`
	IssueIndex *int64 `json:"issue_index,omitempty"`
	IssueTitle *string `json:"issue_title,omitempty"`
	RepoName *string `json:"repo_name,omitempty"`
	RepoOwnerName *string `json:"repo_owner_name,omitempty"`
	Seconds *int64 `json:"seconds,omitempty"`
}

// NewStopWatch instantiates a new StopWatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStopWatch() *StopWatch {
	this := StopWatch{}
	return &this
}

// NewStopWatchWithDefaults instantiates a new StopWatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStopWatchWithDefaults() *StopWatch {
	this := StopWatch{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *StopWatch) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopWatch) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *StopWatch) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *StopWatch) SetCreated(v time.Time) {
	o.Created = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *StopWatch) GetDuration() string {
	if o == nil || IsNil(o.Duration) {
		var ret string
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopWatch) GetDurationOk() (*string, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *StopWatch) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given string and assigns it to the Duration field.
func (o *StopWatch) SetDuration(v string) {
	o.Duration = &v
}

// GetIssueIndex returns the IssueIndex field value if set, zero value otherwise.
func (o *StopWatch) GetIssueIndex() int64 {
	if o == nil || IsNil(o.IssueIndex) {
		var ret int64
		return ret
	}
	return *o.IssueIndex
}

// GetIssueIndexOk returns a tuple with the IssueIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopWatch) GetIssueIndexOk() (*int64, bool) {
	if o == nil || IsNil(o.IssueIndex) {
		return nil, false
	}
	return o.IssueIndex, true
}

// HasIssueIndex returns a boolean if a field has been set.
func (o *StopWatch) HasIssueIndex() bool {
	if o != nil && !IsNil(o.IssueIndex) {
		return true
	}

	return false
}

// SetIssueIndex gets a reference to the given int64 and assigns it to the IssueIndex field.
func (o *StopWatch) SetIssueIndex(v int64) {
	o.IssueIndex = &v
}

// GetIssueTitle returns the IssueTitle field value if set, zero value otherwise.
func (o *StopWatch) GetIssueTitle() string {
	if o == nil || IsNil(o.IssueTitle) {
		var ret string
		return ret
	}
	return *o.IssueTitle
}

// GetIssueTitleOk returns a tuple with the IssueTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopWatch) GetIssueTitleOk() (*string, bool) {
	if o == nil || IsNil(o.IssueTitle) {
		return nil, false
	}
	return o.IssueTitle, true
}

// HasIssueTitle returns a boolean if a field has been set.
func (o *StopWatch) HasIssueTitle() bool {
	if o != nil && !IsNil(o.IssueTitle) {
		return true
	}

	return false
}

// SetIssueTitle gets a reference to the given string and assigns it to the IssueTitle field.
func (o *StopWatch) SetIssueTitle(v string) {
	o.IssueTitle = &v
}

// GetRepoName returns the RepoName field value if set, zero value otherwise.
func (o *StopWatch) GetRepoName() string {
	if o == nil || IsNil(o.RepoName) {
		var ret string
		return ret
	}
	return *o.RepoName
}

// GetRepoNameOk returns a tuple with the RepoName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopWatch) GetRepoNameOk() (*string, bool) {
	if o == nil || IsNil(o.RepoName) {
		return nil, false
	}
	return o.RepoName, true
}

// HasRepoName returns a boolean if a field has been set.
func (o *StopWatch) HasRepoName() bool {
	if o != nil && !IsNil(o.RepoName) {
		return true
	}

	return false
}

// SetRepoName gets a reference to the given string and assigns it to the RepoName field.
func (o *StopWatch) SetRepoName(v string) {
	o.RepoName = &v
}

// GetRepoOwnerName returns the RepoOwnerName field value if set, zero value otherwise.
func (o *StopWatch) GetRepoOwnerName() string {
	if o == nil || IsNil(o.RepoOwnerName) {
		var ret string
		return ret
	}
	return *o.RepoOwnerName
}

// GetRepoOwnerNameOk returns a tuple with the RepoOwnerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopWatch) GetRepoOwnerNameOk() (*string, bool) {
	if o == nil || IsNil(o.RepoOwnerName) {
		return nil, false
	}
	return o.RepoOwnerName, true
}

// HasRepoOwnerName returns a boolean if a field has been set.
func (o *StopWatch) HasRepoOwnerName() bool {
	if o != nil && !IsNil(o.RepoOwnerName) {
		return true
	}

	return false
}

// SetRepoOwnerName gets a reference to the given string and assigns it to the RepoOwnerName field.
func (o *StopWatch) SetRepoOwnerName(v string) {
	o.RepoOwnerName = &v
}

// GetSeconds returns the Seconds field value if set, zero value otherwise.
func (o *StopWatch) GetSeconds() int64 {
	if o == nil || IsNil(o.Seconds) {
		var ret int64
		return ret
	}
	return *o.Seconds
}

// GetSecondsOk returns a tuple with the Seconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopWatch) GetSecondsOk() (*int64, bool) {
	if o == nil || IsNil(o.Seconds) {
		return nil, false
	}
	return o.Seconds, true
}

// HasSeconds returns a boolean if a field has been set.
func (o *StopWatch) HasSeconds() bool {
	if o != nil && !IsNil(o.Seconds) {
		return true
	}

	return false
}

// SetSeconds gets a reference to the given int64 and assigns it to the Seconds field.
func (o *StopWatch) SetSeconds(v int64) {
	o.Seconds = &v
}

func (o StopWatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StopWatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.IssueIndex) {
		toSerialize["issue_index"] = o.IssueIndex
	}
	if !IsNil(o.IssueTitle) {
		toSerialize["issue_title"] = o.IssueTitle
	}
	if !IsNil(o.RepoName) {
		toSerialize["repo_name"] = o.RepoName
	}
	if !IsNil(o.RepoOwnerName) {
		toSerialize["repo_owner_name"] = o.RepoOwnerName
	}
	if !IsNil(o.Seconds) {
		toSerialize["seconds"] = o.Seconds
	}
	return toSerialize, nil
}

type NullableStopWatch struct {
	value *StopWatch
	isSet bool
}

func (v NullableStopWatch) Get() *StopWatch {
	return v.value
}

func (v *NullableStopWatch) Set(val *StopWatch) {
	v.value = val
	v.isSet = true
}

func (v NullableStopWatch) IsSet() bool {
	return v.isSet
}

func (v *NullableStopWatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStopWatch(val *StopWatch) *NullableStopWatch {
	return &NullableStopWatch{value: val, isSet: true}
}

func (v NullableStopWatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStopWatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


