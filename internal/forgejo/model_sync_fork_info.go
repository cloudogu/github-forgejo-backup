/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the SyncForkInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyncForkInfo{}

// SyncForkInfo SyncForkInfo information about syncing a fork
type SyncForkInfo struct {
	Allowed *bool `json:"allowed,omitempty"`
	BaseCommit *string `json:"base_commit,omitempty"`
	CommitsBehind *int64 `json:"commits_behind,omitempty"`
	ForkCommit *string `json:"fork_commit,omitempty"`
}

// NewSyncForkInfo instantiates a new SyncForkInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyncForkInfo() *SyncForkInfo {
	this := SyncForkInfo{}
	return &this
}

// NewSyncForkInfoWithDefaults instantiates a new SyncForkInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyncForkInfoWithDefaults() *SyncForkInfo {
	this := SyncForkInfo{}
	return &this
}

// GetAllowed returns the Allowed field value if set, zero value otherwise.
func (o *SyncForkInfo) GetAllowed() bool {
	if o == nil || IsNil(o.Allowed) {
		var ret bool
		return ret
	}
	return *o.Allowed
}

// GetAllowedOk returns a tuple with the Allowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncForkInfo) GetAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.Allowed) {
		return nil, false
	}
	return o.Allowed, true
}

// HasAllowed returns a boolean if a field has been set.
func (o *SyncForkInfo) HasAllowed() bool {
	if o != nil && !IsNil(o.Allowed) {
		return true
	}

	return false
}

// SetAllowed gets a reference to the given bool and assigns it to the Allowed field.
func (o *SyncForkInfo) SetAllowed(v bool) {
	o.Allowed = &v
}

// GetBaseCommit returns the BaseCommit field value if set, zero value otherwise.
func (o *SyncForkInfo) GetBaseCommit() string {
	if o == nil || IsNil(o.BaseCommit) {
		var ret string
		return ret
	}
	return *o.BaseCommit
}

// GetBaseCommitOk returns a tuple with the BaseCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncForkInfo) GetBaseCommitOk() (*string, bool) {
	if o == nil || IsNil(o.BaseCommit) {
		return nil, false
	}
	return o.BaseCommit, true
}

// HasBaseCommit returns a boolean if a field has been set.
func (o *SyncForkInfo) HasBaseCommit() bool {
	if o != nil && !IsNil(o.BaseCommit) {
		return true
	}

	return false
}

// SetBaseCommit gets a reference to the given string and assigns it to the BaseCommit field.
func (o *SyncForkInfo) SetBaseCommit(v string) {
	o.BaseCommit = &v
}

// GetCommitsBehind returns the CommitsBehind field value if set, zero value otherwise.
func (o *SyncForkInfo) GetCommitsBehind() int64 {
	if o == nil || IsNil(o.CommitsBehind) {
		var ret int64
		return ret
	}
	return *o.CommitsBehind
}

// GetCommitsBehindOk returns a tuple with the CommitsBehind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncForkInfo) GetCommitsBehindOk() (*int64, bool) {
	if o == nil || IsNil(o.CommitsBehind) {
		return nil, false
	}
	return o.CommitsBehind, true
}

// HasCommitsBehind returns a boolean if a field has been set.
func (o *SyncForkInfo) HasCommitsBehind() bool {
	if o != nil && !IsNil(o.CommitsBehind) {
		return true
	}

	return false
}

// SetCommitsBehind gets a reference to the given int64 and assigns it to the CommitsBehind field.
func (o *SyncForkInfo) SetCommitsBehind(v int64) {
	o.CommitsBehind = &v
}

// GetForkCommit returns the ForkCommit field value if set, zero value otherwise.
func (o *SyncForkInfo) GetForkCommit() string {
	if o == nil || IsNil(o.ForkCommit) {
		var ret string
		return ret
	}
	return *o.ForkCommit
}

// GetForkCommitOk returns a tuple with the ForkCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncForkInfo) GetForkCommitOk() (*string, bool) {
	if o == nil || IsNil(o.ForkCommit) {
		return nil, false
	}
	return o.ForkCommit, true
}

// HasForkCommit returns a boolean if a field has been set.
func (o *SyncForkInfo) HasForkCommit() bool {
	if o != nil && !IsNil(o.ForkCommit) {
		return true
	}

	return false
}

// SetForkCommit gets a reference to the given string and assigns it to the ForkCommit field.
func (o *SyncForkInfo) SetForkCommit(v string) {
	o.ForkCommit = &v
}

func (o SyncForkInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyncForkInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Allowed) {
		toSerialize["allowed"] = o.Allowed
	}
	if !IsNil(o.BaseCommit) {
		toSerialize["base_commit"] = o.BaseCommit
	}
	if !IsNil(o.CommitsBehind) {
		toSerialize["commits_behind"] = o.CommitsBehind
	}
	if !IsNil(o.ForkCommit) {
		toSerialize["fork_commit"] = o.ForkCommit
	}
	return toSerialize, nil
}

type NullableSyncForkInfo struct {
	value *SyncForkInfo
	isSet bool
}

func (v NullableSyncForkInfo) Get() *SyncForkInfo {
	return v.value
}

func (v *NullableSyncForkInfo) Set(val *SyncForkInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncForkInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncForkInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncForkInfo(val *SyncForkInfo) *NullableSyncForkInfo {
	return &NullableSyncForkInfo{value: val, isSet: true}
}

func (v NullableSyncForkInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncForkInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


