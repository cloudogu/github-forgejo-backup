/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the Tag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tag{}

// Tag Tag represents a repository tag
type Tag struct {
	ArchiveDownloadCount *TagArchiveDownloadCount `json:"archive_download_count,omitempty"`
	Commit               *CommitMeta              `json:"commit,omitempty"`
	Id                   *string                  `json:"id,omitempty"`
	Message              *string                  `json:"message,omitempty"`
	Name                 *string                  `json:"name,omitempty"`
	TarballUrl           *string                  `json:"tarball_url,omitempty"`
	ZipballUrl           *string                  `json:"zipball_url,omitempty"`
}

// NewTag instantiates a new Tag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTag() *Tag {
	this := Tag{}
	return &this
}

// NewTagWithDefaults instantiates a new Tag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagWithDefaults() *Tag {
	this := Tag{}
	return &this
}

// GetArchiveDownloadCount returns the ArchiveDownloadCount field value if set, zero value otherwise.
func (o *Tag) GetArchiveDownloadCount() TagArchiveDownloadCount {
	if o == nil || IsNil(o.ArchiveDownloadCount) {
		var ret TagArchiveDownloadCount
		return ret
	}
	return *o.ArchiveDownloadCount
}

// GetArchiveDownloadCountOk returns a tuple with the ArchiveDownloadCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetArchiveDownloadCountOk() (*TagArchiveDownloadCount, bool) {
	if o == nil || IsNil(o.ArchiveDownloadCount) {
		return nil, false
	}
	return o.ArchiveDownloadCount, true
}

// HasArchiveDownloadCount returns a boolean if a field has been set.
func (o *Tag) HasArchiveDownloadCount() bool {
	if o != nil && !IsNil(o.ArchiveDownloadCount) {
		return true
	}

	return false
}

// SetArchiveDownloadCount gets a reference to the given TagArchiveDownloadCount and assigns it to the ArchiveDownloadCount field.
func (o *Tag) SetArchiveDownloadCount(v TagArchiveDownloadCount) {
	o.ArchiveDownloadCount = &v
}

// GetCommit returns the Commit field value if set, zero value otherwise.
func (o *Tag) GetCommit() CommitMeta {
	if o == nil || IsNil(o.Commit) {
		var ret CommitMeta
		return ret
	}
	return *o.Commit
}

// GetCommitOk returns a tuple with the Commit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetCommitOk() (*CommitMeta, bool) {
	if o == nil || IsNil(o.Commit) {
		return nil, false
	}
	return o.Commit, true
}

// HasCommit returns a boolean if a field has been set.
func (o *Tag) HasCommit() bool {
	if o != nil && !IsNil(o.Commit) {
		return true
	}

	return false
}

// SetCommit gets a reference to the given CommitMeta and assigns it to the Commit field.
func (o *Tag) SetCommit(v CommitMeta) {
	o.Commit = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Tag) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Tag) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Tag) SetId(v string) {
	o.Id = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *Tag) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Tag) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *Tag) SetMessage(v string) {
	o.Message = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Tag) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Tag) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Tag) SetName(v string) {
	o.Name = &v
}

// GetTarballUrl returns the TarballUrl field value if set, zero value otherwise.
func (o *Tag) GetTarballUrl() string {
	if o == nil || IsNil(o.TarballUrl) {
		var ret string
		return ret
	}
	return *o.TarballUrl
}

// GetTarballUrlOk returns a tuple with the TarballUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetTarballUrlOk() (*string, bool) {
	if o == nil || IsNil(o.TarballUrl) {
		return nil, false
	}
	return o.TarballUrl, true
}

// HasTarballUrl returns a boolean if a field has been set.
func (o *Tag) HasTarballUrl() bool {
	if o != nil && !IsNil(o.TarballUrl) {
		return true
	}

	return false
}

// SetTarballUrl gets a reference to the given string and assigns it to the TarballUrl field.
func (o *Tag) SetTarballUrl(v string) {
	o.TarballUrl = &v
}

// GetZipballUrl returns the ZipballUrl field value if set, zero value otherwise.
func (o *Tag) GetZipballUrl() string {
	if o == nil || IsNil(o.ZipballUrl) {
		var ret string
		return ret
	}
	return *o.ZipballUrl
}

// GetZipballUrlOk returns a tuple with the ZipballUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetZipballUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ZipballUrl) {
		return nil, false
	}
	return o.ZipballUrl, true
}

// HasZipballUrl returns a boolean if a field has been set.
func (o *Tag) HasZipballUrl() bool {
	if o != nil && !IsNil(o.ZipballUrl) {
		return true
	}

	return false
}

// SetZipballUrl gets a reference to the given string and assigns it to the ZipballUrl field.
func (o *Tag) SetZipballUrl(v string) {
	o.ZipballUrl = &v
}

func (o Tag) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ArchiveDownloadCount) {
		toSerialize["archive_download_count"] = o.ArchiveDownloadCount
	}
	if !IsNil(o.Commit) {
		toSerialize["commit"] = o.Commit
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.TarballUrl) {
		toSerialize["tarball_url"] = o.TarballUrl
	}
	if !IsNil(o.ZipballUrl) {
		toSerialize["zipball_url"] = o.ZipballUrl
	}
	return toSerialize, nil
}

type NullableTag struct {
	value *Tag
	isSet bool
}

func (v NullableTag) Get() *Tag {
	return v.value
}

func (v *NullableTag) Set(val *Tag) {
	v.value = val
	v.isSet = true
}

func (v NullableTag) IsSet() bool {
	return v.isSet
}

func (v *NullableTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTag(val *Tag) *NullableTag {
	return &NullableTag{value: val, isSet: true}
}

func (v NullableTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
