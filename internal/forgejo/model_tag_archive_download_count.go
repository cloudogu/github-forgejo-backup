/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the TagArchiveDownloadCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagArchiveDownloadCount{}

// TagArchiveDownloadCount TagArchiveDownloadCount counts how many times a archive was downloaded
type TagArchiveDownloadCount struct {
	TarGz *int64 `json:"tar_gz,omitempty"`
	Zip *int64 `json:"zip,omitempty"`
}

// NewTagArchiveDownloadCount instantiates a new TagArchiveDownloadCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagArchiveDownloadCount() *TagArchiveDownloadCount {
	this := TagArchiveDownloadCount{}
	return &this
}

// NewTagArchiveDownloadCountWithDefaults instantiates a new TagArchiveDownloadCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagArchiveDownloadCountWithDefaults() *TagArchiveDownloadCount {
	this := TagArchiveDownloadCount{}
	return &this
}

// GetTarGz returns the TarGz field value if set, zero value otherwise.
func (o *TagArchiveDownloadCount) GetTarGz() int64 {
	if o == nil || IsNil(o.TarGz) {
		var ret int64
		return ret
	}
	return *o.TarGz
}

// GetTarGzOk returns a tuple with the TarGz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagArchiveDownloadCount) GetTarGzOk() (*int64, bool) {
	if o == nil || IsNil(o.TarGz) {
		return nil, false
	}
	return o.TarGz, true
}

// HasTarGz returns a boolean if a field has been set.
func (o *TagArchiveDownloadCount) HasTarGz() bool {
	if o != nil && !IsNil(o.TarGz) {
		return true
	}

	return false
}

// SetTarGz gets a reference to the given int64 and assigns it to the TarGz field.
func (o *TagArchiveDownloadCount) SetTarGz(v int64) {
	o.TarGz = &v
}

// GetZip returns the Zip field value if set, zero value otherwise.
func (o *TagArchiveDownloadCount) GetZip() int64 {
	if o == nil || IsNil(o.Zip) {
		var ret int64
		return ret
	}
	return *o.Zip
}

// GetZipOk returns a tuple with the Zip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagArchiveDownloadCount) GetZipOk() (*int64, bool) {
	if o == nil || IsNil(o.Zip) {
		return nil, false
	}
	return o.Zip, true
}

// HasZip returns a boolean if a field has been set.
func (o *TagArchiveDownloadCount) HasZip() bool {
	if o != nil && !IsNil(o.Zip) {
		return true
	}

	return false
}

// SetZip gets a reference to the given int64 and assigns it to the Zip field.
func (o *TagArchiveDownloadCount) SetZip(v int64) {
	o.Zip = &v
}

func (o TagArchiveDownloadCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagArchiveDownloadCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TarGz) {
		toSerialize["tar_gz"] = o.TarGz
	}
	if !IsNil(o.Zip) {
		toSerialize["zip"] = o.Zip
	}
	return toSerialize, nil
}

type NullableTagArchiveDownloadCount struct {
	value *TagArchiveDownloadCount
	isSet bool
}

func (v NullableTagArchiveDownloadCount) Get() *TagArchiveDownloadCount {
	return v.value
}

func (v *NullableTagArchiveDownloadCount) Set(val *TagArchiveDownloadCount) {
	v.value = val
	v.isSet = true
}

func (v NullableTagArchiveDownloadCount) IsSet() bool {
	return v.isSet
}

func (v *NullableTagArchiveDownloadCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagArchiveDownloadCount(val *TagArchiveDownloadCount) *NullableTagArchiveDownloadCount {
	return &NullableTagArchiveDownloadCount{value: val, isSet: true}
}

func (v NullableTagArchiveDownloadCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagArchiveDownloadCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


