/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the Team type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Team{}

// Team Team represents a team in an organization
type Team struct {
	CanCreateOrgRepo *bool `json:"can_create_org_repo,omitempty"`
	Description *string `json:"description,omitempty"`
	Id *int64 `json:"id,omitempty"`
	IncludesAllRepositories *bool `json:"includes_all_repositories,omitempty"`
	Name *string `json:"name,omitempty"`
	Organization *Organization `json:"organization,omitempty"`
	Permission *string `json:"permission,omitempty"`
	Units []string `json:"units,omitempty"`
	UnitsMap *map[string]string `json:"units_map,omitempty"`
}

// NewTeam instantiates a new Team object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeam() *Team {
	this := Team{}
	return &this
}

// NewTeamWithDefaults instantiates a new Team object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamWithDefaults() *Team {
	this := Team{}
	return &this
}

// GetCanCreateOrgRepo returns the CanCreateOrgRepo field value if set, zero value otherwise.
func (o *Team) GetCanCreateOrgRepo() bool {
	if o == nil || IsNil(o.CanCreateOrgRepo) {
		var ret bool
		return ret
	}
	return *o.CanCreateOrgRepo
}

// GetCanCreateOrgRepoOk returns a tuple with the CanCreateOrgRepo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetCanCreateOrgRepoOk() (*bool, bool) {
	if o == nil || IsNil(o.CanCreateOrgRepo) {
		return nil, false
	}
	return o.CanCreateOrgRepo, true
}

// HasCanCreateOrgRepo returns a boolean if a field has been set.
func (o *Team) HasCanCreateOrgRepo() bool {
	if o != nil && !IsNil(o.CanCreateOrgRepo) {
		return true
	}

	return false
}

// SetCanCreateOrgRepo gets a reference to the given bool and assigns it to the CanCreateOrgRepo field.
func (o *Team) SetCanCreateOrgRepo(v bool) {
	o.CanCreateOrgRepo = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Team) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Team) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Team) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Team) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Team) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Team) SetId(v int64) {
	o.Id = &v
}

// GetIncludesAllRepositories returns the IncludesAllRepositories field value if set, zero value otherwise.
func (o *Team) GetIncludesAllRepositories() bool {
	if o == nil || IsNil(o.IncludesAllRepositories) {
		var ret bool
		return ret
	}
	return *o.IncludesAllRepositories
}

// GetIncludesAllRepositoriesOk returns a tuple with the IncludesAllRepositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetIncludesAllRepositoriesOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludesAllRepositories) {
		return nil, false
	}
	return o.IncludesAllRepositories, true
}

// HasIncludesAllRepositories returns a boolean if a field has been set.
func (o *Team) HasIncludesAllRepositories() bool {
	if o != nil && !IsNil(o.IncludesAllRepositories) {
		return true
	}

	return false
}

// SetIncludesAllRepositories gets a reference to the given bool and assigns it to the IncludesAllRepositories field.
func (o *Team) SetIncludesAllRepositories(v bool) {
	o.IncludesAllRepositories = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Team) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Team) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Team) SetName(v string) {
	o.Name = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *Team) GetOrganization() Organization {
	if o == nil || IsNil(o.Organization) {
		var ret Organization
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetOrganizationOk() (*Organization, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *Team) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given Organization and assigns it to the Organization field.
func (o *Team) SetOrganization(v Organization) {
	o.Organization = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *Team) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *Team) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *Team) SetPermission(v string) {
	o.Permission = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *Team) GetUnits() []string {
	if o == nil || IsNil(o.Units) {
		var ret []string
		return ret
	}
	return o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetUnitsOk() ([]string, bool) {
	if o == nil || IsNil(o.Units) {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *Team) HasUnits() bool {
	if o != nil && !IsNil(o.Units) {
		return true
	}

	return false
}

// SetUnits gets a reference to the given []string and assigns it to the Units field.
func (o *Team) SetUnits(v []string) {
	o.Units = v
}

// GetUnitsMap returns the UnitsMap field value if set, zero value otherwise.
func (o *Team) GetUnitsMap() map[string]string {
	if o == nil || IsNil(o.UnitsMap) {
		var ret map[string]string
		return ret
	}
	return *o.UnitsMap
}

// GetUnitsMapOk returns a tuple with the UnitsMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetUnitsMapOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.UnitsMap) {
		return nil, false
	}
	return o.UnitsMap, true
}

// HasUnitsMap returns a boolean if a field has been set.
func (o *Team) HasUnitsMap() bool {
	if o != nil && !IsNil(o.UnitsMap) {
		return true
	}

	return false
}

// SetUnitsMap gets a reference to the given map[string]string and assigns it to the UnitsMap field.
func (o *Team) SetUnitsMap(v map[string]string) {
	o.UnitsMap = &v
}

func (o Team) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Team) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CanCreateOrgRepo) {
		toSerialize["can_create_org_repo"] = o.CanCreateOrgRepo
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IncludesAllRepositories) {
		toSerialize["includes_all_repositories"] = o.IncludesAllRepositories
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	if !IsNil(o.Units) {
		toSerialize["units"] = o.Units
	}
	if !IsNil(o.UnitsMap) {
		toSerialize["units_map"] = o.UnitsMap
	}
	return toSerialize, nil
}

type NullableTeam struct {
	value *Team
	isSet bool
}

func (v NullableTeam) Get() *Team {
	return v.value
}

func (v *NullableTeam) Set(val *Team) {
	v.value = val
	v.isSet = true
}

func (v NullableTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeam(val *Team) *NullableTeam {
	return &NullableTeam{value: val, isSet: true}
}

func (v NullableTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


