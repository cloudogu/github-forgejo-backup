/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the TeamSearch200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamSearch200Response{}

// TeamSearch200Response struct for TeamSearch200Response
type TeamSearch200Response struct {
	Data []Team `json:"data,omitempty"`
	Ok   *bool  `json:"ok,omitempty"`
}

// NewTeamSearch200Response instantiates a new TeamSearch200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamSearch200Response() *TeamSearch200Response {
	this := TeamSearch200Response{}
	return &this
}

// NewTeamSearch200ResponseWithDefaults instantiates a new TeamSearch200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamSearch200ResponseWithDefaults() *TeamSearch200Response {
	this := TeamSearch200Response{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *TeamSearch200Response) GetData() []Team {
	if o == nil || IsNil(o.Data) {
		var ret []Team
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamSearch200Response) GetDataOk() ([]Team, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *TeamSearch200Response) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []Team and assigns it to the Data field.
func (o *TeamSearch200Response) SetData(v []Team) {
	o.Data = v
}

// GetOk returns the Ok field value if set, zero value otherwise.
func (o *TeamSearch200Response) GetOk() bool {
	if o == nil || IsNil(o.Ok) {
		var ret bool
		return ret
	}
	return *o.Ok
}

// GetOkOk returns a tuple with the Ok field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamSearch200Response) GetOkOk() (*bool, bool) {
	if o == nil || IsNil(o.Ok) {
		return nil, false
	}
	return o.Ok, true
}

// HasOk returns a boolean if a field has been set.
func (o *TeamSearch200Response) HasOk() bool {
	if o != nil && !IsNil(o.Ok) {
		return true
	}

	return false
}

// SetOk gets a reference to the given bool and assigns it to the Ok field.
func (o *TeamSearch200Response) SetOk(v bool) {
	o.Ok = &v
}

func (o TeamSearch200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamSearch200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Ok) {
		toSerialize["ok"] = o.Ok
	}
	return toSerialize, nil
}

type NullableTeamSearch200Response struct {
	value *TeamSearch200Response
	isSet bool
}

func (v NullableTeamSearch200Response) Get() *TeamSearch200Response {
	return v.value
}

func (v *NullableTeamSearch200Response) Set(val *TeamSearch200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamSearch200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamSearch200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamSearch200Response(val *TeamSearch200Response) *NullableTeamSearch200Response {
	return &NullableTeamSearch200Response{value: val, isSet: true}
}

func (v NullableTeamSearch200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamSearch200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
