/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
	"time"
)

// checks if the TrackedTime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackedTime{}

// TrackedTime TrackedTime worked time for an issue / pr
type TrackedTime struct {
	Created *time.Time `json:"created,omitempty"`
	Id      *int64     `json:"id,omitempty"`
	Issue   *Issue     `json:"issue,omitempty"`
	// deprecated (only for backwards compatibility)
	IssueId *int64 `json:"issue_id,omitempty"`
	// Time in seconds
	Time *int64 `json:"time,omitempty"`
	// deprecated (only for backwards compatibility)
	UserId   *int64  `json:"user_id,omitempty"`
	UserName *string `json:"user_name,omitempty"`
}

// NewTrackedTime instantiates a new TrackedTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackedTime() *TrackedTime {
	this := TrackedTime{}
	return &this
}

// NewTrackedTimeWithDefaults instantiates a new TrackedTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackedTimeWithDefaults() *TrackedTime {
	this := TrackedTime{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *TrackedTime) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedTime) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *TrackedTime) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *TrackedTime) SetCreated(v time.Time) {
	o.Created = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TrackedTime) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedTime) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TrackedTime) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *TrackedTime) SetId(v int64) {
	o.Id = &v
}

// GetIssue returns the Issue field value if set, zero value otherwise.
func (o *TrackedTime) GetIssue() Issue {
	if o == nil || IsNil(o.Issue) {
		var ret Issue
		return ret
	}
	return *o.Issue
}

// GetIssueOk returns a tuple with the Issue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedTime) GetIssueOk() (*Issue, bool) {
	if o == nil || IsNil(o.Issue) {
		return nil, false
	}
	return o.Issue, true
}

// HasIssue returns a boolean if a field has been set.
func (o *TrackedTime) HasIssue() bool {
	if o != nil && !IsNil(o.Issue) {
		return true
	}

	return false
}

// SetIssue gets a reference to the given Issue and assigns it to the Issue field.
func (o *TrackedTime) SetIssue(v Issue) {
	o.Issue = &v
}

// GetIssueId returns the IssueId field value if set, zero value otherwise.
func (o *TrackedTime) GetIssueId() int64 {
	if o == nil || IsNil(o.IssueId) {
		var ret int64
		return ret
	}
	return *o.IssueId
}

// GetIssueIdOk returns a tuple with the IssueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedTime) GetIssueIdOk() (*int64, bool) {
	if o == nil || IsNil(o.IssueId) {
		return nil, false
	}
	return o.IssueId, true
}

// HasIssueId returns a boolean if a field has been set.
func (o *TrackedTime) HasIssueId() bool {
	if o != nil && !IsNil(o.IssueId) {
		return true
	}

	return false
}

// SetIssueId gets a reference to the given int64 and assigns it to the IssueId field.
func (o *TrackedTime) SetIssueId(v int64) {
	o.IssueId = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *TrackedTime) GetTime() int64 {
	if o == nil || IsNil(o.Time) {
		var ret int64
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedTime) GetTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *TrackedTime) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given int64 and assigns it to the Time field.
func (o *TrackedTime) SetTime(v int64) {
	o.Time = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *TrackedTime) GetUserId() int64 {
	if o == nil || IsNil(o.UserId) {
		var ret int64
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedTime) GetUserIdOk() (*int64, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *TrackedTime) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int64 and assigns it to the UserId field.
func (o *TrackedTime) SetUserId(v int64) {
	o.UserId = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *TrackedTime) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackedTime) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *TrackedTime) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *TrackedTime) SetUserName(v string) {
	o.UserName = &v
}

func (o TrackedTime) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackedTime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Issue) {
		toSerialize["issue"] = o.Issue
	}
	if !IsNil(o.IssueId) {
		toSerialize["issue_id"] = o.IssueId
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.UserName) {
		toSerialize["user_name"] = o.UserName
	}
	return toSerialize, nil
}

type NullableTrackedTime struct {
	value *TrackedTime
	isSet bool
}

func (v NullableTrackedTime) Get() *TrackedTime {
	return v.value
}

func (v *NullableTrackedTime) Set(val *TrackedTime) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackedTime) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackedTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackedTime(val *TrackedTime) *NullableTrackedTime {
	return &NullableTrackedTime{value: val, isSet: true}
}

func (v NullableTrackedTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackedTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
