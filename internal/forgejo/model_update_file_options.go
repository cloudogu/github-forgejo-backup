/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateFileOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateFileOptions{}

// UpdateFileOptions UpdateFileOptions options for updating files Note: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)
type UpdateFileOptions struct {
	Author *Identity `json:"author,omitempty"`
	// branch (optional) to base this file from. if not given, the default branch is used
	Branch *string `json:"branch,omitempty"`
	Committer *Identity `json:"committer,omitempty"`
	// content must be base64 encoded
	Content string `json:"content"`
	Dates *CommitDateOptions `json:"dates,omitempty"`
	// from_path (optional) is the path of the original file which will be moved/renamed to the path in the URL
	FromPath *string `json:"from_path,omitempty"`
	// message (optional) for the commit of this file. if not supplied, a default message will be used
	Message *string `json:"message,omitempty"`
	// new_branch (optional) will make a new branch from `branch` before creating the file
	NewBranch *string `json:"new_branch,omitempty"`
	// sha is the SHA for the file that already exists
	Sha string `json:"sha"`
	// Add a Signed-off-by trailer by the committer at the end of the commit log message.
	Signoff *bool `json:"signoff,omitempty"`
}

type _UpdateFileOptions UpdateFileOptions

// NewUpdateFileOptions instantiates a new UpdateFileOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateFileOptions(content string, sha string) *UpdateFileOptions {
	this := UpdateFileOptions{}
	this.Content = content
	this.Sha = sha
	return &this
}

// NewUpdateFileOptionsWithDefaults instantiates a new UpdateFileOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateFileOptionsWithDefaults() *UpdateFileOptions {
	this := UpdateFileOptions{}
	return &this
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *UpdateFileOptions) GetAuthor() Identity {
	if o == nil || IsNil(o.Author) {
		var ret Identity
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileOptions) GetAuthorOk() (*Identity, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *UpdateFileOptions) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given Identity and assigns it to the Author field.
func (o *UpdateFileOptions) SetAuthor(v Identity) {
	o.Author = &v
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *UpdateFileOptions) GetBranch() string {
	if o == nil || IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileOptions) GetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *UpdateFileOptions) HasBranch() bool {
	if o != nil && !IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *UpdateFileOptions) SetBranch(v string) {
	o.Branch = &v
}

// GetCommitter returns the Committer field value if set, zero value otherwise.
func (o *UpdateFileOptions) GetCommitter() Identity {
	if o == nil || IsNil(o.Committer) {
		var ret Identity
		return ret
	}
	return *o.Committer
}

// GetCommitterOk returns a tuple with the Committer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileOptions) GetCommitterOk() (*Identity, bool) {
	if o == nil || IsNil(o.Committer) {
		return nil, false
	}
	return o.Committer, true
}

// HasCommitter returns a boolean if a field has been set.
func (o *UpdateFileOptions) HasCommitter() bool {
	if o != nil && !IsNil(o.Committer) {
		return true
	}

	return false
}

// SetCommitter gets a reference to the given Identity and assigns it to the Committer field.
func (o *UpdateFileOptions) SetCommitter(v Identity) {
	o.Committer = &v
}

// GetContent returns the Content field value
func (o *UpdateFileOptions) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *UpdateFileOptions) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *UpdateFileOptions) SetContent(v string) {
	o.Content = v
}

// GetDates returns the Dates field value if set, zero value otherwise.
func (o *UpdateFileOptions) GetDates() CommitDateOptions {
	if o == nil || IsNil(o.Dates) {
		var ret CommitDateOptions
		return ret
	}
	return *o.Dates
}

// GetDatesOk returns a tuple with the Dates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileOptions) GetDatesOk() (*CommitDateOptions, bool) {
	if o == nil || IsNil(o.Dates) {
		return nil, false
	}
	return o.Dates, true
}

// HasDates returns a boolean if a field has been set.
func (o *UpdateFileOptions) HasDates() bool {
	if o != nil && !IsNil(o.Dates) {
		return true
	}

	return false
}

// SetDates gets a reference to the given CommitDateOptions and assigns it to the Dates field.
func (o *UpdateFileOptions) SetDates(v CommitDateOptions) {
	o.Dates = &v
}

// GetFromPath returns the FromPath field value if set, zero value otherwise.
func (o *UpdateFileOptions) GetFromPath() string {
	if o == nil || IsNil(o.FromPath) {
		var ret string
		return ret
	}
	return *o.FromPath
}

// GetFromPathOk returns a tuple with the FromPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileOptions) GetFromPathOk() (*string, bool) {
	if o == nil || IsNil(o.FromPath) {
		return nil, false
	}
	return o.FromPath, true
}

// HasFromPath returns a boolean if a field has been set.
func (o *UpdateFileOptions) HasFromPath() bool {
	if o != nil && !IsNil(o.FromPath) {
		return true
	}

	return false
}

// SetFromPath gets a reference to the given string and assigns it to the FromPath field.
func (o *UpdateFileOptions) SetFromPath(v string) {
	o.FromPath = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *UpdateFileOptions) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileOptions) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *UpdateFileOptions) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *UpdateFileOptions) SetMessage(v string) {
	o.Message = &v
}

// GetNewBranch returns the NewBranch field value if set, zero value otherwise.
func (o *UpdateFileOptions) GetNewBranch() string {
	if o == nil || IsNil(o.NewBranch) {
		var ret string
		return ret
	}
	return *o.NewBranch
}

// GetNewBranchOk returns a tuple with the NewBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileOptions) GetNewBranchOk() (*string, bool) {
	if o == nil || IsNil(o.NewBranch) {
		return nil, false
	}
	return o.NewBranch, true
}

// HasNewBranch returns a boolean if a field has been set.
func (o *UpdateFileOptions) HasNewBranch() bool {
	if o != nil && !IsNil(o.NewBranch) {
		return true
	}

	return false
}

// SetNewBranch gets a reference to the given string and assigns it to the NewBranch field.
func (o *UpdateFileOptions) SetNewBranch(v string) {
	o.NewBranch = &v
}

// GetSha returns the Sha field value
func (o *UpdateFileOptions) GetSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha
}

// GetShaOk returns a tuple with the Sha field value
// and a boolean to check if the value has been set.
func (o *UpdateFileOptions) GetShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha, true
}

// SetSha sets field value
func (o *UpdateFileOptions) SetSha(v string) {
	o.Sha = v
}

// GetSignoff returns the Signoff field value if set, zero value otherwise.
func (o *UpdateFileOptions) GetSignoff() bool {
	if o == nil || IsNil(o.Signoff) {
		var ret bool
		return ret
	}
	return *o.Signoff
}

// GetSignoffOk returns a tuple with the Signoff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileOptions) GetSignoffOk() (*bool, bool) {
	if o == nil || IsNil(o.Signoff) {
		return nil, false
	}
	return o.Signoff, true
}

// HasSignoff returns a boolean if a field has been set.
func (o *UpdateFileOptions) HasSignoff() bool {
	if o != nil && !IsNil(o.Signoff) {
		return true
	}

	return false
}

// SetSignoff gets a reference to the given bool and assigns it to the Signoff field.
func (o *UpdateFileOptions) SetSignoff(v bool) {
	o.Signoff = &v
}

func (o UpdateFileOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateFileOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Branch) {
		toSerialize["branch"] = o.Branch
	}
	if !IsNil(o.Committer) {
		toSerialize["committer"] = o.Committer
	}
	toSerialize["content"] = o.Content
	if !IsNil(o.Dates) {
		toSerialize["dates"] = o.Dates
	}
	if !IsNil(o.FromPath) {
		toSerialize["from_path"] = o.FromPath
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.NewBranch) {
		toSerialize["new_branch"] = o.NewBranch
	}
	toSerialize["sha"] = o.Sha
	if !IsNil(o.Signoff) {
		toSerialize["signoff"] = o.Signoff
	}
	return toSerialize, nil
}

func (o *UpdateFileOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"sha",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateFileOptions := _UpdateFileOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateFileOptions)

	if err != nil {
		return err
	}

	*o = UpdateFileOptions(varUpdateFileOptions)

	return err
}

type NullableUpdateFileOptions struct {
	value *UpdateFileOptions
	isSet bool
}

func (v NullableUpdateFileOptions) Get() *UpdateFileOptions {
	return v.value
}

func (v *NullableUpdateFileOptions) Set(val *UpdateFileOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateFileOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateFileOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateFileOptions(val *UpdateFileOptions) *NullableUpdateFileOptions {
	return &NullableUpdateFileOptions{value: val, isSet: true}
}

func (v NullableUpdateFileOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateFileOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


