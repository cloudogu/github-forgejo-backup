/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the UserHeatmapData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserHeatmapData{}

// UserHeatmapData UserHeatmapData represents the data needed to create a heatmap
type UserHeatmapData struct {
	Contributions *int64 `json:"contributions,omitempty"`
	// TimeStamp defines a timestamp
	Timestamp *int64 `json:"timestamp,omitempty"`
}

// NewUserHeatmapData instantiates a new UserHeatmapData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserHeatmapData() *UserHeatmapData {
	this := UserHeatmapData{}
	return &this
}

// NewUserHeatmapDataWithDefaults instantiates a new UserHeatmapData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserHeatmapDataWithDefaults() *UserHeatmapData {
	this := UserHeatmapData{}
	return &this
}

// GetContributions returns the Contributions field value if set, zero value otherwise.
func (o *UserHeatmapData) GetContributions() int64 {
	if o == nil || IsNil(o.Contributions) {
		var ret int64
		return ret
	}
	return *o.Contributions
}

// GetContributionsOk returns a tuple with the Contributions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserHeatmapData) GetContributionsOk() (*int64, bool) {
	if o == nil || IsNil(o.Contributions) {
		return nil, false
	}
	return o.Contributions, true
}

// HasContributions returns a boolean if a field has been set.
func (o *UserHeatmapData) HasContributions() bool {
	if o != nil && !IsNil(o.Contributions) {
		return true
	}

	return false
}

// SetContributions gets a reference to the given int64 and assigns it to the Contributions field.
func (o *UserHeatmapData) SetContributions(v int64) {
	o.Contributions = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *UserHeatmapData) GetTimestamp() int64 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserHeatmapData) GetTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *UserHeatmapData) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *UserHeatmapData) SetTimestamp(v int64) {
	o.Timestamp = &v
}

func (o UserHeatmapData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserHeatmapData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Contributions) {
		toSerialize["contributions"] = o.Contributions
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullableUserHeatmapData struct {
	value *UserHeatmapData
	isSet bool
}

func (v NullableUserHeatmapData) Get() *UserHeatmapData {
	return v.value
}

func (v *NullableUserHeatmapData) Set(val *UserHeatmapData) {
	v.value = val
	v.isSet = true
}

func (v NullableUserHeatmapData) IsSet() bool {
	return v.isSet
}

func (v *NullableUserHeatmapData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserHeatmapData(val *UserHeatmapData) *NullableUserHeatmapData {
	return &NullableUserHeatmapData{value: val, isSet: true}
}

func (v NullableUserHeatmapData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserHeatmapData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
