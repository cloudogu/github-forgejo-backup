/*
Forgejo API

This documentation describes the Forgejo API.

API version: 12.0.1+gitea-1.22.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forgejo

import (
	"encoding/json"
)

// checks if the WikiPage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WikiPage{}

// WikiPage WikiPage a wiki page
type WikiPage struct {
	CommitCount *int64 `json:"commit_count,omitempty"`
	// Page content, base64 encoded
	ContentBase64 *string `json:"content_base64,omitempty"`
	Footer *string `json:"footer,omitempty"`
	HtmlUrl *string `json:"html_url,omitempty"`
	LastCommit *WikiCommit `json:"last_commit,omitempty"`
	Sidebar *string `json:"sidebar,omitempty"`
	SubUrl *string `json:"sub_url,omitempty"`
	Title *string `json:"title,omitempty"`
}

// NewWikiPage instantiates a new WikiPage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWikiPage() *WikiPage {
	this := WikiPage{}
	return &this
}

// NewWikiPageWithDefaults instantiates a new WikiPage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWikiPageWithDefaults() *WikiPage {
	this := WikiPage{}
	return &this
}

// GetCommitCount returns the CommitCount field value if set, zero value otherwise.
func (o *WikiPage) GetCommitCount() int64 {
	if o == nil || IsNil(o.CommitCount) {
		var ret int64
		return ret
	}
	return *o.CommitCount
}

// GetCommitCountOk returns a tuple with the CommitCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiPage) GetCommitCountOk() (*int64, bool) {
	if o == nil || IsNil(o.CommitCount) {
		return nil, false
	}
	return o.CommitCount, true
}

// HasCommitCount returns a boolean if a field has been set.
func (o *WikiPage) HasCommitCount() bool {
	if o != nil && !IsNil(o.CommitCount) {
		return true
	}

	return false
}

// SetCommitCount gets a reference to the given int64 and assigns it to the CommitCount field.
func (o *WikiPage) SetCommitCount(v int64) {
	o.CommitCount = &v
}

// GetContentBase64 returns the ContentBase64 field value if set, zero value otherwise.
func (o *WikiPage) GetContentBase64() string {
	if o == nil || IsNil(o.ContentBase64) {
		var ret string
		return ret
	}
	return *o.ContentBase64
}

// GetContentBase64Ok returns a tuple with the ContentBase64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiPage) GetContentBase64Ok() (*string, bool) {
	if o == nil || IsNil(o.ContentBase64) {
		return nil, false
	}
	return o.ContentBase64, true
}

// HasContentBase64 returns a boolean if a field has been set.
func (o *WikiPage) HasContentBase64() bool {
	if o != nil && !IsNil(o.ContentBase64) {
		return true
	}

	return false
}

// SetContentBase64 gets a reference to the given string and assigns it to the ContentBase64 field.
func (o *WikiPage) SetContentBase64(v string) {
	o.ContentBase64 = &v
}

// GetFooter returns the Footer field value if set, zero value otherwise.
func (o *WikiPage) GetFooter() string {
	if o == nil || IsNil(o.Footer) {
		var ret string
		return ret
	}
	return *o.Footer
}

// GetFooterOk returns a tuple with the Footer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiPage) GetFooterOk() (*string, bool) {
	if o == nil || IsNil(o.Footer) {
		return nil, false
	}
	return o.Footer, true
}

// HasFooter returns a boolean if a field has been set.
func (o *WikiPage) HasFooter() bool {
	if o != nil && !IsNil(o.Footer) {
		return true
	}

	return false
}

// SetFooter gets a reference to the given string and assigns it to the Footer field.
func (o *WikiPage) SetFooter(v string) {
	o.Footer = &v
}

// GetHtmlUrl returns the HtmlUrl field value if set, zero value otherwise.
func (o *WikiPage) GetHtmlUrl() string {
	if o == nil || IsNil(o.HtmlUrl) {
		var ret string
		return ret
	}
	return *o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiPage) GetHtmlUrlOk() (*string, bool) {
	if o == nil || IsNil(o.HtmlUrl) {
		return nil, false
	}
	return o.HtmlUrl, true
}

// HasHtmlUrl returns a boolean if a field has been set.
func (o *WikiPage) HasHtmlUrl() bool {
	if o != nil && !IsNil(o.HtmlUrl) {
		return true
	}

	return false
}

// SetHtmlUrl gets a reference to the given string and assigns it to the HtmlUrl field.
func (o *WikiPage) SetHtmlUrl(v string) {
	o.HtmlUrl = &v
}

// GetLastCommit returns the LastCommit field value if set, zero value otherwise.
func (o *WikiPage) GetLastCommit() WikiCommit {
	if o == nil || IsNil(o.LastCommit) {
		var ret WikiCommit
		return ret
	}
	return *o.LastCommit
}

// GetLastCommitOk returns a tuple with the LastCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiPage) GetLastCommitOk() (*WikiCommit, bool) {
	if o == nil || IsNil(o.LastCommit) {
		return nil, false
	}
	return o.LastCommit, true
}

// HasLastCommit returns a boolean if a field has been set.
func (o *WikiPage) HasLastCommit() bool {
	if o != nil && !IsNil(o.LastCommit) {
		return true
	}

	return false
}

// SetLastCommit gets a reference to the given WikiCommit and assigns it to the LastCommit field.
func (o *WikiPage) SetLastCommit(v WikiCommit) {
	o.LastCommit = &v
}

// GetSidebar returns the Sidebar field value if set, zero value otherwise.
func (o *WikiPage) GetSidebar() string {
	if o == nil || IsNil(o.Sidebar) {
		var ret string
		return ret
	}
	return *o.Sidebar
}

// GetSidebarOk returns a tuple with the Sidebar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiPage) GetSidebarOk() (*string, bool) {
	if o == nil || IsNil(o.Sidebar) {
		return nil, false
	}
	return o.Sidebar, true
}

// HasSidebar returns a boolean if a field has been set.
func (o *WikiPage) HasSidebar() bool {
	if o != nil && !IsNil(o.Sidebar) {
		return true
	}

	return false
}

// SetSidebar gets a reference to the given string and assigns it to the Sidebar field.
func (o *WikiPage) SetSidebar(v string) {
	o.Sidebar = &v
}

// GetSubUrl returns the SubUrl field value if set, zero value otherwise.
func (o *WikiPage) GetSubUrl() string {
	if o == nil || IsNil(o.SubUrl) {
		var ret string
		return ret
	}
	return *o.SubUrl
}

// GetSubUrlOk returns a tuple with the SubUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiPage) GetSubUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SubUrl) {
		return nil, false
	}
	return o.SubUrl, true
}

// HasSubUrl returns a boolean if a field has been set.
func (o *WikiPage) HasSubUrl() bool {
	if o != nil && !IsNil(o.SubUrl) {
		return true
	}

	return false
}

// SetSubUrl gets a reference to the given string and assigns it to the SubUrl field.
func (o *WikiPage) SetSubUrl(v string) {
	o.SubUrl = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *WikiPage) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiPage) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *WikiPage) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *WikiPage) SetTitle(v string) {
	o.Title = &v
}

func (o WikiPage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WikiPage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommitCount) {
		toSerialize["commit_count"] = o.CommitCount
	}
	if !IsNil(o.ContentBase64) {
		toSerialize["content_base64"] = o.ContentBase64
	}
	if !IsNil(o.Footer) {
		toSerialize["footer"] = o.Footer
	}
	if !IsNil(o.HtmlUrl) {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if !IsNil(o.LastCommit) {
		toSerialize["last_commit"] = o.LastCommit
	}
	if !IsNil(o.Sidebar) {
		toSerialize["sidebar"] = o.Sidebar
	}
	if !IsNil(o.SubUrl) {
		toSerialize["sub_url"] = o.SubUrl
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

type NullableWikiPage struct {
	value *WikiPage
	isSet bool
}

func (v NullableWikiPage) Get() *WikiPage {
	return v.value
}

func (v *NullableWikiPage) Set(val *WikiPage) {
	v.value = val
	v.isSet = true
}

func (v NullableWikiPage) IsSet() bool {
	return v.isSet
}

func (v *NullableWikiPage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWikiPage(val *WikiPage) *NullableWikiPage {
	return &NullableWikiPage{value: val, isSet: true}
}

func (v NullableWikiPage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWikiPage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


